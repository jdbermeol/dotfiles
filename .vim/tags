!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
,/	mappings.vim	/^nmap <silent> ,\/ :nohlsearch<CR>$/;"	m
,e	plugin/debugger.vim	/^nnoremap ,e :python debugger_watch_input("eval")<cr>A$/;"	m
.	bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> .     :<C-U>call <SID>repeat(v:count)<CR>$/;"	m
.append(node)	bundle/Gundo/plugin/gundo.vim	/^        nodes.append(node)$/;"	m
.append(root)	bundle/Gundo/plugin/gundo.vim	/^    nodes.append(root)$/;"	m
.extend(	bundle/Gundo/plugin/gundo.vim	/^    nodeline.extend($/;"	m
.extend([char,	bundle/Gundo/plugin/gundo.vim	/^    nodeline.extend([char, " "])$/;"	m
;	mappings.vim	/^nnoremap ; :$/;"	m
<2-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <2-LeftMouse>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<2-RightMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <2-RightMouse> <space>$/;"	m
<3-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <3-LeftMouse>  <Nop>$/;"	m
<3-RightMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <3-RightMouse> <space>$/;"	m
<4-RightMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <4-RightMouse> <space>$/;"	m
<C-2-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <C-2-LeftMouse> <C-Return>$/;"	m
<C-Down>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-Down>  <C-W>j$/;"	m
<C-Down>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-Down>  <C-W>j$/;"	m
<C-Down>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Down> \\|:silent call <SID>MoveDown()<CR>$/;"	m
<C-G>S	bundle/surround.vim/plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	bundle/surround.vim/plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-H>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-H> <C-W>h$/;"	m
<C-H>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-H> <C-W>h$/;"	m
<C-J>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-J> <C-W>j$/;"	m
<C-J>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-J> <C-W>j$/;"	m
<C-K>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-K> <C-W>k$/;"	m
<C-K>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-K> <C-W>k$/;"	m
<C-L>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-L> <C-W>l$/;"	m
<C-L>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-L> <C-W>l$/;"	m
<C-Left>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-Left>  <C-W>h$/;"	m
<C-Left>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-Left>  <C-W>h$/;"	m
<C-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <C-LeftMouse>   <LeftMouse>$/;"	m
<C-R>	bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> <C-R> :<C-U>call <SID>wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<C-Return>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Return> \\|:call <SID>DoFoldOrOpenEntry('silent! only', 'e')<CR>$/;"	m
<C-Right>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-Right> <C-W>l$/;"	m
<C-Right>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-Right> <C-W>l$/;"	m
<C-S-TAB>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>$/;"	m
<C-S-TAB>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-S-TAB> <C-W>W$/;"	m
<C-S-TAB>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-S-TAB> :call <SID>CycleBuffer(0)<CR>:<BS>$/;"	m
<C-S-TAB>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-S-TAB> <C-W>W$/;"	m
<C-S>	bundle/surround.vim/plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<C-TAB>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>$/;"	m
<C-TAB>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-TAB>   <C-W>w$/;"	m
<C-TAB>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-TAB>   :call <SID>CycleBuffer(1)<CR>:<BS>$/;"	m
<C-TAB>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-TAB>   <C-W>w$/;"	m
<C-Up>	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  noremap <C-Up>    <C-W>k$/;"	m
<C-Up>	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  noremap <C-Up>    <C-W>k$/;"	m
<C-Up>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <C-Up>   \\|:silent call <SID>MoveUp()<CR>$/;"	m
<C-W><C-O>	bundle/project.tar.gz/plugin/project.vim	/^                nmap <silent> <unique> <C-W><C-O> <C-W>o$/;"	m
<C-W><C-]>	bundle/cucumber.zip/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W><C-]>  :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W>]	bundle/cucumber.zip/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W>]      :<C-U>exe <SID>jump('split',v:count)<CR>$/;"	m
<C-W>o	bundle/project.tar.gz/plugin/project.vim	/^                nmap <silent> <unique> <C-W>o <Plug>ProjectOnly$/;"	m
<C-W>}	bundle/cucumber.zip/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-W>}      :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
<C-]>	bundle/cucumber.zip/ftplugin/cucumber.vim	/^  nmap <silent><buffer> <C-]>       :<C-U>exe <SID>jump('edit',v:count)<CR>$/;"	m
<C-^>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <C-^> <Nop>$/;"	m
<C-h>	mappings.vim	/^map <C-h> <C-w>h$/;"	m
<C-j>	mappings.vim	/^map <C-j> <C-w>j$/;"	m
<C-k>	mappings.vim	/^map <C-k> <C-w>k$/;"	m
<C-l>	mappings.vim	/^map <C-l> <C-w>l$/;"	m
<F12>	bundle/project.tar.gz/plugin/project.vim	/^        nmap <silent> <F12> <Plug>ToggleProject$/;"	m
<F1>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <F1> :let g:proj_doinghelp = 1<CR><F1>$/;"	m
<F1>	mappings.vim	/^inoremap <F1> <ESC>$/;"	m
<F1>	mappings.vim	/^nnoremap <F1> <ESC>$/;"	m
<F1>	mappings.vim	/^vnoremap <F1> <ESC>$/;"	m
<F2>	mappings.vim	/^nnoremap <silent> <F2> :Project<CR>$/;"	m
<F3>	mappings.vim	/^map <F3> :source $MYVIMRC<CR>:echoe "Vimrc Reloaded!!!"<CR>$/;"	m
<F4>	bundle/svndiff.vim/plugin/svndiff.vim	/^inoremap <silent> <F4> <C-O>:close<CR>$/;"	m
<F4>	mappings.vim	/^map <F4> :TlistToggle<cr>$/;"	m
<F5>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent>           <F5> :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<F5>	mappings.vim	/^map <F5> :NERDTreeToggle<cr>$/;"	m
<F7>	mappings.vim	/^map <F7> :YRToggle<cr>$/;"	m
<F8>	mappings.vim	/^map <F8> :!\/usr\/bin\/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>$/;"	m
<F8>	mappings.vim	/^map <F8> :GundoToggle<cr>$/;"	m
<Leader><F11>	plugin/debugger.vim	/^map <Leader><F11> :python debugger_context()<cr>$/;"	m
<Leader><F11>	plugin/debugger.vim	/^map <Leader><F11> :python debugger_watch_input("context_get")<cr>A<cr>$/;"	m
<Leader><F12>	plugin/debugger.vim	/^map <Leader><F12> :python debugger_property()<cr>$/;"	m
<Leader><F12>	plugin/debugger.vim	/^map <Leader><F12> :python debugger_watch_input("property_get", '<cword>')<cr>A<cr>$/;"	m
<Leader><F1>	plugin/debugger.vim	/^map <Leader><F1> :python debugger_resize()<cr>$/;"	m
<Leader><F2>	plugin/debugger.vim	/^map <Leader><F2> :python debugger_command('step_into')<cr>$/;"	m
<Leader><F3>	plugin/debugger.vim	/^map <Leader><F3> :python debugger_command('step_over')<cr>$/;"	m
<Leader><F4>	plugin/debugger.vim	/^map <Leader><F4> :python debugger_command('step_out')<cr>$/;"	m
<Leader><F5>	plugin/debugger.vim	/^map <Leader><F5> :python debugger_run()<cr>$/;"	m
<Leader><F6>	plugin/debugger.vim	/^map <Leader><F6> :python debugger_quit()<cr>$/;"	m
<Leader><F7>	plugin/debugger.vim	/^map <Leader><F7> :python debugger_command('step_into')<cr>$/;"	m
<Leader><F8>	plugin/debugger.vim	/^map <Leader><F8> :python debugger_command('step_over')<cr>$/;"	m
<Leader><F9>	plugin/debugger.vim	/^map <Leader><F9> :python debugger_command('step_out')<cr>$/;"	m
<Leader>F	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>F       :call EasyMotionF(0, 1)<CR>$/;"	m
<Leader>F	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>F       :call EasyMotionF(0, 1)<CR>$/;"	m
<Leader>F	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>F  :<C-U>call EasyMotionF(1, 1)<CR>$/;"	m
<Leader>T	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>T       :call EasyMotionT(0, 1)<CR>$/;"	m
<Leader>T	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>T       :call EasyMotionT(0, 1)<CR>$/;"	m
<Leader>T	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>T  :<C-U>call EasyMotionT(1, 1)<CR>$/;"	m
<Leader>b	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>b       :call EasyMotionWB(0, 1)<CR>$/;"	m
<Leader>b	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>b       :call EasyMotionWB(0, 1)<CR>$/;"	m
<Leader>b	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>b  :<C-U>call EasyMotionWB(1, 1)<CR>$/;"	m
<Leader>di	plugin/debugger.vim	/^map <Leader>di :python debugger_command('step_into')<cr>$/;"	m
<Leader>do	plugin/debugger.vim	/^map <Leader>do :python debugger_command('step_over')<cr>$/;"	m
<Leader>dr	plugin/debugger.vim	/^map <Leader>dr :python debugger_resize()<cr>$/;"	m
<Leader>dt	plugin/debugger.vim	/^map <Leader>dt :python debugger_command('step_out')<cr>$/;"	m
<Leader>e	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>e       :call EasyMotionE(0, 0)<CR>$/;"	m
<Leader>e	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>e       :call EasyMotionE(0, 0)<CR>$/;"	m
<Leader>e	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>e  :<C-U>call EasyMotionE(1, 0)<CR>$/;"	m
<Leader>f	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>f       :call EasyMotionF(0, 0)<CR>$/;"	m
<Leader>f	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>f       :call EasyMotionF(0, 0)<CR>$/;"	m
<Leader>f	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>f  :<C-U>call EasyMotionF(1, 0)<CR>$/;"	m
<Leader>ge	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>ge      :call EasyMotionE(0, 1)<CR>$/;"	m
<Leader>ge	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>ge      :call EasyMotionE(0, 1)<CR>$/;"	m
<Leader>ge	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>ge :<C-U>call EasyMotionE(1, 1)<CR>$/;"	m
<Leader>j	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>j       :call EasyMotionJK(0, 0)<CR>$/;"	m
<Leader>j	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>j       :call EasyMotionJK(0, 0)<CR>$/;"	m
<Leader>j	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>j  :<C-U>call EasyMotionJK(1, 0)<CR>$/;"	m
<Leader>k	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>k       :call EasyMotionJK(0, 1)<CR>$/;"	m
<Leader>k	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>k       :call EasyMotionJK(0, 1)<CR>$/;"	m
<Leader>k	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>k  :<C-U>call EasyMotionJK(1, 1)<CR>$/;"	m
<Leader>mbc	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  map <unique> <Leader>mbc <Plug>CMiniBufExplorer$/;"	m
<Leader>mbc	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  map <unique> <Leader>mbc <Plug>CMiniBufExplorer$/;"	m
<Leader>mbe	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  map <unique> <Leader>mbe <Plug>MiniBufExplorer$/;"	m
<Leader>mbe	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  map <unique> <Leader>mbe <Plug>MiniBufExplorer$/;"	m
<Leader>mbt	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  map <unique> <Leader>mbt <Plug>TMiniBufExplorer$/;"	m
<Leader>mbt	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  map <unique> <Leader>mbt <Plug>TMiniBufExplorer$/;"	m
<Leader>mbu	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  map <unique> <Leader>mbu <Plug>UMiniBufExplorer$/;"	m
<Leader>mbu	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  map <unique> <Leader>mbu <Plug>UMiniBufExplorer$/;"	m
<Leader>pal	mappings.vim	/^nnoremap <silent> <Leader>pal  :Project .vimproject<CR>$/;"	m
<Leader>rwp	bundle/Align/plugin/cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	bundle/Align/plugin/cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<Leader>t	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>t       :call EasyMotionT(0, 0)<CR>$/;"	m
<Leader>t	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>t       :call EasyMotionT(0, 0)<CR>$/;"	m
<Leader>t	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>t  :<C-U>call EasyMotionT(1, 0)<CR>$/;"	m
<Leader>w	bundle/EasyMotion/plugin/EasyMotion.vim	/^		nnoremap <silent> <Leader>w       :call EasyMotionWB(0, 0)<CR>$/;"	m
<Leader>w	bundle/EasyMotion/plugin/EasyMotion.vim	/^		onoremap <silent> <Leader>w       :call EasyMotionWB(0, 0)<CR>$/;"	m
<Leader>w	bundle/EasyMotion/plugin/EasyMotion.vim	/^		vnoremap <silent> <Leader>w  :<C-U>call EasyMotionWB(1, 0)<CR>$/;"	m
<LocalLeader>0	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>0 \\|:call <SID>ListSpawn("")<CR>$/;"	m
<LocalLeader><Down>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Down> <C-Down>$/;"	m
<LocalLeader><Up>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Up> <C-Up>$/;"	m
<LocalLeader>C	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>C :call <SID>CreateEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>E	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>E :call <SID>OpenEntry(line('.'), '', 'e', 1)<CR>$/;"	m
<LocalLeader>F0	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>F0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>G	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>G \\|:call <SID>GrepAll(1, line('.'), "")<CR>$/;"	m
<LocalLeader>I	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>I :echo Project_GetFname(line('.'))<CR>$/;"	m
<LocalLeader>L	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>L \\|:call <SID>LoadAll(1, line('.'))<CR>$/;"	m
<LocalLeader>R	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>R :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>S	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>S \\|:call <SID>LoadAllSplit(0, line('.'))<CR>$/;"	m
<LocalLeader>T	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>T \\|:call <SID>DoFoldOrOpenEntry('', 'tabe')<CR>$/;"	m
<LocalLeader>W	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>W \\|:call <SID>WipeAll(1, line('.'))<CR>$/;"	m
<LocalLeader>[	mappings.vim	/^nnoremap <silent> <LocalLeader>[ :tabprev<CR>$/;"	m
<LocalLeader>]	mappings.vim	/^nnoremap <silent> <LocalLeader>] :tabnext<CR>$/;"	m
<LocalLeader>b	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    map <unique> <buffer> <LocalLeader>b <Plug>JavagetsetInsertBothGetterSetter$/;"	m
<LocalLeader>c	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>c :call <SID>CreateEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>e	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>e :call <SID>OpenEntry(line('.'), '', '', 0)<CR>$/;"	m
<LocalLeader>f0	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer>          <LocalLeader>f0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>g	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    map <unique> <buffer> <LocalLeader>g <Plug>JavagetsetInsertGetterOnly$/;"	m
<LocalLeader>g	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>g \\|:call <SID>GrepAll(0, line('.'), "")<CR>$/;"	m
<LocalLeader>i	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>i :echo <SID>RecursivelyConstructDirectives(line('.'))<CR>$/;"	m
<LocalLeader>l	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>l \\|:call <SID>LoadAll(0, line('.'))<CR>$/;"	m
<LocalLeader>o	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>o <C-Return>$/;"	m
<LocalLeader>o	mappings.vim	/^nnoremap <LocalLeader>o :bnext<CR>$/;"	m
<LocalLeader>o	mappings.vim	/^nnoremap <LocalLeader>o :bp<CR>$/;"	m
<LocalLeader>p	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    map <unique> <buffer> <LocalLeader>p <Plug>JavagetsetInsertGetterSetter$/;"	m
<LocalLeader>pp	mappings.vim	/^nmap <LocalLeader>pp :set paste!<cr>$/;"	m
<LocalLeader>r	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>r :call <SID>RefreshEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>s	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    map <unique> <buffer> <LocalLeader>s <Plug>JavagetsetInsertSetterOnly$/;"	m
<LocalLeader>s	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>s <S-Return>$/;"	m
<LocalLeader>v	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <LocalLeader>v <M-CR>$/;"	m
<LocalLeader>w	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>w \\|:call <SID>WipeAll(0, line('.'))<CR>$/;"	m
<LocalLeader>x	mappings.vim	/^nnoremap <LocalLeader>x :BufClose<CR>$/;"	m
<M-2-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <M-2-LeftMouse> <M-CR>$/;"	m
<M-CR>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <M-CR> <Return><C-W>p$/;"	m
<Plug>(quickrun)	bundle/vim-quickrun/plugin/quickrun.vim	/^nnoremap <silent> <Plug>(quickrun) :<C-u>QuickRun -mode n<CR>$/;"	m
<Plug>(quickrun)	bundle/vim-quickrun/plugin/quickrun.vim	/^vnoremap <silent> <Plug>(quickrun) :<C-u>QuickRun -mode v<CR>$/;"	m
<Plug>(quickrun-op)	bundle/vim-quickrun/plugin/quickrun.vim	/^nnoremap <silent> <Plug>(quickrun-op) :<C-u>set operatorfunc=QuickRun<CR>g@$/;"	m
<Plug>AM_Htd	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_T|	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T;	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T=	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_T?	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T@	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_Tab	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Ts,	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Tsp	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_T~	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a(	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	bundle/Align/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	bundle/Align/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	bundle/Align/plugin/AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	bundle/Align/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>CMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>$/;"	m
<Plug>CMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^noremap <unique> <script> <Plug>CMiniBufExplorer :call <SID>StopExplorer(1)<CR>:<BS>$/;"	m
<Plug>Csurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>D	bundle/svndiff.vim/plugin/svndiff.vim	/^noremap <unique> <script> <Plug>D :call <SID>Svndiff()<CR>$/;"	m
<Plug>Dsurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	bundle/surround.vim/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	bundle/surround.vim/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>MiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>$/;"	m
<Plug>MiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^noremap <unique> <script> <Plug>MiniBufExplorer  :call <SID>StartExplorer(1, -1)<CR>:<BS>$/;"	m
<Plug>ProjectOnly	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <script> <Plug>ProjectOnly :call <SID>DoProjectOnly()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	bundle/Align/plugin/cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	bundle/Align/plugin/cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>SuperTabBackward	bundle/SuperTab-continued./plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	bundle/SuperTab-continued./plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<Plug>TMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>$/;"	m
<Plug>TMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^noremap <unique> <script> <Plug>TMiniBufExplorer :call <SID>ToggleExplorer()<CR>:<BS>$/;"	m
<Plug>ToggleProject	bundle/project.tar.gz/plugin/project.vim	/^nnoremap <script> <Plug>ToggleProject :call <SID>DoToggleProject()<CR>$/;"	m
<Plug>UMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>$/;"	m
<Plug>UMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^noremap <unique> <script> <Plug>UMiniBufExplorer :call <SID>AutoUpdate(-1)<CR>:<BS>$/;"	m
<Plug>VSurround	bundle/surround.vim/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	bundle/surround.vim/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>Vsurround	bundle/surround.vim/plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	bundle/surround.vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Return>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <Return>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<RightMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nmap     <buffer> <silent> <RightMouse>   <space>$/;"	m
<S-2-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <S-2-LeftMouse> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<S-LeftMouse>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <S-LeftMouse>   <LeftMouse>$/;"	m
<S-Return>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <S-Return> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	bundle/Align/plugin/AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	bundle/Align/plugin/AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>YRGetChar	bundle/YankRing.vim/plugin/yankring.vim	/^inoremap <script> <SID>YRGetChar <c-r>=YRGetChar()<CR>$/;"	m
<SID>xx	bundle/rails.vim/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	bundle/taglist-plus/plugin/taglist-plus.vim	/^    map <SID>xx <SID>xx$/;"	m
<SID>yrrecord	bundle/YankRing.vim/plugin/yankring.vim	/^inoremap <silent> <SID>yrrecord <C-R>=YRRecord3()<cr>$/;"	m
<SID>yrrecord	bundle/YankRing.vim/plugin/yankring.vim	/^nnoremap <silent> <SID>yrrecord :call YRRecord3()<cr>$/;"	m
<c-n>	bundle/SuperTab-continued./plugin/supertab.vim	/^    imap <c-n> <Plug>SuperTabForward$/;"	m
<c-p>	bundle/SuperTab-continued./plugin/supertab.vim	/^    imap <c-p> <Plug>SuperTabBackward$/;"	m
<c-r><tab>	bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-x>	bundle/SuperTab-continued./plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	bundle/SuperTab-continued./plugin/supertab.vim	/^      inoremap <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<leader>ca	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<leader>l	mappings.vim	/^nmap <leader>l :set list!<CR>$/;"	m
<plug>Dh	bundle/svndiff.vim/plugin/svndiff.vim	/^noremap <unique> <script> <plug>Dh :call <SID>Svndiff("h")<CR>$/;"	m
<plug>NERDCommenterAlignBoth	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<space>	bundle/project.tar.gz/plugin/project.vim	/^        nnoremap <buffer> <silent> <space>  \\|:silent exec 'vertical resize '.(match(g:proj_flags, '\\Ct')!=-1 && winwidth('.') > g:proj_window_width?(g:proj_window_width):(winwidth('.') + g:proj_window_increment))<CR>$/;"	m
<space>	mappings.vim	/^nnoremap <space> za$/;"	m
<tab>	bundle/snipmate.vim/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^        node = Node(n=alt['seq'], parent=p, time=alt['time'], curhead=curhead)$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    nmap = dict((node.n, node) for node in nodes)$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    nmorecols = len(seen) - ncols$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    nodeidx = seen.index(rev)$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    nodeline = ["|", " "] * idx$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    nodes = []$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^    now = time.time()$/;"	m
=	bundle/Gundo/plugin/gundo.vim	/^normal = lambda s: vim.command('normal %s' % s)$/;"	m
Abbrev	bundle/rails.vim/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
Ack	bundle/ack.vim/plugin/ack.vim	/^command! -nargs=* -complete=file Ack call Ack(<q-args>)$/;"	c
Ack	bundle/ack.vim/plugin/ack.vim	/^function! Ack(args)$/;"	f
AckAdd	bundle/ack.vim/plugin/ack.vim	/^command! -nargs=* -complete=file AckAdd call AckAdd(<q-args>)$/;"	c
AckAdd	bundle/ack.vim/plugin/ack.vim	/^function! AckAdd(args)$/;"	f
Add	bundle/cucumber.zip/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
AddBracketExpand	bundle/rails.vim/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	bundle/rails.vim/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddLeftDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddParenExpand	bundle/rails.vim/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddRightDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddScopedTags	bundle/Tagbar/plugin/tagbar.vim	/^function! s:AddScopedTags(tags, processedtags, curpath, pscope, depth, typeinfo)$/;"	f
AddSelectiveExpand	bundle/rails.vim/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	bundle/rails.vim/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
AddTabularPattern	bundle/Tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	bundle/Tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	bundle/Tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	bundle/Tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
Align	bundle/Align/plugin/AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	bundle/Align/autoload/Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	bundle/Align/autoload/Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	bundle/Align/autoload/Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	bundle/Align/autoload/Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	bundle/Align/autoload/Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
AlignCtrl	bundle/Align/plugin/AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	bundle/Align/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignPop	bundle/Align/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	bundle/Align/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	bundle/Align/plugin/AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
AlreadyExists	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:AlreadyExists()$/;"	f
AltMultipart	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
Alternate	bundle/rails.vim/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
AppendCommentToLine	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
AskUser	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:AskUser()$/;"	f
Asyncer	bundle/L9/autoload/l9/async.py	/^class Asyncer:$/;"	c	inherits:
AutoUpdate	bundle/Tagbar/plugin/tagbar.vim	/^function! s:AutoUpdate(fname)$/;"	f
AutoUpdate	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>AutoUpdate(delBufNum)$/;"	f
AutoUpdate	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>AutoUpdate(delBufNum)$/;"	f
BackwardsSnippet	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Blame	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameJump	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
Bookmark.AddBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Bp	plugin/debugger.vim	/^command! -nargs=? Bp python debugger_mark('<args>')$/;"	c
BreakPoint	plugin/debugger.py	/^class BreakPoint:$/;"	c	inherits:
BufAbbreviations	bundle/rails.vim/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufClose	bundle/BufClose.vim/plugin/BufClose.vim	/^command! -nargs=? -complete=buffer -bang BufClose$/;"	c
BufClose	bundle/BufClose.vim/plugin/BufClose.vim	/^function! BufClose(buffer, bang)$/;"	f
BufCommands	bundle/rails.vim/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	bundle/rails.vim/autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	bundle/rails.vim/autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufInit	bundle/rails.vim/plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	bundle/rails.vim/autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufMappings	bundle/rails.vim/autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	bundle/rails.vim/autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	bundle/rails.vim/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufReadIndex	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BufReadIndex()$/;"	f
BufReadIndexFile	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BufReadIndexFile()$/;"	f
BufReadObject	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BufReadObject()$/;"	f
BufScriptWrappers	bundle/rails.vim/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	bundle/rails.vim/autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSyntax	bundle/rails.vim/autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BufWriteIndexFile	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:BufWriteIndexFile()$/;"	f
BufferFinder	bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^  class BufferFinder < Finder$/;"	c	class:CommandT
BufferList	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! BufferList()$/;"	f
BufferListDeleteBuffer	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! BufferListDeleteBuffer()$/;"	f
BufferListGetSelectedBuffer	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! BufferListGetSelectedBuffer()$/;"	f
BufferListGoto	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! BufferListGoto(line)$/;"	f
BufferListMove	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! BufferListMove(where)$/;"	f
BufferScanner	bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^  class BufferScanner < Scanner$/;"	c	class:CommandT
BuildBufferList	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>BuildBufferList(delBufNum, updateBufList)$/;"	f
BuildBufferList	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>BuildBufferList(delBufNum, updateBufList)$/;"	f
BuildTabStops	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
Bundle	autoload/vundle.vim	/^com! -nargs=+         Bundle$/;"	c
BundleClean	autoload/vundle.vim	/^com! -nargs=? -bang   BundleClean$/;"	c
BundleDocs	autoload/vundle.vim	/^com! -nargs=0         BundleDocs $/;"	c
BundleInstall	autoload/vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall$/;"	c
BundleSearch	autoload/vundle.vim	/^com! -nargs=? -bang   BundleSearch$/;"	c
Bundles	autoload/vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete Bundles$/;"	c
C	ftplugin/vundle.vim	/^nnoremap <buffer> C :BundleClean!<CR>$/;"	m
CHILD	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    CHILD = 4$/;"	v	class:Token
CHILD	bundle/sparkup/sparkup	/^    CHILD = 4$/;"	v	class:Token
CHILD	bundle/sparkup/sparkup.py	/^    CHILD = 4$/;"	v	class:Token
CHILD	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    CHILD = 4$/;"	v	class:Token
CMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! CMiniBufExplorer  call <SID>StopExplorer(1)$/;"	c
CMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! CMiniBufExplorer  call <SID>StopExplorer(1)$/;"	c
CTAGS	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^command! CTAGS let generate_tags=1|call GenerateTags()$/;"	c
CanCommentLine	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CaptureKeyPresses	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:CaptureKeyPresses()$/;"	f
Center	bundle/Tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
CheckAutocmdEnablePHPFold	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:CheckAutocmdEnablePHPFold()$/;"	f
ChooseCommandMap	bundle/Tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
ChooseSnippet	bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
CleanUp	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CleanUp()$/;"	f
Close	bundle/snipmate.vim/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CloseWindow	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CloseWindow()$/;"	f
CommandEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandLineCompletion	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommandList	bundle/rails.vim/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandT	bundle/Command-T/plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShowFileFinder(<q-args>)$/;"	c
CommandT	bundle/Command-T/ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	bundle/Command-T/ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShow(<q-args>)$/;"	c
CommandT	bundle/command-t/ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	bundle/command-t/ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelection	bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionSplit	bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionTab	bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	bundle/Command-T/plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTAcceptSelectionVSplit	bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	bundle/Command-T/plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBackspace	bundle/command-t/plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBuffer	bundle/Command-T/plugin/command-t.vim	/^command CommandTBuffer call <SID>CommandTShowBufferFinder()$/;"	c
CommandTCancel	bundle/Command-T/plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTCancel	bundle/command-t/plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	bundle/Command-T/plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTClear	bundle/command-t/plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorEnd	bundle/command-t/plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorLeft	bundle/command-t/plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorRight	bundle/command-t/plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	bundle/Command-T/plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTCursorStart	bundle/command-t/plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	bundle/Command-T/plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTDelete	bundle/command-t/plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	bundle/Command-T/plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	bundle/Command-T/plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTFlush	bundle/command-t/plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	bundle/command-t/plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	bundle/Command-T/plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTHandleKey	bundle/command-t/plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTMatch_initialize	bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	bundle/Command-T/ruby/command-t/match.h	/^extern VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_matches	bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_matches	bundle/Command-T/ruby/command-t/match.h	/^extern VALUE CommandTMatch_matches(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_matches	bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_matches	bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_matches(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_score	bundle/Command-T/ruby/command-t/match.h	/^extern VALUE CommandTMatch_score(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_score	bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_score(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_to_s	bundle/Command-T/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_to_s	bundle/Command-T/ruby/command-t/match.h	/^extern VALUE CommandTMatch_to_s(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_to_s	bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_to_s	bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_to_s(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatcher_initialize	bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	bundle/Command-T/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_matches_for	bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	bundle/Command-T/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev);$/;"	p	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev);$/;"	p	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_sorted_matches_for	bundle/Command-T/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	bundle/Command-T/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options);$/;"	p	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options);$/;"	p	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTRubyWarning	bundle/Command-T/plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTRubyWarning	bundle/command-t/plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	bundle/Command-T/plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectNext	bundle/command-t/plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	bundle/Command-T/plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTSelectPrev	bundle/command-t/plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShow	bundle/command-t/plugin/command-t.vim	/^function s:CommandTShow(arg)$/;"	f
CommandTShowBufferFinder	bundle/Command-T/plugin/command-t.vim	/^function s:CommandTShowBufferFinder()$/;"	f
CommandTShowFileFinder	bundle/Command-T/plugin/command-t.vim	/^function s:CommandTShowFileFinder(arg)$/;"	f
CommandTToggleFocus	bundle/Command-T/plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandTToggleFocus	bundle/command-t/plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	bundle/Command-T/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	bundle/Command-T/ruby/command-t/ext.h	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash);$/;"	p	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	bundle/command-t/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	bundle/command-t/ruby/command-t/ext.h	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash);$/;"	p	signature:(const char *option, VALUE hash)
CommentBlock	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
Commit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Commit(args) abort$/;"	f
CommitComplete	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CompareByKind	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CompareByKind(tag1, tag2)$/;"	f
CompareByLine	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CompareByLine(tag1, tag2)$/;"	f
CompleteTabularizeCommand	bundle/Tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
Complete_cd	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	bundle/rails.vim/autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
CompletionReset	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:CompletionReset(char)$/;"	f
ConstructInfo	bundle/project.tar.gz/plugin/project.vim	/^    function! s:ConstructInfo(home, c_d, scriptin, scriptout, flags, filter)$/;"	f
ContextCompletion	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ContextText()$/;"	f
Controller	bundle/Command-T/ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
Controller	bundle/command-t/ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
ConvertLeadingSpacesToTabs	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountNonESCedOccurances	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateAutocommands	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CreateAutocommands()$/;"	f
CreateDelimMapFromCms	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateEntriesFromDir	bundle/project.tar.gz/plugin/project.vim	/^    function! s:CreateEntriesFromDir(recursive)$/;"	f
CreateIndex	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:CreateIndex(chars) " {{{$/;"	f
CreateMaps	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CreateMenus	bundle/rails.vim/plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreatePseudoTag	bundle/Tagbar/plugin/tagbar.vim	/^function! s:CreatePseudoTag(name, curpath, pscope, scope, typeinfo)$/;"	f
CucumberComplete	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
CustomComplete	bundle/rails.vim/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
Cycle	bundle/git.zip/ftplugin/gitrebase.vim	/^command! -buffer -bar Cycle  :call s:cycle()$/;"	c
CycleBuffer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>CycleBuffer(forward)$/;"	f
CycleBuffer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>CycleBuffer(forward)$/;"	f
D	bundle/svndiff.vim/plugin/svndiff.vim	/^com! -bar -nargs=* D :call s:Svndiff(<f-args>)$/;"	c
DEBUG	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>DEBUG(msg, level)$/;"	f
DEBUG	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>DEBUG(msg, level)$/;"	f
DM	bundle/Align/plugin/cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DbgProtocol	plugin/debugger.py	/^class DbgProtocol:$/;"	c	inherits:
DebugParsing	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:DebugParsing(variable)$/;"	f
DebugUI	plugin/debugger.py	/^class DebugUI:$/;"	c	inherits:
Debugger	plugin/debugger.py	/^class Debugger:$/;"	c	inherits:
DefineSnips	bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DestroyMark	bundle/Align/plugin/cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Detect(path)$/;"	f
Detect	bundle/rails.vim/plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
DetermineAction	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:DetermineAction(flag)$/;"	f
Dialect	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Dialect:$/;"	c	inherits:
Dialect	bundle/sparkup/sparkup	/^class Dialect:$/;"	c	inherits:
Dialect	bundle/sparkup/sparkup.py	/^class Dialect:$/;"	c	inherits:
Dialect	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Dialect:$/;"	c	inherits:
Diff	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Diff(...) abort$/;"	f
DiffGitCached	bundle/git.zip/ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DirComplete	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
DisablePHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^command! DisablePHPFolds call <SID>DisablePHPFolds()$/;"	c
DisablePHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:DisablePHPFolds() " {{{$/;"	f
DisplayBuffers	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>DisplayBuffers(delBufNum)$/;"	f
DisplayBuffers	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>DisplayBuffers(delBufNum)$/;"	f
DisplayInfo	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DisplayInfo()$/;"	f
Dn	plugin/debugger.vim	/^command! -nargs=0 Dn python debugger_down()$/;"	c
DoEnsurePlacementSize_au	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoEnsurePlacementSize_au()$/;"	f
DoEntryFromDir	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoEntryFromDir(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
DoFoldOrOpenEntry	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoFoldOrOpenEntry(cmd0, cmd1)$/;"	f
DoProjectOnly	bundle/project.tar.gz/plugin/project.vim	/^        function! s:DoProjectOnly()$/;"	f
DoSetup	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoSetup()$/;"	f
DoSetupAndSplit	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoSetupAndSplit()$/;"	f
DoSetupAndSplit_au	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoSetupAndSplit_au()$/;"	f
DoToggleProject	bundle/project.tar.gz/plugin/project.vim	/^    function! s:DoToggleProject()$/;"	f
Doc	bundle/rails.vim/autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
DoesBlockHaveDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
ELEMENT	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    ELEMENT = 2 $/;"	v	class:Token
ELEMENT	bundle/sparkup/sparkup	/^    ELEMENT = 2 $/;"	v	class:Token
ELEMENT	bundle/sparkup/sparkup.py	/^    ELEMENT = 2 $/;"	v	class:Token
ELEMENT	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    ELEMENT = 2 $/;"	v	class:Token
EasyMotion	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:EasyMotion(regexp, direction, visualmode, mode) " {{{$/;"	f
EasyMotionE	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! EasyMotionE(visualmode, direction) " {{{$/;"	f
EasyMotionF	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! EasyMotionF(visualmode, direction) " {{{$/;"	f
EasyMotionInitHL	bundle/EasyMotion/plugin/EasyMotion.vim	/^			augroup EasyMotionInitHL$/;"	a
EasyMotionJK	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! EasyMotionJK(visualmode, direction) " {{{$/;"	f
EasyMotionT	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! EasyMotionT(visualmode, direction) " {{{$/;"	f
EasyMotionWB	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! EasyMotionWB(visualmode, direction) " {{{$/;"	f
Edit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Edit(cmd,...) abort$/;"	f
Edit	bundle/git.zip/ftplugin/gitrebase.vim	/^command! -buffer -bar Edit   :call s:choose('edit')$/;"	c
Edit	bundle/rails.vim/autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
EditComplete	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditSimpleRb	bundle/rails.vim/autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
Element	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Element:$/;"	c	inherits:
Element	bundle/sparkup/sparkup	/^class Element:$/;"	c	inherits:
Element	bundle/sparkup/sparkup.py	/^class Element:$/;"	c	inherits:
Element	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Element:$/;"	c	inherits:
EnableFastPHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^command! EnableFastPHPFolds call <SID>EnableFastPHPFolds()$/;"	c
EnableFastPHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:EnableFastPHPFolds() " {{{$/;"	f
EnableLongestEnhancement	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:EnableLongestEnhancement()$/;"	f
EnablePHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^command! -nargs=* EnablePHPFolds call <SID>EnablePHPFolds(<f-args>)$/;"	c
EnablePHPFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:EnablePHPFolds(...) " {{{$/;"	f
Esc	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
ExecuteInTree	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
Executor	bundle/L9/autoload/l9/async.py	/^class Executor:$/;"	c	inherits:
ExpandMap	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ExpandMap(map)$/;"	f
Extract	bundle/rails.vim/autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractGitDir	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:ExtractGitDir(path) abort$/;"	f
ExtractSnips	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileFinder	bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^  class FileFinder < Finder$/;"	c	class:CommandT
FileLimitExceeded	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.FileScanner
FileLimitExceeded	bundle/command-t/ruby/command-t/scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.Scanner
FileNameFromUri	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! s:FileNameFromUri(uri)$/;"	f
FileRead	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:FileRead()$/;"	f
FileScanner	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^  class FileScanner < Scanner$/;"	c	class:CommandT
Filename	bundle/snipmate.vim/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FilterString	bundle/Tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
Find	bundle/rails.vim/autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
FindBoundingLinesOfSexyCom	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindCreateWindow	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)$/;"	f
FindCreateWindow	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>FindCreateWindow(bufName, forceEdge, isExplorer, doDebug)$/;"	f
FindDelimiterIndex	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindFoldBottom	bundle/project.tar.gz/plugin/project.vim	/^    function! s:FindFoldBottom(line)$/;"	f
FindFoldTop	bundle/project.tar.gz/plugin/project.vim	/^    function! s:FindFoldTop(line)$/;"	f
FindOpenBracket	bundle/PHP-correct-Indenting/indent/php.vim	/^function! FindOpenBracket(lnum) " {{{$/;"	f
FindOptionalPHPDocComment	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:FindOptionalPHPDocComment() " {{{$/;"	f
FindPatternEnd	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:FindPatternEnd(endPattern) " {{{$/;"	f
FindPatternStart	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:FindPatternStart(startPattern) " {{{$/;"	f
FindProjectFolder	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:FindProjectFolder( start_folder, printWarnings )$/;"	f
FindPureBlockEnd	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:FindPureBlockEnd(startPair, endPair, searchStartPairFirst, ...) " {{{$/;"	f
FindPureBlockStart	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:FindPureBlockStart(startPattern) " {{{$/;"	f
FindTheIfOfAnElse	bundle/PHP-correct-Indenting/indent/php.vim	/^function! FindTheIfOfAnElse (lnum, StopAfterFirstPrevElse) " {{{$/;"	f
FindTheSwitchIndent	bundle/PHP-correct-Indenting/indent/php.vim	/^function! FindTheSwitchIndent (lnum) " {{{$/;"	f
FindWindow	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>FindWindow(bufName, doDebug)$/;"	f
FindWindow	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>FindWindow(bufName, doDebug)$/;"	f
Finder	bundle/Command-T/ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
Finder	bundle/command-t/ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
FinishCommit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:FinishCommit()$/;"	f
Formatter	bundle/command-t/spec/vim_formatter.rb	/^    module Formatter$/;"	m	class:Spec.Runner
ForwardBack	bundle/SuperTab-continued./plugin/supertab.vim	/^  function! s:ForwardBack(command, map)$/;"	f
FufGlobal	bundle/FuzzyFinder/autoload/fuf.vim	/^augroup FufGlobal$/;"	a
GF	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GenerateCTags	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:GenerateCTags( folder, internal_arguments, arguments )$/;"	f
GenerateEntry	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GenerateEntry(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
GenerateProjectCTags	bundle/ProjectCTags/plugin/projectCTags.vim	/^function GenerateProjectCTags( variant, arguments )$/;"	f
GenerateProjectCTagsImpl	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:GenerateProjectCTagsImpl( variant, arguments, verbosity )$/;"	f
GenerateTags	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    function! GenerateTags()$/;"	f
GetAbsBufferDir	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:GetAbsBufferDir()$/;"	f
GetCd	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetCd(info, home)$/;"	f
GetChar	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:GetChar() " {{{$/;"	f
GetCucumberIndent	bundle/cucumber.zip/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetFilter	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetFilter(info, parent_filter)$/;"	f
GetFlags	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetFlags(info)$/;"	f
GetFoldLevel	bundle/Tagbar/plugin/tagbar.vim	/^function! s:GetFoldLevel(lnum)$/;"	f
GetGitconfigIndent	bundle/git.zip/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetHome	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetHome(info, parent_home)$/;"	f
GetIndex	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^function! GetIndex(i)$/;"	f
GetLastRealCodeLNum	bundle/PHP-correct-Indenting/indent/php.vim	/^function! GetLastRealCodeLNum(startline) " {{{$/;"	f
GetLine	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^function! GetLine(i)$/;"	f
GetParentFolder	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:GetParentFolder( folder )$/;"	f
GetPhpIndent	bundle/PHP-correct-Indenting/indent/php.vim	/^function! GetPhpIndent()$/;"	f
GetPrefix	bundle/Tagbar/plugin/tagbar.vim	/^function! s:GetPrefix(tag)$/;"	f
GetRangeAsString	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:GetRangeAsString(first, last)$/;"	f
GetScriptin	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetScriptin(info, home)$/;"	f
GetScriptout	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GetScriptout(info, home)$/;"	f
GetSearchChar	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:GetSearchChar(visualmode) " {{{$/;"	f
GetSelectedBuffer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>GetSelectedBuffer()$/;"	f
GetSelectedBuffer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>GetSelectedBuffer()$/;"	f
GetSexyComLeft	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetTagInfo	bundle/Tagbar/plugin/tagbar.vim	/^function! s:GetTagInfo(linenr)$/;"	f
GetTagName	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^function! GetTagName(curline)$/;"	f
GetUserTypeDefs	bundle/Tagbar/plugin/tagbar.vim	/^function! s:GetUserTypeDefs()$/;"	f
Gist	bundle/gist-vim/plugin/gist.vim	/^command! -nargs=? -range=% Gist :call Gist(<line1>, <line2>, <f-args>)$/;"	c
Gist	bundle/gist-vim/plugin/gist.vim	/^function! Gist(line1, line2, ...)$/;"	f
GistDelete	bundle/gist-vim/plugin/gist.vim	/^function! s:GistDelete(user, token, gistid)$/;"	f
GistDetectFiletype	bundle/gist-vim/plugin/gist.vim	/^function! s:GistDetectFiletype(gistid)$/;"	f
GistGet	bundle/gist-vim/plugin/gist.vim	/^function! s:GistGet(user, token, gistid, clipboard)$/;"	f
GistGetFileName	bundle/gist-vim/plugin/gist.vim	/^function! s:GistGetFileName(gistid)$/;"	f
GistGetPage	bundle/gist-vim/plugin/gist.vim	/^function! s:GistGetPage(url, user, param, opt)$/;"	f
GistList	bundle/gist-vim/plugin/gist.vim	/^function! s:GistList(user, token, gistls, page)$/;"	f
GistListAction	bundle/gist-vim/plugin/gist.vim	/^function! s:GistListAction()$/;"	f
GistPost	bundle/gist-vim/plugin/gist.vim	/^function! s:GistPost(user, token, content, private)$/;"	f
GistPostBuffers	bundle/gist-vim/plugin/gist.vim	/^function! s:GistPostBuffers(user, token, private)$/;"	f
GistUpdate	bundle/gist-vim/plugin/gist.vim	/^function! s:GistUpdate(user, token, content, gistid, gistnm)$/;"	f
GistWrite	bundle/gist-vim/plugin/gist.vim	/^function! s:GistWrite(fname)$/;"	f
Git	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Git(bang,cmd) abort$/;"	f
GitComplete	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:GitComplete(A,L,P) abort$/;"	f
GoWinbufnr	bundle/Align/plugin/cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
Grep	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Grep(bang,arg) abort$/;"	f
GrepAll	bundle/project.tar.gz/plugin/project.vim	/^    function! s:GrepAll(recurse, lineno, pattern)$/;"	f
GundoClose	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoClose()"{{{$/;"	f
GundoDidNotLoad	bundle/Gundo/plugin/gundo.vim	/^    function! s:GundoDidNotLoad()$/;"	f
GundoGetTargetState	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoGetTargetState()"{{{$/;"	f
GundoGoToWindowForBufferName	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoGoToWindowForBufferName(name)"{{{$/;"	f
GundoInlineHelpLength	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoInlineHelpLength()"{{{$/;"	f
GundoIsVisible	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoIsVisible()"{{{$/;"	f
GundoMapGraph	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoMapGraph()"{{{$/;"	f
GundoMapPreview	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoMapPreview()"{{{$/;"	f
GundoMouseDoubleClick	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoMouseDoubleClick()"{{{$/;"	f
GundoMove	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoMove(direction) range"{{{$/;"	f
GundoOpen	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoOpen()"{{{$/;"	f
GundoOpenGraph	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoOpenGraph()"{{{$/;"	f
GundoOpenPreview	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoOpenPreview()"{{{$/;"	f
GundoPlayTo	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoPlayTo()"{{{$/;"	f
GundoRenderChangePreview	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoRenderChangePreview()"{{{$/;"	f
GundoRenderGraph	bundle/Gundo/plugin/gundo.vim	/^command! -nargs=0 GundoRenderGraph call s:GundoRenderGraph()$/;"	c
GundoRenderGraph	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoRenderGraph()"{{{$/;"	f
GundoRenderPreview	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoRenderPreview()"{{{$/;"	f
GundoResizeBuffers	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoResizeBuffers(backto)"{{{$/;"	f
GundoRevert	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoRevert()"{{{$/;"	f
GundoSettingsGraph	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoSettingsGraph()"{{{$/;"	f
GundoSettingsPreview	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoSettingsPreview()"{{{$/;"	f
GundoSyntaxGraph	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoSyntaxGraph()"{{{$/;"	f
GundoToggle	bundle/Gundo/plugin/gundo.vim	/^    command! -nargs=0 GundoToggle call s:GundoDidNotLoad()$/;"	c
GundoToggle	bundle/Gundo/plugin/gundo.vim	/^command! -nargs=0 GundoToggle call s:GundoToggle()$/;"	c
GundoToggle	bundle/Gundo/plugin/gundo.vim	/^function! s:GundoToggle()"{{{$/;"	f
HandleFold	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:HandleFold() " {{{$/;"	f
HasCStyleComments	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasEligibleBuffers	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>HasEligibleBuffers(delBufNum)$/;"	f
HasEligibleBuffers	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>HasEligibleBuffers(delBufNum)$/;"	f
HasLeadingTabs	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HelpWindow	plugin/debugger.py	/^class HelpWindow(VimWindow):$/;"	c	inherits:VimWindow
HiDefaults	bundle/rails.vim/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	bundle/jQuery/syntax/jquery.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	bundle/jQuery/syntax/jquery.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HighlightTag	bundle/Tagbar/plugin/tagbar.vim	/^function! s:HighlightTag(fname)$/;"	f
HtmlDialect	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class HtmlDialect(Dialect):$/;"	c	inherits:Dialect
HtmlDialect	bundle/sparkup/sparkup	/^class HtmlDialect(Dialect):$/;"	c	inherits:Dialect
HtmlDialect	bundle/sparkup/sparkup.py	/^class HtmlDialect(Dialect):$/;"	c	inherits:Dialect
HtmlDialect	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class HtmlDialect(Dialect):$/;"	c	inherits:Dialect
HtmlHiLink	bundle/Markdown/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	bundle/Markdown/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
Init	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:InitBuffer()$/;"	f
InitHL	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:InitHL(group, colors) " {{{$/;"	f
InitOption	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:InitOption(option, default) " {{{$/;"	f
InitStatusline	bundle/rails.vim/autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
InitTypes	bundle/Tagbar/plugin/tagbar.vim	/^function! s:InitTypes()$/;"	f
InitVariable	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
Init_ext	bundle/Command-T/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
Init_ext	bundle/command-t/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InjectIntoStatusline	bundle/rails.vim/autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InsertBothGetterSetter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    \\ InsertBothGetterSetter$/;"	c
InsertGetter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:InsertGetter()$/;"	f
InsertGetterOnly	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    \\ InsertGetterOnly$/;"	c
InsertGetterSetter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    \\ InsertGetterSetter $/;"	c
InsertGetterSetter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:InsertGetterSetter(flag) range$/;"	f
InsertMethodBody	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:InsertMethodBody(text)$/;"	f
InsertSetter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:InsertSetter()$/;"	f
InsertSetterOnly	bundle/php_getset.vim/ftplugin/php_getset.vim	/^    \\ InsertSetterOnly$/;"	c
InsertStatuslineColor	statusline.vim	/^function! InsertStatuslineColor(mode)$/;"	f
Invert	bundle/rails.vim/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
InvertComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsAbsolutePath	bundle/project.tar.gz/plugin/project.vim	/^    function! s:IsAbsolutePath(path)$/;"	f
IsCommented	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInSexyComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsNumEven	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsValidFile	bundle/Tagbar/plugin/tagbar.vim	/^function! s:IsValidFile(fname, ftype)$/;"	f
IslinePHP	bundle/PHP-correct-Indenting/indent/php.vim	/^function! IslinePHP (lnum, tofind) " {{{$/;"	f
JumpInit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:JumpInit() abort$/;"	f
JumpToTag	bundle/Tagbar/plugin/tagbar.vim	/^function! s:JumpToTag()$/;"	f
K	bundle/git.zip/ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
KeyMap.All	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
L9Assert	bundle/L9/plugin/l9.vim	/^  command -nargs=* L9Assert :$/;"	c
L9Assert	bundle/L9/plugin/l9.vim	/^  command -nargs=* L9Assert call eval((<args>) ? 0 : s:handleFailedAssersion(<q-args>))$/;"	c
L9GrepBuffer	bundle/L9/plugin/l9.vim	/^command -nargs=? L9GrepBuffer    call l9#grepBuffers(<q-args>, [bufnr('%')])$/;"	c
L9GrepBufferAll	bundle/L9/plugin/l9.vim	/^command -nargs=? L9GrepBufferAll call l9#grepBuffers(<q-args>, range(1, bufnr('$')))$/;"	c
L9Timer	bundle/L9/plugin/l9.vim	/^  command -nargs=1 L9Timer :$/;"	c
L9Timer	bundle/L9/plugin/l9.vim	/^  command -nargs=1 L9Timer call s:timerBegin(<q-args>)$/;"	c
L9TimerDump	bundle/L9/plugin/l9.vim	/^  command -nargs=0 L9TimerDump :$/;"	c
L9TimerDump	bundle/L9/plugin/l9.vim	/^  command -nargs=0 L9TimerDump call s:timerDump()$/;"	c
L9TimerStop	bundle/L9/plugin/l9.vim	/^  command -nargs=0 L9TimerStop :$/;"	c
L9TimerStop	bundle/L9/plugin/l9.vim	/^  command -nargs=0 L9TimerStop call s:timerStop()$/;"	c
LAck	bundle/ack.vim/plugin/ack.vim	/^command! -nargs=* -complete=file LAck call LAck(<q-args>)$/;"	c
LAck	bundle/ack.vim/plugin/ack.vim	/^function! LAck(args)$/;"	f
LAckAdd	bundle/ack.vim/plugin/ack.vim	/^command! -nargs=* -complete=file LAckAdd call LAckAdd(<q-args>)$/;"	c
LAckAdd	bundle/ack.vim/plugin/ack.vim	/^function! LAckAdd(args)$/;"	f
LastIndexOfDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	bundle/Tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
Left	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
ListSpawn	bundle/project.tar.gz/plugin/project.vim	/^    function! s:ListSpawn(varnamesegment)$/;"	f
LoadAll	bundle/project.tar.gz/plugin/project.vim	/^    function! s:LoadAll(recurse, line)$/;"	f
LoadAllSplit	bundle/project.tar.gz/plugin/project.vim	/^    function! s:LoadAllSplit(recurse, line)$/;"	f
LoadBuffer	bundle/bufferlist.vim/plugin/bufferlist.vim	/^function! LoadBuffer()$/;"	f
LocalModelines	bundle/rails.vim/autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Log(cmd,...)$/;"	f
Log	bundle/rails.vim/autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
LogWindow	plugin/debugger.py	/^class LogWindow(VimWindow):$/;"	c	inherits:VimWindow
MBEClick	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! s:MBEClick()$/;"	f
MBEClick	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! s:MBEClick()$/;"	f
MBEDeleteBuffer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>MBEDeleteBuffer()$/;"	f
MBEDeleteBuffer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>MBEDeleteBuffer()$/;"	f
MBEDoubleClick	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! s:MBEDoubleClick()$/;"	f
MBEDoubleClick	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! s:MBEDoubleClick()$/;"	f
MBESelectBuffer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>MBESelectBuffer()$/;"	f
MBESelectBuffer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>MBESelectBuffer(split)$/;"	f
MBEbn	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! MBEbn call <SID>CycleBuffer(1)$/;"	c
MBEbn	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! MBEbn call <SID>CycleBuffer(1)$/;"	c
MBEbp	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! MBEbp call <SID>CycleBuffer(0)$/;"	c
MBEbp	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! MBEbp call <SID>CycleBuffer(0)$/;"	c
MakeSnip	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	bundle/Align/autoload/Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
ManualCompletionEnter	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
MapKeys	bundle/Tagbar/plugin/tagbar.vim	/^function! s:MapKeys()$/;"	f
MatchWindow	bundle/Command-T/ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
MatchWindow	bundle/command-t/ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
Max	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>Max(argOne, argTwo)$/;"	f
Max	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>Max(argOne, argTwo)$/;"	f
MenuController.New	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Message	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:Message(message) " {{{$/;"	f
MiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! MiniBufExplorer  call <SID>StartExplorer(1, -1)$/;"	c
MiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^augroup MiniBufExplorer$/;"	a
MiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! MiniBufExplorer  call <SID>StartExplorer(1, -1)$/;"	c
MiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^augroup MiniBufExplorer$/;"	a
Move	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Move(force,destination)$/;"	f
MoveComplete	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P)$/;"	f
MoveDown	bundle/project.tar.gz/plugin/project.vim	/^    function! s:MoveDown()$/;"	f
MoveToInsertPosition	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:MoveToInsertPosition()$/;"	f
MoveUp	bundle/project.tar.gz/plugin/project.vim	/^    function! s:MoveUp()$/;"	f
Multipart	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
MyStatusLine	statusline.vim	/^function! MyStatusLine(mode)$/;"	f
NERDComment	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDTree	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	bundle/The-NERD-tree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	bundle/The-NERD-tree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NONE	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^augroup NONE$/;"	a
Navcommand	bundle/rails.vim/autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NerdEcho	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NewProject	bundle/rails.vim/autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	bundle/rails.vim/autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
NumLinesInBuf	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OpenEntry	bundle/project.tar.gz/plugin/project.vim	/^    function! s:OpenEntry(line, precmd, editcmd, dir)$/;"	f
OpenEntry2	bundle/project.tar.gz/plugin/project.vim	/^    function! s:OpenEntry2(line, infoline, fname, editcmd)$/;"	f
OpenWindow	bundle/Tagbar/plugin/tagbar.vim	/^function! s:OpenWindow(autoclose)$/;"	f
Options	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Options:$/;"	c	inherits:
Options	bundle/sparkup/sparkup	/^class Options:$/;"	c	inherits:
Options	bundle/sparkup/sparkup.py	/^class Options:$/;"	c	inherits:
Options	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Options:$/;"	c	inherits:
PARENT	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    PARENT = 8$/;"	v	class:Token
PARENT	bundle/sparkup/sparkup	/^    PARENT = 8$/;"	v	class:Token
PARENT	bundle/sparkup/sparkup.py	/^    PARENT = 8$/;"	v	class:Token
PARENT	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    PARENT = 8$/;"	v	class:Token
PHPCustomFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:PHPCustomFolds() " {{{$/;"	f
PHPFoldMarkers	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:PHPFoldMarkers(startPattern, endPattern, ...) " {{{$/;"	f
PHPFoldProperties	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:PHPFoldProperties(startPattern, endPattern, ...) " {{{$/;"	f
PHPFoldPureBlock	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! s:PHPFoldPureBlock(startPattern, ...) " {{{$/;"	f
PHPFoldText	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! PHPFoldText() " {{{$/;"	f
ParsePattern	bundle/Tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
ParseTagline	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo)$/;"	f
Parser	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Parser:$/;"	c	inherits:
Parser	bundle/sparkup/sparkup	/^class Parser:$/;"	c	inherits:
Parser	bundle/sparkup/sparkup.py	/^class Parser:$/;"	c	inherits:
Parser	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Parser:$/;"	c	inherits:
Path.AbsolutePathFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PathUtilities	bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^    module PathUtilities$/;"	m	class:CommandT.VIM
PhpDoc	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDoc()$/;"	f
PhpDocClass	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocClass()$/;"	f
PhpDocConst	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocConst()$/;"	f
PhpDocDefault	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocDefault()$/;"	f
PhpDocFunc	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocFunc()$/;"	f
PhpDocFuncEnd	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocFuncEnd()$/;"	f
PhpDocFuncEndAuto	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocFuncEndAuto()$/;"	f
PhpDocRange	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocRange() range$/;"	f
PhpDocScope	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocScope(modifiers, identifier)$/;"	f
PhpDocSingle	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocSingle()$/;"	f
PhpDocType	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocType(typeString)$/;"	f
PhpDocVar	bundle/php-doc-upgrade/plugin/php-doc.vim	/^func! PhpDocVar()$/;"	f
PhpSyntaxCheck	plugin/php_check_syntax.vim	/^function! PhpSyntaxCheck()$/;"	f
Pick	bundle/git.zip/ftplugin/gitrebase.vim	/^command! -buffer -bar Pick   :call s:choose('pick')$/;"	c
PlaceDelimitersAndInsBetween	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
Preview	bundle/rails.vim/autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
PrintHelp	bundle/Tagbar/plugin/tagbar.vim	/^function! s:PrintHelp()$/;"	f
PrintTag	bundle/Tagbar/plugin/tagbar.vim	/^function! s:PrintTag(tag, depth, fileinfo, typeinfo)$/;"	f
ProcessFile	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ProcessFile(fname, ftype)$/;"	f
ProcessFile	bundle/snipmate.vim/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessPseudoChildren	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ProcessPseudoChildren(tags, tag, depth, typeinfo)$/;"	f
ProcessPseudoTag	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ProcessPseudoTag(curtags, tag, curpath, pscope, typeinfo)$/;"	f
ProcessRegion	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:ProcessRegion(region)$/;"	f
ProcessSnippet	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
ProcessVariable	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:ProcessVariable(variable)$/;"	f
Project	bundle/project.tar.gz/plugin/project.vim	/^    command -nargs=? -complete=file Project call <SID>Project('<args>')$/;"	c
Project	bundle/project.tar.gz/plugin/project.vim	/^function! s:Project(filename) " <<<$/;"	f
Project	bundle/rails.vim/autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	bundle/rails.vim/plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Project_ForEach	bundle/project.tar.gz/plugin/project.vim	/^    function! Project_ForEach(recurse, lineno, cmd, data, match)$/;"	f
Project_ForEachR	bundle/project.tar.gz/plugin/project.vim	/^    function! s:Project_ForEachR(recurse, lineno, info, cmd, data, match)$/;"	f
Project_GetAllFnames	bundle/project.tar.gz/plugin/project.vim	/^    function! Project_GetAllFnames(recurse, lineno, separator)$/;"	f
Project_GetFname	bundle/project.tar.gz/plugin/project.vim	/^    function! Project_GetFname(line)$/;"	f
Prompt	bundle/Command-T/ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
Prompt	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:Prompt(message) " {{{$/;"	f
Prompt	bundle/command-t/ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
PromptUser	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:PromptUser(groups) "{{{$/;"	f
QArgSplitter	bundle/Align/autoload/Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	bundle/Align/plugin/cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
QuickRun	bundle/vim-quickrun/plugin/quickrun.vim	/^command! -nargs=* -range=% -complete=customlist,quickrun#complete QuickRun$/;"	c
QuickRun	bundle/vim-quickrun/plugin/quickrun.vim	/^function! QuickRun(mode)  " {{{2$/;"	f
QuitIfOnlyWindow	bundle/Tagbar/plugin/tagbar.vim	/^function! s:QuitIfOnlyWindow()$/;"	f
R	ftplugin/vundle.vim	/^nnoremap <buffer> R :call vundle#scripts#reload()<CR>$/;"	m
RARRAY_LEN	bundle/Command-T/ruby/command-t/ruby_compat.h	43;"	d
RARRAY_LEN	bundle/command-t/ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	bundle/Command-T/ruby/command-t/ruby_compat.h	38;"	d
RARRAY_PTR	bundle/command-t/ruby/command-t/ruby_compat.h	38;"	d
README	bundle/sparkup/Makefile	/^README=README.md$/;"	m
RFLOAT_VALUE	bundle/Command-T/ruby/command-t/ruby_compat.h	48;"	d
RFLOAT_VALUE	bundle/command-t/ruby/command-t/ruby_compat.h	48;"	d
RM	bundle/Align/plugin/cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RSTRING_LEN	bundle/Command-T/ruby/command-t/ruby_compat.h	33;"	d
RSTRING_LEN	bundle/command-t/ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	bundle/Command-T/ruby/command-t/ruby_compat.h	28;"	d
RSTRING_PTR	bundle/command-t/ruby/command-t/ruby_compat.h	28;"	d
RWP	bundle/Align/plugin/cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Rails	bundle/rails.vim/plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	bundle/rails.vim/autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	bundle/rails.vim/autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	bundle/rails.vim/autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	bundle/rails.vim/autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	bundle/rails.vim/autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	bundle/rails.vim/autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	bundle/rails.vim/autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	bundle/rails.vim/autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	bundle/rails.vim/autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	bundle/rails.vim/autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	bundle/rails.vim/autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	bundle/rails.vim/autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
ReadPrevCommitLog	bundle/svn_commit/ftplugin/svn_commit.vim	/^function s:ReadPrevCommitLog()$/;"	f
RecordPrevBuffer_au	bundle/project.tar.gz/plugin/project.vim	/^    function! s:RecordPrevBuffer_au()$/;"	f
RecursivelyConstructDirectives	bundle/project.tar.gz/plugin/project.vim	/^    function! s:RecursivelyConstructDirectives(lineno)$/;"	f
Refresh	bundle/rails.vim/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	bundle/rails.vim/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
RefreshEntriesFromDir	bundle/project.tar.gz/plugin/project.vim	/^    function! s:RefreshEntriesFromDir(recursive)$/;"	f
RegenerateCTAGS	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:RegenerateCTAGS()$/;"	f
Related	bundle/rails.vim/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
ReleaseKeyPresses	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:ReleaseKeyPresses()$/;"	f
ReloadAllSnippets	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ReloadAllSnippets()$/;"	f
ReloadSnippets	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ReloadSnippets(ft)$/;"	f
Remove	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Remove(force)$/;"	f
RemoveDelimiters	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
RenderContent	bundle/Tagbar/plugin/tagbar.vim	/^function! s:RenderContent(fname, ftype)$/;"	f
ReplaceCmd	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
ReplaceDelims	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ResetAllSnippets	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ResetAllSnippets()$/;"	f
ResetPhpOptions	bundle/PHP-correct-Indenting/indent/php.vim	/^function! ResetPhpOptions()$/;"	f
ResetSnippets	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ResetSnippets(ft)$/;"	f
ResizeWindow	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>ResizeWindow()$/;"	f
ResizeWindow	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>ResizeWindow()$/;"	f
RestoreMark	bundle/Align/plugin/cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreScreenState	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreUserMaps	bundle/Align/plugin/cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	bundle/Align/plugin/cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
Reword	bundle/git.zip/ftplugin/gitrebase.vim	/^command! -buffer -bar Reword :call s:choose('reword')$/;"	c
Right	bundle/Tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
Right	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
Router	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Router:$/;"	c	inherits:
Router	bundle/sparkup/sparkup	/^class Router:$/;"	c	inherits:
Router	bundle/sparkup/sparkup.py	/^class Router:$/;"	c	inherits:
Router	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Router:$/;"	c	inherits:
Runner	bundle/command-t/spec/vim_formatter.rb	/^  module Runner$/;"	m	class:Spec
Runner.build_command	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.build_command(tmpl)  " {{{2$/;"	f
Runner.conv_vim2remote	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.conv_vim2remote(selfvim, cmd)  " {{{2$/;"	f
Runner.detect_shebang	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.detect_shebang()  " {{{2$/;"	f
Runner.execute	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.execute(cmd)  " {{{2$/;"	f
Runner.expand	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.expand(str)  " {{{2$/;"	f
Runner.get_region	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.get_region()  " {{{2$/;"	f
Runner.get_source_name	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.get_source_name()  " {{{2$/;"	f
Runner.initialize	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.initialize(argline)  " {{{2$/;"	f
Runner.make_command	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.make_command(args)  " {{{2$/;"	f
Runner.new	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.new(args)  " {{{2$/;"	f
Runner.normalize	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.normalize()  " {{{2$/;"	f
Runner.open_result_window	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.open_result_window()  " {{{2$/;"	f
Runner.output	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.output(result)  " {{{2$/;"	f
Runner.parse_argline	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.parse_argline(argline)  " {{{2$/;"	f
Runner.run	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run()  " {{{2$/;"	f
Runner.run_async	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run_async(commands, ...)  " {{{2$/;"	f
Runner.run_async_python	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run_async_python(commands, ...)  " {{{2$/;"	f
Runner.run_async_remote	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run_async_remote(commands, ...)  " {{{2$/;"	f
Runner.run_async_vimproc	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run_async_vimproc(commands, ...)  " {{{2$/;"	f
Runner.run_simple	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.run_simple(commands)  " {{{2$/;"	f
Runner.set_options_from_arglist	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.set_options_from_arglist(arglist)  " {{{2$/;"	f
Runner.shellescape	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.shellescape(str)  " {{{2$/;"	f
Runner.sweep	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:Runner.sweep()  " {{{2$/;"	f
S	bundle/surround.vim/plugin/surround.vim	/^      vmap  S    <Plug>VSurround$/;"	m
SIBLING	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    SIBLING = 16$/;"	v	class:Token
SIBLING	bundle/sparkup/sparkup	/^    SIBLING = 16$/;"	v	class:Token
SIBLING	bundle/sparkup/sparkup.py	/^    SIBLING = 16$/;"	v	class:Token
SIBLING	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    SIBLING = 16$/;"	v	class:Token
SM	bundle/Align/plugin/cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SPARKUP_PY	bundle/sparkup/Makefile	/^SPARKUP_PY=sparkup$/;"	m
SWP	bundle/Align/plugin/cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	bundle/Align/plugin/cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SaveScreenState	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveUserMaps	bundle/Align/plugin/cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	bundle/Align/plugin/cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
Scanner	bundle/Command-T/ruby/command-t/scanner.rb	/^  class Scanner; end$/;"	c	class:CommandT
Scanner	bundle/command-t/ruby/command-t/scanner.rb	/^  class Scanner$/;"	c	class:CommandT
Screen	bundle/Command-T/ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
Screen	bundle/command-t/ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
SelectCompletion	bundle/SuperTab-continued./plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SelectWord	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Set	bundle/rails.vim/autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	bundle/rails.vim/autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetCTAGSFiles	bundle/ProjectCTags/plugin/projectCTags.vim	/^function s:SetCTAGSFiles( folder, printWarnings )$/;"	f
SetCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetCurrentLine	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! s:SetCurrentLine(message)$/;"	f
SetDefaultCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetLines	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:SetLines(lines, key) " {{{$/;"	f
SetLines	bundle/Tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
SetOptDefault	bundle/rails.vim/plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetPhpFolds	bundle/phpfolding.vim/plugin/phpfolding.vim	/^augroup SetPhpFolds$/;"	a
SetTagDisplay	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^function! s:SetTagDisplay()$/;"	f
SetUpForNewFiletype	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
Settings	bundle/Command-T/ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
Settings	bundle/command-t/ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
SetupAutoCommand	bundle/project.tar.gz/plugin/project.vim	/^    function! s:SetupAutoCommand(cwd)$/;"	f
SetupScriptAutoCommand	bundle/project.tar.gz/plugin/project.vim	/^    function! s:SetupScriptAutoCommand(bufcmd, script)$/;"	f
ShowAvailableSnips	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowBuffers	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>ShowBuffers(delBufNum)$/;"	f
ShowBuffers	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>ShowBuffers(delBufNum)$/;"	f
ShowPrototype	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ShowPrototype()$/;"	f
SkipMatch	bundle/phpfolding.vim/plugin/phpfolding.vim	/^function! SkipMatch() " {{{$/;"	f
Skippmatch	bundle/PHP-correct-Indenting/indent/php.vim	/^function! Skippmatch()	" {{{$/;"	f
Skippmatch2	bundle/PHP-correct-Indenting/indent/php.vim	/^function! Skippmatch2()$/;"	f
SortR	bundle/project.tar.gz/plugin/project.vim	/^    function! s:SortR(start, end)$/;"	f
SortTags	bundle/Tagbar/plugin/tagbar.vim	/^function! s:SortTags(tags, comparemethod)$/;"	f
Sparkup	bundle/sparkup/vim/ftplugin/html/sparkup.vim	/^function! s:Sparkup()$/;"	f
SparkupNext	bundle/sparkup/vim/ftplugin/html/sparkup.vim	/^function! s:SparkupNext()$/;"	f
SparkupTest	bundle/sparkup/sparkup-unittest.py	/^class SparkupTest:$/;"	c	inherits:
Spawn	bundle/project.tar.gz/plugin/project.vim	/^    function! s:Spawn(number)$/;"	f
SpawnAll	bundle/project.tar.gz/plugin/project.vim	/^    function! s:SpawnAll(recurse, number)$/;"	f
Spec	bundle/command-t/spec/vim_formatter.rb	/^module Spec$/;"	m
SplitCDeclarations	bundle/Tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
SplitCommands	bundle/Tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
SplitDelim	bundle/Tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
Squash	bundle/git.zip/ftplugin/gitrebase.vim	/^command! -buffer -bar Squash :call s:choose('squash')$/;"	c
StackWindow	plugin/debugger.py	/^class StackWindow(VimWindow):$/;"	c	inherits:VimWindow
StageDiff	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:StageDiff() abort$/;"	f
StagePatch	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageToggle	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
StartExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>StartExplorer(sticky, delBufNum)$/;"	f
StartExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>StartExplorer(sticky, delBufNum)$/;"	f
Status	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
StopExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>StopExplorer(sticky)$/;"	f
StopExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>StopExplorer(sticky)$/;"	f
Stridx	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    function! Stridx(haysack, needle)$/;"	f
StripLeadingSpaces	bundle/Tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
StripTrailingSpaces	bundle/Tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
Strlen	bundle/Align/autoload/Align.vim	/^fun! s:Strlen(x)$/;"	f
Strlen	bundle/Tabular/autoload/tabular.vim	/^function! s:Strlen(string)$/;"	f
Stub	bundle/Command-T/ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
Stub	bundle/command-t/ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SuperTab	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	bundle/SuperTab-continued./plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	bundle/SuperTab-continued./plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabSetCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
Svndiff	bundle/svndiff.vim/plugin/svndiff.vim	/^function! s:Svndiff(...)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
TMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! TMiniBufExplorer  call <SID>ToggleExplorer()$/;"	c
TMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! TMiniBufExplorer  call <SID>ToggleExplorer()$/;"	c
TabSpace	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
Tabularize	bundle/Tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	bundle/Tabular/plugin/Tabular.vim	/^function! Tabularize(command) range$/;"	f
TagList_IsValid	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	bundle/taglist-plus/plugin/taglist-plus.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TagName	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^function! TagName()$/;"	f
TagbarBalloonExpr	bundle/Tagbar/plugin/tagbar.vim	/^function! TagbarBalloonExpr()$/;"	f
TagbarClose	bundle/Tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call s:CloseWindow()$/;"	c
TagbarGenerateStatusline	bundle/Tagbar/plugin/tagbar.vim	/^function! TagbarGenerateStatusline()$/;"	f
TagbarOpen	bundle/Tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpen          call s:OpenWindow(0)$/;"	c
TagbarOpenAutoClose	bundle/Tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call s:OpenWindow(1)$/;"	c
TagbarToggle	bundle/Tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call s:ToggleWindow()$/;"	c
TheCWord	bundle/rails.vim/autoload/rails.vim	/^function! s:TheCWord()$/;"	f
Tlist	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	bundle/taglist-plus/plugin/taglist-plus.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Scope_String	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Scope_String(tag_line, ftype)$/;"	f
Tlist_Get_Tag_Linenum	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Parse_Tagline(tag_line,ftype)$/;"	f
Tlist_Post_Close_Cleanup	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Extra	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Toggle_Extra(ftype, extra_name)$/;"	f
Tlist_Window_Toggle_Help_Text	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	bundle/taglist-plus/plugin/taglist-plus.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
Tlist_javascript_Ctags_Allowed_Flags	bundle/taglist-plus/plugin/taglist-plus.vim	/^let Tlist_javascript_Ctags_Allowed_Flags = ['-f', '--sort']$/;"	v
Tlist_javascript_Ctags_Cmd	bundle/taglist-plus/plugin/taglist-plus.vim	/^    let Tlist_javascript_Ctags_Cmd = 'jsctags'$/;"	v
ToggleExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^function! <SID>ToggleExplorer()$/;"	f
ToggleExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^function! <SID>ToggleExplorer()$/;"	f
ToggleHelp	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ToggleHelp()$/;"	f
ToggleNERDTree	bundle/NERD_tree-Project/plugin/NERD_tree_project.vim	/^command! -n=? -complete=dir -bar ToggleNERDTree :call s:toggle('<args>')$/;"	c
ToggleSort	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ToggleSort()$/;"	f
ToggleWindow	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ToggleWindow()$/;"	f
Token	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^class Token:$/;"	c	inherits:
Token	bundle/sparkup/sparkup	/^class Token:$/;"	c	inherits:
Token	bundle/sparkup/sparkup.py	/^class Token:$/;"	c	inherits:
Token	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^class Token:$/;"	c	inherits:
TraceWindow	plugin/debugger.py	/^class TraceWindow(VimWindow):$/;"	c	inherits:VimWindow
TreeDirNode.AbsoluteTreeRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	bundle/snipmate.vim/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
TrimRight	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  function s:TrimRight(text)$/;"	f
U	bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> U     :<C-U>call <SID>wrap('U',v:count)<CR>$/;"	m
UMiniBufExplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  command! UMiniBufExplorer  call <SID>AutoUpdate(-1)$/;"	c
UMiniBufExplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  command! UMiniBufExplorer  call <SID>AutoUpdate(-1)$/;"	c
UnEsc	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UntabbedCol	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
Up	plugin/debugger.vim	/^command! -nargs=0 Up python debugger_up()$/;"	c
UpdateChangedSnip	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	bundle/snipmate.vim/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
VERSION	bundle/sparkup/Makefile	/^VERSION=`date '+%Y%m%d'`$/;"	m
VIM	bundle/Command-T/ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/Command-T/ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/Command-T/ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/command-t/ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/command-t/ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/command-t/ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VIM	bundle/command-t/spec/command-t/controller_spec.rb	/^module VIM; end$/;"	m
VIM	bundle/command-t/spec/command-t/finder_spec.rb	/^module VIM; end$/;"	m
VIM	bundle/command-t/spec/command-t/scanner_spec.rb	/^module VIM; end$/;"	m
VarReset	bundle/EasyMotion/plugin/EasyMotion.vim	/^	function! s:VarReset(var, ...) " {{{$/;"	f
VimDirListing	bundle/project.tar.gz/plugin/project.vim	/^    function! s:VimDirListing(filter, padding, separator, filevariable, filecount, dirvariable, dircount)$/;"	f
VimFormatter	bundle/command-t/spec/vim_formatter.rb	/^      class VimFormatter < BaseTextFormatter$/;"	c	class:Spec.Runner.Formatter
VimWindow	plugin/debugger.py	/^class VimWindow:$/;"	c	inherits:
WatchWindow	plugin/debugger.py	/^class WatchWindow(VimWindow):$/;"	c	inherits:VimWindow
WillComplete	bundle/SuperTab-continued./plugin/supertab.vim	/^function! s:WillComplete()$/;"	f
Window	bundle/Command-T/ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
Window	bundle/command-t/ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
WipeAll	bundle/project.tar.gz/plugin/project.vim	/^    function! s:WipeAll(recurse, line)$/;"	f
Worker	bundle/L9/autoload/l9/async.py	/^class Worker(threading.Thread):$/;"	c	inherits:threading.Thread
Write	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
X	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
XDbgBreakPoints	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgBreakPoints call xdebug#BreakPointsBuffer()$/;"	c
XDbgCopyKey	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgCopyKey call setreg('*', '?XDEBUG_SESSION_START=ECLIPSE_DBGP&KEY=12894211795611')$/;"	c
XDbgKill	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgKill  let g:xdebug.debugging = 0 | call g:xdebug.ctx.kill()$/;"	c
XDbgRun	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgRun call xdebug.ctx.send('run')$/;"	c
XDbgRunTillCursor	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgRunTillCursor call g:xdebug.ctx.send('breakpoint_set -f '. xdebug#UriOfFilename(expand('%')).' -t line -n '.getpos('.')[1].' -r 1') | XDbgRun $/;"	c
XDbgSetMaxChildren	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=1 XDbgSetMaxChildren call g:xdebug.ctx.send('feature_set -n max_children -v '. <f-args>)$/;"	c
XDbgSetMaxData	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=1 XDbgSetMaxData    call g:xdebug.ctx.send('feature_set -n max_data -v '. <f-args>)$/;"	c
XDbgSetMaxDepth	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=1 XDbgSetMaxDepth    call g:xdebug.ctx.send('feature_set -n max_depth -v '. <f-args>)$/;"	c
XDbgStackToQF	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgStackToQF call xdebug#StackToQF()$/;"	c
XDbgStart	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgStart let g:xdebug.debugging = 1 | call XDebugMappings() | call xdebug#Start()$/;"	c
XDbgStop	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgStop  call g:xdebug.ctx.send('stop')$/;"	c
XDbgToggleLineBreakpoint	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgToggleLineBreakpoint call xdebug#ToggleLineBreakpoint()$/;"	c
XDbgToggleStopFirstLine	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgToggleStopFirstLine let g:xdebug.stop_first_line = !g:xdebug.stop_first_line | echo "stop_first_line is now ".g:xdebug.stop_first_line$/;"	c
XDbgVarView	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^command! -bar -nargs=0 XDbgVarView call xdebug#VarView()$/;"	c
XDebugMappings	bundle/vim-addon-xdebug/plugin/xdebug.vim	/^  fun! XDebugMappings()$/;"	f
YRClear	bundle/YankRing.vim/plugin/yankring.vim	/^command!                           YRClear        call s:YRClear()$/;"	c
YRClear	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRClear()$/;"	f
YRDeleteRange	bundle/YankRing.vim/plugin/yankring.vim	/^command! -range -bang     -nargs=? YRDeleteRange  <line1>,<line2>call s:YRYankRange(<bang>1, <args>)$/;"	c
YRDisplayElem	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRDisplayElem(disp_nbr, script_var) $/;"	f
YRDoRepeat	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRDoRepeat() $/;"	f
YRErrorMsg	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRErrorMsg(msg)$/;"	f
YRFocusGained	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRFocusGained()$/;"	f
YRGetChar	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRGetChar()$/;"	f
YRGetElem	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=* YRGetElem      call s:YRGetElem(<args>)$/;"	c
YRGetElem	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRGetElem(...) $/;"	f
YRGetMultiple	bundle/YankRing.vim/plugin/yankring.vim	/^command!        -bang     -nargs=? YRGetMultiple  call s:YRGetMultiple(<bang>0, <args>)$/;"	c
YRGetMultiple	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRGetMultiple(reverse_order, ...) $/;"	f
YRGetNextElem	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRGetNextElem(start, iter) $/;"	f
YRGetValElemNbr	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRGetValElemNbr( position, type )$/;"	f
YRHistoryDelete	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRHistoryDelete()$/;"	f
YRHistoryRead	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRHistoryRead()$/;"	f
YRHistorySave	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRHistorySave()$/;"	f
YRHistoryUpgrade	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRHistoryUpgrade(version)$/;"	f
YRInit	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRInit(...)$/;"	f
YRInsertLeave	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRInsertLeave()$/;"	f
YRMRUAdd	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUAdd( mru_list, element, element_type )$/;"	f
YRMRUDel	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUDel( mru_list, elem_nbr )$/;"	f
YRMRUElemFormat	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUElemFormat( element, element_type )$/;"	f
YRMRUGet	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUGet( mru_list, position )$/;"	f
YRMRUHas	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUHas( mru_list, find_str )$/;"	f
YRMRUReset	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUReset( mru_list )$/;"	f
YRMRUSize	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMRUSize( mru_list )$/;"	f
YRMapsCreate	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=0 YRMapsCreate   call s:YRMapsCreate()$/;"	c
YRMapsCreate	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMapsCreate(...)$/;"	f
YRMapsDelete	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=0 YRMapsDelete   call s:YRMapsDelete()$/;"	c
YRMapsDelete	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMapsDelete(...)$/;"	f
YRMapsExpression	bundle/YankRing.vim/plugin/yankring.vim	/^function! YRMapsExpression(sid, motion, ...)$/;"	f
YRMapsMacro	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRMapsMacro(bang, ...) range$/;"	f
YRPaste	bundle/YankRing.vim/plugin/yankring.vim	/^command! -count -register -nargs=* YRPaste        call s:YRPaste(0,1,<args>)$/;"	c
YRPaste	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRPaste(replace_last_paste_selection, nextvalue, direction, ...) $/;"	f
YRPop	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=? YRPop          <line1>,<line2>call s:YRPop(<args>)$/;"	c
YRPop	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRPop(...)$/;"	f
YRPush	bundle/YankRing.vim/plugin/yankring.vim	/^command!        -register -nargs=? YRPush         call s:YRPush(<args>)$/;"	c
YRPush	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRPush(...) $/;"	f
YRRecord	bundle/YankRing.vim/plugin/yankring.vim	/^function! YRRecord(...) $/;"	f
YRRecord3	bundle/YankRing.vim/plugin/yankring.vim	/^function! YRRecord3() $/;"	f
YRRegister	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRRegister()$/;"	f
YRReplace	bundle/YankRing.vim/plugin/yankring.vim	/^command! -count -register -nargs=* YRReplace      call s:YRPaste(1,<args>)$/;"	c
YRReset	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRReset()$/;"	f
YRSearch	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=? YRSearch       call s:YRSearch(<q-args>)$/;"	c
YRSearch	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRSearch(...) $/;"	f
YRSetNumberedReg	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRSetNumberedReg() $/;"	f
YRSetPrevOP	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRSetPrevOP(op_code, count, reg, mode) $/;"	f
YRShow	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=? YRShow         call s:YRShow(<args>)$/;"	c
YRShow	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRShow(...) $/;"	f
YRToggle	bundle/YankRing.vim/plugin/yankring.vim	/^command!                  -nargs=? YRToggle       call s:YRToggle(<args>)$/;"	c
YRToggle	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRToggle(...)$/;"	f
YRWarningMsg	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWarningMsg(msg)$/;"	f
YRWinLeave	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWinLeave()$/;"	f
YRWindowAction	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWindowAction(op, cmd_mode) range$/;"	f
YRWindowActionN	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWindowActionN(op, cmd_mode) $/;"	f
YRWindowOpen	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWindowOpen(results)$/;"	f
YRWindowStatus	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWindowStatus(show_help)$/;"	f
YRWindowUpdate	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRWindowUpdate()$/;"	f
YRYankCount	bundle/YankRing.vim/plugin/yankring.vim	/^command! -count -register -nargs=* YRYankCount    call s:YRYankCount(<args>)$/;"	c
YRYankCount	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRYankCount(...) range$/;"	f
YRYankRange	bundle/YankRing.vim/plugin/yankring.vim	/^command! -range -bang     -nargs=? YRYankRange    <line1>,<line2>call s:YRYankRange(<bang>0, <args>)$/;"	c
YRYankRange	bundle/YankRing.vim/plugin/yankring.vim	/^function! s:YRYankRange(do_delete_selection, ...) range$/;"	f
YankRing	bundle/YankRing.vim/plugin/yankring.vim	/^augroup YankRing$/;"	a
ZoomWindow	bundle/Tagbar/plugin/tagbar.vim	/^function! s:ZoomWindow()$/;"	f
[2	bundle/Gundo/plugin/gundo.vim	/^            nodeline[2 * end] = "+"$/;"	m
[i]	bundle/Gundo/plugin/gundo.vim	/^                    nodeline[i] = "-"$/;"	m
__anon1::abbrev_len	bundle/Command-T/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::abbrev_p	bundle/Command-T/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
__anon1::always_show_dot_files	bundle/Command-T/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::dot_file	bundle/Command-T/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
__anon1::max_score_per_char	bundle/Command-T/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
__anon1::never_show_dot_files	bundle/Command-T/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::str_len	bundle/Command-T/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::str_p	bundle/Command-T/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
__anon2::abbrev_len	bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon2	file:	access:public
__anon2::abbrev_p	bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon2	file:	access:public
__anon2::always_show_dot_files	bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon2	file:	access:public
__anon2::dot_file	bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon2	file:	access:public
__anon2::max_score_per_char	bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon2	file:	access:public
__anon2::never_show_dot_files	bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon2	file:	access:public
__anon2::str_len	bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon2	file:	access:public
__anon2::str_p	bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon2	file:	access:public
__getattr__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __getattr__(self, attr):$/;"	m	class:Options	file:	access:private
__getattr__	bundle/sparkup/sparkup	/^    def __getattr__(self, attr):$/;"	m	class:Options	file:	access:private
__getattr__	bundle/sparkup/sparkup.py	/^    def __getattr__(self, attr):$/;"	m	class:Options	file:	access:private
__getattr__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __getattr__(self, attr):$/;"	m	class:Options	file:	access:private
__init__	bundle/L9/autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Asyncer	access:public
__init__	bundle/L9/autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Worker	access:public
__init__	bundle/L9/autoload/l9/async.py	/^    def __init__(self, command, cwd, input, appends):$/;"	m	class:Executor	access:public
__init__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^                 attributes=None, name=None, text=None):$/;"	m	class:Element	access:public
__init__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __init__(self):$/;"	m	class:Router	access:public
__init__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __init__(self, options=None, str='', dialect=HtmlDialect()):$/;"	m	class:Parser	access:public
__init__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __init__(self, router, argv, options=None):$/;"	m	class:Options	access:public
__init__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __init__(self, str, parser=None):$/;"	m	class:Token	access:public
__init__	bundle/sparkup/sparkup	/^                 attributes=None, name=None, text=None):$/;"	m	class:Element	access:public
__init__	bundle/sparkup/sparkup	/^    def __init__(self):$/;"	m	class:Router	access:public
__init__	bundle/sparkup/sparkup	/^    def __init__(self, options=None, str='', dialect=HtmlDialect()):$/;"	m	class:Parser	access:public
__init__	bundle/sparkup/sparkup	/^    def __init__(self, router, argv, options=None):$/;"	m	class:Options	access:public
__init__	bundle/sparkup/sparkup	/^    def __init__(self, str, parser=None):$/;"	m	class:Token	access:public
__init__	bundle/sparkup/sparkup.py	/^                 attributes=None, name=None, text=None):$/;"	m	class:Element	access:public
__init__	bundle/sparkup/sparkup.py	/^    def __init__(self):$/;"	m	class:Router	access:public
__init__	bundle/sparkup/sparkup.py	/^    def __init__(self, options=None, str='', dialect=HtmlDialect()):$/;"	m	class:Parser	access:public
__init__	bundle/sparkup/sparkup.py	/^    def __init__(self, router, argv, options=None):$/;"	m	class:Options	access:public
__init__	bundle/sparkup/sparkup.py	/^    def __init__(self, str, parser=None):$/;"	m	class:Token	access:public
__init__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^                 attributes=None, name=None, text=None):$/;"	m	class:Element	access:public
__init__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __init__(self):$/;"	m	class:Router	access:public
__init__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __init__(self, options=None, str='', dialect=HtmlDialect()):$/;"	m	class:Parser	access:public
__init__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __init__(self, router, argv, options=None):$/;"	m	class:Options	access:public
__init__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __init__(self, str, parser=None):$/;"	m	class:Token	access:public
__init__	plugin/debugger.py	/^  def __init__(self):$/;"	m	class:BreakPoint	access:public
__init__	plugin/debugger.py	/^  def __init__(self, minibufexpl = 0):$/;"	m	class:DebugUI	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'DEBUG_WINDOW'):$/;"	m	class:VimWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'HELP__WINDOW'):$/;"	m	class:HelpWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'LOG___WINDOW'):$/;"	m	class:LogWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'STACK_WINDOW'):$/;"	m	class:StackWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'TRACE_WINDOW'):$/;"	m	class:TraceWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, name = 'WATCH_WINDOW'):$/;"	m	class:WatchWindow	access:public
__init__	plugin/debugger.py	/^  def __init__(self, port = 9000):$/;"	m	class:DbgProtocol	access:public
__init__	plugin/debugger.py	/^  def __init__(self, port = 9000, max_children = '32', max_data = '1024', max_depth = '1', minibufexpl = '0', debug = 0):$/;"	m	class:Debugger	access:public
__str__	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def __str__(self):$/;"	m	class:Token	file:	access:private
__str__	bundle/sparkup/sparkup	/^    def __str__(self):$/;"	m	class:Token	file:	access:private
__str__	bundle/sparkup/sparkup.py	/^    def __str__(self):$/;"	m	class:Token	file:	access:private
__str__	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def __str__(self):$/;"	m	class:Token	file:	access:private
_fill_attributes	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _fill_attributes(self):$/;"	m	class:Element	access:public
_fill_attributes	bundle/sparkup/sparkup	/^    def _fill_attributes(self):$/;"	m	class:Element	access:public
_fill_attributes	bundle/sparkup/sparkup.py	/^    def _fill_attributes(self):$/;"	m	class:Element	access:public
_fill_attributes	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _fill_attributes(self):$/;"	m	class:Element	access:public
_index,	bundle/Gundo/plugin/gundo.vim	/^        node_index, p_node_index, n_columns, n_columns_diff, p_diff, fix_tail):$/;"	m
_init_element	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _init_element(self):$/;"	m	class:Token	access:public
_init_element	bundle/sparkup/sparkup	/^    def _init_element(self):$/;"	m	class:Token	access:public
_init_element	bundle/sparkup/sparkup.py	/^    def _init_element(self):$/;"	m	class:Token	access:public
_init_element	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _init_element(self):$/;"	m	class:Token	access:public
_last	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    _last = None$/;"	v	class:Parser
_last	bundle/sparkup/sparkup	/^    _last = None$/;"	v	class:Parser
_last	bundle/sparkup/sparkup.py	/^    _last = None$/;"	v	class:Parser
_last	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    _last = None$/;"	v	class:Parser
_parse	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _parse(self):$/;"	m	class:Parser	access:public
_parse	bundle/sparkup/sparkup	/^    def _parse(self):$/;"	m	class:Parser	access:public
_parse	bundle/sparkup/sparkup.py	/^    def _parse(self):$/;"	m	class:Parser	access:public
_parse	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _parse(self):$/;"	m	class:Parser	access:public
_populate	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _populate(self):$/;"	m	class:Element	access:public
_populate	bundle/sparkup/sparkup	/^    def _populate(self):$/;"	m	class:Element	access:public
_populate	bundle/sparkup/sparkup.py	/^    def _populate(self):$/;"	m	class:Element	access:public
_populate	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _populate(self):$/;"	m	class:Element	access:public
_textmatify	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _textmatify(self, output):$/;"	m	class:Parser	access:public
_textmatify	bundle/sparkup/sparkup	/^    def _textmatify(self, output):$/;"	m	class:Parser	access:public
_textmatify	bundle/sparkup/sparkup.py	/^    def _textmatify(self, output):$/;"	m	class:Parser	access:public
_textmatify	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _textmatify(self, output):$/;"	m	class:Parser	access:public
_tokenize	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def _tokenize(self):$/;"	m	class:Parser	access:public
_tokenize	bundle/sparkup/sparkup	/^    def _tokenize(self):$/;"	m	class:Parser	access:public
_tokenize	bundle/sparkup/sparkup.py	/^    def _tokenize(self):$/;"	m	class:Parser	access:public
_tokenize	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def _tokenize(self):$/;"	m	class:Parser	access:public
_xml_stringfy	plugin/debugger.py	/^  def _xml_stringfy(self, node, level = 0, encoding = None):$/;"	m	class:VimWindow	access:public
abbrev_len	bundle/Command-T/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
abbrev_len	bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon2	file:	access:public
abbrev_p	bundle/Command-T/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
abbrev_p	bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon2	file:	access:public
abbrev_segments	bundle/Command-T/ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abbrev_segments	bundle/command-t/ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abolish_l	bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	bundle/rails.vim/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
accept	plugin/debugger.py	/^  def accept(self):$/;"	m	class:DbgProtocol	access:public
accept_selection	bundle/Command-T/ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
accept_selection	bundle/command-t/ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
activateFufBuffer	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:activateFufBuffer()$/;"	f
activateNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add	plugin/debugger.py	/^  def add(self, file, line, exp = ''):$/;"	m	class:BreakPoint	access:public
add!	bundle/Command-T/ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	bundle/Command-T/ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add!	bundle/command-t/ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	bundle/command-t/ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_methods	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_methods	bundle/rails.vim/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_paths_for_directory	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.FileScanner
add_paths_for_directory	bundle/command-t/ruby/command-t/scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.Scanner
addfilecmds	bundle/rails.vim/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	bundle/rails.vim/autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	bundle/rails.vim/autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
allsteps	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! s:allsteps()$/;"	f
always_show_dot_files	bundle/Command-T/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
always_show_dot_files	bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon2	file:	access:public
app_background_script_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	bundle/rails.vim/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	bundle/rails.vim/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	bundle/rails.vim/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	bundle/rails.vim/autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	bundle/rails.vim/autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	bundle/rails.vim/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	bundle/rails.vim/autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	bundle/rails.vim/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	bundle/rails.vim/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	bundle/rails.vim/autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	bundle/rails.vim/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	bundle/rails.vim/autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	bundle/rails.vim/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	bundle/rails.vim/autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	bundle/rails.vim/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	bundle/rails.vim/autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	bundle/rails.vim/autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	bundle/rails.vim/autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	bundle/rails.vim/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	bundle/rails.vim/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	bundle/rails.vim/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
append	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def append(self, object):$/;"	m	class:Element	access:public
append	bundle/sparkup/sparkup	/^    def append(self, object):$/;"	m	class:Element	access:public
append	bundle/sparkup/sparkup.py	/^    def append(self, object):$/;"	m	class:Element	access:public
append	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def append(self, object):$/;"	m	class:Element	access:public
attributes	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    attributes = None$/;"	v	class:Element
attributes	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    attributes = None$/;"	v	class:Token
attributes	bundle/sparkup/sparkup	/^    attributes = None$/;"	v	class:Element
attributes	bundle/sparkup/sparkup	/^    attributes = None$/;"	v	class:Token
attributes	bundle/sparkup/sparkup.py	/^    attributes = None$/;"	v	class:Element
attributes	bundle/sparkup/sparkup.py	/^    attributes = None$/;"	v	class:Token
attributes	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    attributes = None$/;"	v	class:Element
attributes	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    attributes = None$/;"	v	class:Token
autocamelize	bundle/rails.vim/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	bundle/rails.vim/plugin/rails.vim	/^function! s:autoload(...)$/;"	f
b:InPHPcode	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:InPHPcode = 0$/;"	v
b:InPHPcode_and_script	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:InPHPcode_and_script = 0$/;"	v
b:InPHPcode_checked	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:InPHPcode_checked = 0$/;"	v
b:InPHPcode_tofind	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:InPHPcode_tofind = ""$/;"	v
b:PHP_BracesAtCodeLevel	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_BracesAtCodeLevel = 0$/;"	v
b:PHP_BracesAtCodeLevel	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_BracesAtCodeLevel = PHP_BracesAtCodeLevel$/;"	v
b:PHP_CurrentIndentLevel	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_CurrentIndentLevel = b:PHP_default_indenting$/;"	v
b:PHP_InsideMultilineComment	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_InsideMultilineComment = 0$/;"	v
b:PHP_LastIndentedWasComment	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_LastIndentedWasComment = 0$/;"	v
b:PHP_autoformatcomment	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_autoformatcomment = 1$/;"	v
b:PHP_autoformatcomment	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_autoformatcomment = PHP_autoformatcomment$/;"	v
b:PHP_default_indenting	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_default_indenting = 0$/;"	v
b:PHP_default_indenting	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_default_indenting = PHP_default_indenting * &sw$/;"	v
b:PHP_indentbeforelast	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_indentbeforelast = 0$/;"	v
b:PHP_indentinghuge	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_indentinghuge = 0$/;"	v
b:PHP_lastindented	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_lastindented = 0$/;"	v
b:PHP_oldchangetick	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:PHP_oldchangetick = b:changedtick$/;"	v
b:PHP_outdentphpescape	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_outdentphpescape = 1$/;"	v
b:PHP_outdentphpescape	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_outdentphpescape = PHP_outdentphpescape$/;"	v
b:PHP_vintage_case_default_indent	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_vintage_case_default_indent = 0$/;"	v
b:PHP_vintage_case_default_indent	bundle/PHP-correct-Indenting/indent/php.vim	/^    let b:PHP_vintage_case_default_indent = 1$/;"	v
b:UserIsTypingComment	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:UserIsTypingComment = 0$/;"	v
b:cucumber_root	bundle/cucumber.zip/ftplugin/cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:current_syntax	bundle/Markdown/syntax/markdown.vim	/^let b:current_syntax = "markdown"$/;"	v
b:current_syntax	bundle/Tagbar/syntax/tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:current_syntax	bundle/cucumber.zip/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	bundle/git.zip/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	bundle/git.zip/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	bundle/git.zip/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	bundle/git.zip/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	bundle/git.zip/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	bundle/jQuery/syntax/jquery.vim	/^let b:current_syntax = 'jquery'$/;"	v
b:current_syntax	bundle/php.vim--Garvin/syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
b:did_ftplugin	bundle/PHPcollection/plugin/php.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	bundle/cucumber.zip/ftplugin/cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	bundle/git.zip/ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	bundle/git.zip/ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	bundle/git.zip/ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	bundle/git.zip/ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	bundle/cucumber.zip/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	bundle/git.zip/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_phpgetset_ftplugin	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let b:did_phpgetset_ftplugin = 1$/;"	v
b:escape_spaces	bundle/project.tar.gz/plugin/project.vim	/^                let b:escape_spaces=1$/;"	v
b:git_dir	bundle/git.zip/ftplugin/git.vim	/^        let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	bundle/git.zip/ftplugin/git.vim	/^        let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	bundle/git.zip/ftplugin/git.vim	/^        let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	bundle/git.zip/ftplugin/gitcommit.vim	/^    let b:git_dir = expand("%:p:h")$/;"	v
b:match_words	bundle/PHPcollection/plugin/php.vim	/^let b:match_words = '\\<switch\\>:\\<endswitch\\>,' .$/;"	v
b:optionsset	bundle/PHP-correct-Indenting/indent/php.vim	/^let b:optionsset = 0$/;"	v
b:undo_ftplugin	bundle/cucumber.zip/ftplugin/cucumber.vim	/^  let b:undo_ftplugin .= "| sil! iunmap! <C-]>| sil! iunmap! <C-W>]| sil! iunmap! <C-W><C-]>| sil! iunmap! <C-W>}"$/;"	v
b:undo_ftplugin	bundle/cucumber.zip/ftplugin/cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitcommit.vim	/^      let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitcommit.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . "|setl tw<"$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitrebase.vim	/^    let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|nunmap <buffer> K"$/;"	v
b:undo_ftplugin	bundle/git.zip/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo<"$/;"	v
backspace	bundle/Command-T/ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace	bundle/command-t/ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	bundle/Command-T/ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	bundle/Command-T/ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
backspace!	bundle/command-t/ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	bundle/command-t/ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
beep	bundle/surround.vim/plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmark	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:bookmark(word)$/;"	f
bookmarkHere	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:bookmarkHere(word)$/;"	f
bookmarkNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bsub	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
bufInWindows	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer_app	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_commit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_getline	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getline	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_getvar	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_name	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_path	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_repo	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_setvar	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_setvar	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_sha1	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_type	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buffer_type_name	bundle/rails.vim/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
bufname	bundle/project.tar.gz/plugin/project.vim	/^        let bufname=escape(substitute(expand('%:p', 0), '\\\\', '\/', 'g'), ' ')$/;"	v
build_quietly	bundle/command-t/multi-spec.sh	/^function build_quietly()$/;"	f
bundle.path	autoload/vundle/config.vim	/^func! s:bundle.path()$/;"	f
bundle.rtpath	autoload/vundle/config.vim	/^func! s:bundle.rtpath()$/;"	f
c	ftplugin/vundle.vim	/^nnoremap <buffer> c :BundleClean<CR>$/;"	m
cCommandTMatch	bundle/Command-T/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatch	bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	bundle/Command-T/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cCommandTMatcher	bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
c_d	bundle/project.tar.gz/plugin/project.vim	/^                let c_d=s:GetCd(info, '')$/;"	v
cache_clear	bundle/rails.vim/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	bundle/rails.vim/autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	bundle/rails.vim/autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	bundle/rails.vim/autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	bundle/rails.vim/autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
cancel	bundle/Command-T/ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
cancel	bundle/command-t/ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
caret	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    caret = None$/;"	v	class:Parser
caret	bundle/sparkup/sparkup	/^    caret = None$/;"	v	class:Parser
caret	bundle/sparkup/sparkup.py	/^    caret = None$/;"	v	class:Parser
caret	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    caret = None$/;"	v	class:Parser
cases	bundle/sparkup/sparkup-unittest.py	/^    cases = {$/;"	v	class:SparkupTest
centerView	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
cfiles	bundle/command-t/Makefile	/^cfiles      := $(shell find ruby -name '*.c')$/;"	m
chCwd	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changeCoverage	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:changeCoverage(name)$/;"	f
changesurround	bundle/surround.vim/plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
cheaders	bundle/command-t/Makefile	/^cheaders    := $(shell find ruby -name '*.h')$/;"	m
checkDataFileCompatibility	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:checkDataFileCompatibility()$/;"	f
checkForActivate	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
checkKey	bundle/L9/autoload/l9/async.vim	/^function s:checkKey(key)$/;"	f
children	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    children = None$/;"	v	class:Element
children	bundle/sparkup/sparkup	/^    children = None$/;"	v	class:Element
children	bundle/sparkup/sparkup.py	/^    children = None$/;"	v	class:Element
children	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    children = None$/;"	v	class:Element
choose	bundle/git.zip/ftplugin/gitrebase.vim	/^function! s:choose(word)$/;"	f
classes	bundle/php.vim--Garvin/php_vimgen.php	/^		$classes = $extension->getClasses();$/;"	v
clean	plugin/debugger.py	/^  def clean(self):$/;"	m	class:VimWindow	access:public
clear	bundle/Command-T/ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	bundle/Command-T/ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear	bundle/command-t/ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	bundle/command-t/ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear	plugin/debugger.py	/^  def clear(self):$/;"	m	class:BreakPoint	access:public
clear	plugin/debugger.py	/^  def clear(self):$/;"	m	class:Debugger	access:public
clear!	bundle/Command-T/ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clear!	bundle/command-t/ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
clear_outputs	bundle/L9/autoload/l9/async.py	/^    def clear_outputs(self):$/;"	m	class:Worker	access:public
close	bundle/Command-T/ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
close	bundle/command-t/ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
close	plugin/debugger.py	/^  def close(self):$/;"	m	class:DbgProtocol	access:public
closeChildren	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	bundle/surround.vim/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
closing_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    closing_tag = None$/;"	v	class:Element
closing_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    closing_tag = None$/;"	v	class:Token
closing_tag	bundle/sparkup/sparkup	/^    closing_tag = None$/;"	v	class:Element
closing_tag	bundle/sparkup/sparkup	/^    closing_tag = None$/;"	v	class:Token
closing_tag	bundle/sparkup/sparkup.py	/^    closing_tag = None$/;"	v	class:Element
closing_tag	bundle/sparkup/sparkup.py	/^    closing_tag = None$/;"	v	class:Token
closing_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    closing_tag = None$/;"	v	class:Element
closing_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    closing_tag = None$/;"	v	class:Token
cmdline_keys	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    cmdline_keys = [$/;"	v	class:Options
cmdline_keys	bundle/sparkup/sparkup	/^    cmdline_keys = [$/;"	v	class:Options
cmdline_keys	bundle/sparkup/sparkup.py	/^    cmdline_keys = [$/;"	v	class:Options
cmdline_keys	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    cmdline_keys = [$/;"	v	class:Options
color	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>color(r, g, b)$/;"	f
command	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
command	bundle/project.tar.gz/plugin/project.vim	/^                let command=substitute(command, '%F', escape(fnames, '\\'), 'g')$/;"	v
command	bundle/project.tar.gz/plugin/project.vim	/^                let command=substitute(command, '%d', escape(c_d, '\\'), 'g')$/;"	v
command	bundle/project.tar.gz/plugin/project.vim	/^                let command=substitute(command, '%h', escape(home, '\\'), 'g')$/;"	v
command	bundle/project.tar.gz/plugin/project.vim	/^                let command=substitute(command, '%s', escape(fnames, '\\'), 'g')$/;"	v
command	bundle/project.tar.gz/plugin/project.vim	/^                let command=substitute(g:proj_run_fold{a:number}, '%f', substitute(escape(fnames, '\\'), '\\\\ ', ' ', 'g'), 'g')$/;"	v
command	plugin/debugger.py	/^  def command(self, cmd):$/;"	m	class:VimWindow	access:public
command	plugin/debugger.py	/^  def command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger	access:public
commentEnablers	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^augroup commentEnablers$/;"	a
comp_alpha	bundle/Command-T/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_alpha	bundle/command-t/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_score	bundle/Command-T/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_score	bundle/command-t/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
compact	bundle/rails.vim/autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compareTimeDescending	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:compareTimeDescending(i1, i2)$/;"	f
compatibility_check	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:compatibility_check()$/;"	f
completeBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	bundle/rails.vim/autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
controller	bundle/rails.vim/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	bundle/rails.vim/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
copy_outputs	bundle/L9/autoload/l9/async.py	/^    def copy_outputs(self):$/;"	m	class:Worker	access:public
cr	bundle/SuperTab-continued./plugin/supertab.vim	/^      let cr = (map =~? '\\(^\\|[^)]\\)<cr>')$/;"	v
create	plugin/debugger.py	/^  def create(self):$/;"	m	class:DebugUI	access:public
create	plugin/debugger.py	/^  def create(self, method = 'new'):$/;"	m	class:VimWindow	access:public
createChangeCoverageListener	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:createChangeCoverageListener()$/;"	f
createDataBufferListener	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:createDataBufferListener(dataFile)$/;"	f
createEditDataListener	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:createEditDataListener()$/;"	f
createTreeWin	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	bundle/surround.vim/plugin/surround.vim	/^  nmap      cs   <Plug>Csurround$/;"	m
ctrl_n	bundle/SuperTab-continued./plugin/supertab.vim	/^    let ctrl_n = substitute(ctrl_n, '<', '<lt>', 'g')$/;"	v
ctrl_n	bundle/SuperTab-continued./plugin/supertab.vim	/^  let ctrl_n = maparg('<c-n>', 'i')$/;"	v
ctrl_p	bundle/SuperTab-continued./plugin/supertab.vim	/^    let ctrl_p = substitute(ctrl_p, '<', '<lt>', 'g')$/;"	v
ctrl_p	bundle/SuperTab-continued./plugin/supertab.vim	/^  let ctrl_p = maparg('<c-p>', 'i')$/;"	v
ctx	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^  let ctx.receive = function("xdebug#Receive")$/;"	v
ctx.send	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^  fun ctx.send(cmd, ...)$/;"	f
ctx.sendCmd	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^  fun ctx.sendCmd(s)$/;"	f
ctx.started	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^  fun ctx.started()$/;"	f
ctx.terminated	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^  fun ctx.terminated()$/;"	f
current_compiler	bundle/PHPcollection/compiler/cphp.vim	/^let current_compiler = "php"$/;"	v
cursor_end	bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_end	bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_left	bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_right	bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	bundle/Command-T/ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	bundle/Command-T/ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
cursor_start	bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
cycle	bundle/git.zip/ftplugin/gitrebase.vim	/^function! s:cycle()$/;"	f
deactivateFufBuffer	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:deactivateFufBuffer()$/;"	f
debug	bundle/rails.vim/autoload/rails.vim	/^function! s:debug(str)$/;"	f
debug_mode	plugin/debugger.py	/^  def debug_mode(self):$/;"	m	class:DebugUI	access:public
debugger_command	plugin/debugger.py	/^def debugger_command(msg, arg1 = '', arg2 = ''):$/;"	f	access:public
debugger_context	plugin/debugger.py	/^def debugger_context():$/;"	f	access:public
debugger_down	plugin/debugger.py	/^def debugger_down():$/;"	f	access:public
debugger_init	plugin/debugger.py	/^def debugger_init(debug = 0):$/;"	f	access:public
debugger_mark	plugin/debugger.py	/^def debugger_mark(exp = ''):$/;"	f	access:public
debugger_property	plugin/debugger.py	/^def debugger_property(name = ''):$/;"	f	access:public
debugger_quit	plugin/debugger.py	/^def debugger_quit():$/;"	f	access:public
debugger_resize	plugin/debugger.py	/^def debugger_resize():$/;"	f	access:public
debugger_run	plugin/debugger.py	/^def debugger_run():$/;"	f	access:public
debugger_up	plugin/debugger.py	/^def debugger_up():$/;"	f	access:public
debugger_watch_input	plugin/debugger.py	/^def debugger_watch_input(cmd, arg = ''):$/;"	f	access:public
default_open_command	bundle/Command-T/ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
default_open_command	bundle/command-t/ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
define_commands	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:define_commands()$/;"	f
define_default_key_mappings	bundle/vim-quickrun/plugin/quicklaunch.vim	/^function! s:define_default_key_mappings()$/;"	f
define_interface_key_mappings	bundle/vim-quickrun/plugin/quicklaunch.vim	/^function! s:define_interface_key_mappings()$/;"	f
delete	bundle/Command-T/ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete	bundle/command-t/ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	bundle/Command-T/ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
delete!	bundle/command-t/ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
depends	bundle/command-t/Makefile	/^depends     := $(shell find ruby -name depend)$/;"	m
depth	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    depth = -1$/;"	v	class:Element
depth	bundle/sparkup/sparkup	/^    depth = -1$/;"	v	class:Element
depth	bundle/sparkup/sparkup.py	/^    depth = -1$/;"	v	class:Element
depth	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    depth = -1$/;"	v	class:Element
destroy	plugin/debugger.py	/^  def destroy(self):$/;"	m	class:DebugUI	access:public
destroy	plugin/debugger.py	/^  def destroy(self):$/;"	m	class:VimWindow	access:public
dialect	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    dialect = None$/;"	v	class:Parser
dialect	bundle/sparkup/sparkup	/^    dialect = None$/;"	v	class:Parser
dialect	bundle/sparkup/sparkup.py	/^    dialect = None$/;"	v	class:Parser
dialect	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    dialect = None$/;"	v	class:Parser
did_lisp_syntax_inits	bundle/jQuery/syntax/jquery.vim	/^    let did_lisp_syntax_inits = 1$/;"	v
diffcomplete	bundle/git.zip/ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
difflib	bundle/Gundo/plugin/gundo.vim	/^import difflib$/;"	m
display	autoload/vundle/scripts.vim	/^func! s:display(headers, results)$/;"	f
displayHelp	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dispose	bundle/Command-T/ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
dispose	bundle/command-t/ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
djump	bundle/rails.vim/autoload/rails.vim	/^function! s:djump(def)$/;"	f
dosurround	bundle/surround.vim/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_file	bundle/Command-T/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
dot_file	bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon2	file:	access:public
down	plugin/debugger.py	/^  def down(self):$/;"	m	class:Debugger	access:public
ds	bundle/surround.vim/plugin/surround.vim	/^  nmap      ds   <Plug>Dsurround$/;"	m
dump	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^function! s:dump(node, indent, reslist)$/;"	f
dumpHelp	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dump_failure	bundle/command-t/spec/vim_formatter.rb	/^        def dump_failure counter, failure$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_pending	bundle/command-t/spec/vim_formatter.rb	/^        def dump_pending; end$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_summary	bundle/command-t/spec/vim_formatter.rb	/^        def dump_summary duration, example_count, failure_count, pending_count$/;"	f	class:Spec.Runner.Formatter.VimFormatter
echo	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit	bundle/rails.vim/autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	bundle/rails.vim/autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
encodeURIComponent	bundle/gist-vim/plugin/gist.vim	/^function! s:encodeURIComponent(instr)$/;"	f
endof	bundle/rails.vim/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
ensure_appropriate_window_selection	bundle/Command-T/ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
ensure_appropriate_window_selection	bundle/command-t/ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
enumHelpTags	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:enumHelpTags(tagFiles)$/;"	f
enumItems	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:enumItems(dir)$/;"	f
enumItems	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:enumItems()$/;"	f
enumItems	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:enumItems(dir)$/;"	f
enumItems	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:enumItems(dir)$/;"	f
enumNonCurrentItems	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:enumNonCurrentItems(dir, bufNrPrev, cache)$/;"	f
enumTaggedFiles	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:enumTaggedFiles(tagFiles)$/;"	f
enumTags	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:enumTags(tagFiles)$/;"	f
environment	bundle/rails.vim/autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	bundle/rails.vim/autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	bundle/rails.vim/autoload/rails.vim	/^function! s:error(str)$/;"	f
error	bundle/rails.vim/plugin/rails.vim	/^function! s:error(str)$/;"	f
errors	bundle/php.vim--Garvin/php_vimgen.php	/^$errors = array();$/;"	v
escape_for_single_quotes	bundle/Command-T/ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escape_for_single_quotes	bundle/command-t/ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escarg	bundle/rails.vim/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	bundle/rails.vim/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	bundle/rails.vim/plugin/rails.vim	/^function! s:escvar(r)$/;"	f
evaluateLearningRank	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:evaluateLearningRank(word, stats)$/;"	f
exec	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
execute	bundle/L9/autoload/l9/async.py	/^    def execute(self, var_key, var_command, var_cwd, var_input, var_appends):$/;"	m	class:Asyncer	access:public
execute	bundle/L9/autoload/l9/async.py	/^    def execute(self, worker):$/;"	m	class:Executor	access:public
exists?	bundle/Command-T/ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
exists?	bundle/command-t/ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
exit	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def exit(self):$/;"	m	class:Router	access:public
exit	bundle/sparkup/sparkup	/^    def exit(self):$/;"	m	class:Router	access:public
exit	bundle/sparkup/sparkup.py	/^    def exit(self):$/;"	m	class:Router	access:public
exit	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def exit(self):$/;"	m	class:Router	access:public
expand	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    expand = False$/;"	v	class:Element
expand	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    expand = False$/;"	v	class:Token
expand	bundle/sparkup/sparkup	/^    expand = False$/;"	v	class:Element
expand	bundle/sparkup/sparkup	/^    expand = False$/;"	v	class:Token
expand	bundle/sparkup/sparkup.py	/^    expand = False$/;"	v	class:Element
expand	bundle/sparkup/sparkup.py	/^    expand = False$/;"	v	class:Token
expand	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    expand = False$/;"	v	class:Element
expand	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    expand = False$/;"	v	class:Token
expandAbbrevMap	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:expandAbbrevMap(pattern, abbrevMap)$/;"	f
expandSearchDir	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:expandSearchDir(dir, level)$/;"	f
ext_classes	bundle/php.vim--Garvin/php_vimgen.php	/^		$ext_classes = array();$/;"	v
ext_constants	bundle/php.vim--Garvin/php_vimgen.php	/^			$ext_constants = array_merge($ext_constants, array_keys($class->getConstants()));$/;"	v
ext_constants	bundle/php.vim--Garvin/php_vimgen.php	/^		$ext_constants = array_keys($extension->getConstants());$/;"	v
ext_constants	bundle/php.vim--Garvin/php_vimgen.php	/^		$ext_constants = array_unique($ext_constants);$/;"	v
ext_functions	bundle/php.vim--Garvin/php_vimgen.php	/^		$ext_functions = array_keys($extension->getFunctions());$/;"	v
ext_info	bundle/php.vim--Garvin/php_vimgen.php	/^		$ext_info = array();$/;"	v
extension	bundle/php.vim--Garvin/php_vimgen.php	/^		$extension  = new ReflectionExtension($ext);  $/;"	v
extensions	bundle/php.vim--Garvin/php_vimgen.php	/^$extensions = array($/;"	v
extractafter	bundle/surround.vim/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	bundle/surround.vim/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	bundle/rails.vim/autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
fetch_scripts	autoload/vundle/scripts.vim	/^func! s:fetch_scripts(to)$/;"	f
file_getline	bundle/rails.vim/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	bundle/rails.vim/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	bundle/rails.vim/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	bundle/rails.vim/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
find	bundle/Command-T/ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
find	bundle/command-t/ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
find	plugin/debugger.py	/^  def find(self, file, line):$/;"	m	class:BreakPoint	access:public
findAndRevealPath	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
findItem	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:findItem(items, word)$/;"	f
findItem	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:findItem(items, word)$/;"	f
findItem	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:findItem(items, word)$/;"	f
findProject	bundle/NERD_tree-Project/plugin/NERD_tree_project.vim	/^function! s:findProject()$/;"	f
findamethod	bundle/rails.vim/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	bundle/rails.vim/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	bundle/rails.vim/autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	bundle/rails.vim/autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	bundle/rails.vim/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	bundle/rails.vim/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	bundle/rails.vim/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	bundle/rails.vim/autoload/rails.vim	/^function! s:findview(name)$/;"	f
firstUsableWindow	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	bundle/surround.vim/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	bundle/rails.vim/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
fixup_childs	plugin/debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:VimWindow	access:public
fixup_childs	plugin/debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:WatchWindow	access:public
fixup_single	plugin/debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:VimWindow	access:public
fixup_single	plugin/debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:WatchWindow	access:public
flush	bundle/Command-T/ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	bundle/Command-T/ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def flush$/;"	f	class:CommandT.FileScanner
flush	bundle/Command-T/ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
flush	bundle/command-t/ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	bundle/command-t/ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	bundle/command-t/ruby/command-t/scanner.rb	/^    def flush$/;"	f	class:CommandT.Scanner
flush	bundle/command-t/ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
fnameescape	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
fnames	bundle/project.tar.gz/plugin/project.vim	/^                let fnames=Project_GetAllFnames(a:recurse, line('.'), ' ')$/;"	v
focus	bundle/Command-T/ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	bundle/Command-T/ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
focus	bundle/command-t/ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	bundle/command-t/ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
format	bundle/rails.vim/autoload/rails.vim	/^function! s:format(...)$/;"	f
formatItemUsingCache	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:formatItemUsingCache(item)$/;"	f
fuf#addMode	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#addMode(modeName)$/;"	f
fuf#bookmarkdir#createHandler	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#createHandler(base)$/;"	f
fuf#bookmarkdir#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getEditableDataNames()$/;"	f
fuf#bookmarkdir#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getSwitchOrder()$/;"	f
fuf#bookmarkdir#onInit	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#onInit()$/;"	f
fuf#bookmarkdir#renewCache	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#renewCache()$/;"	f
fuf#bookmarkdir#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#requiresOnCommandPre()$/;"	f
fuf#bookmarkfile#createHandler	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#createHandler(base)$/;"	f
fuf#bookmarkfile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getEditableDataNames()$/;"	f
fuf#bookmarkfile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getSwitchOrder()$/;"	f
fuf#bookmarkfile#onInit	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#onInit()$/;"	f
fuf#bookmarkfile#renewCache	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#renewCache()$/;"	f
fuf#bookmarkfile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#requiresOnCommandPre()$/;"	f
fuf#buffer#createHandler	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#createHandler(base)$/;"	f
fuf#buffer#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#getEditableDataNames()$/;"	f
fuf#buffer#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#getSwitchOrder()$/;"	f
fuf#buffer#onInit	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#onInit()$/;"	f
fuf#buffer#renewCache	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#renewCache()$/;"	f
fuf#buffer#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function fuf#buffer#requiresOnCommandPre()$/;"	f
fuf#buffertag#createHandler	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#createHandler(base)$/;"	f
fuf#buffertag#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#getEditableDataNames()$/;"	f
fuf#buffertag#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#getSwitchOrder()$/;"	f
fuf#buffertag#onInit	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#onInit()$/;"	f
fuf#buffertag#renewCache	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#renewCache()$/;"	f
fuf#buffertag#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function fuf#buffertag#requiresOnCommandPre()$/;"	f
fuf#callbackfile#createHandler	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#createHandler(base)$/;"	f
fuf#callbackfile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getEditableDataNames()$/;"	f
fuf#callbackfile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getSwitchOrder()$/;"	f
fuf#callbackfile#launch	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#launch(initialPattern, partialMatching, prompt, exclude, listener)$/;"	f
fuf#callbackfile#onInit	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#onInit()$/;"	f
fuf#callbackfile#renewCache	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#renewCache()$/;"	f
fuf#callbackfile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#requiresOnCommandPre()$/;"	f
fuf#callbackitem#createHandler	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#createHandler(base)$/;"	f
fuf#callbackitem#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getEditableDataNames()$/;"	f
fuf#callbackitem#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getSwitchOrder()$/;"	f
fuf#callbackitem#launch	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#launch(initialPattern, partialMatching, prompt, listener, items, forPath)$/;"	f
fuf#callbackitem#onInit	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#onInit()$/;"	f
fuf#callbackitem#renewCache	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#renewCache()$/;"	f
fuf#callbackitem#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#requiresOnCommandPre()$/;"	f
fuf#changelist#createHandler	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#createHandler(base)$/;"	f
fuf#changelist#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#getEditableDataNames()$/;"	f
fuf#changelist#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#getSwitchOrder()$/;"	f
fuf#changelist#onInit	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#onInit()$/;"	f
fuf#changelist#renewCache	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#renewCache()$/;"	f
fuf#changelist#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function fuf#changelist#requiresOnCommandPre()$/;"	f
fuf#compareRanks	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#compareRanks(i1, i2)$/;"	f
fuf#countModifiedFiles	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#countModifiedFiles(files, time)$/;"	f
fuf#coveragefile#createHandler	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#createHandler(base)$/;"	f
fuf#coveragefile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getEditableDataNames()$/;"	f
fuf#coveragefile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getSwitchOrder()$/;"	f
fuf#coveragefile#onInit	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#onInit()$/;"	f
fuf#coveragefile#renewCache	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#renewCache()$/;"	f
fuf#coveragefile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#requiresOnCommandPre()$/;"	f
fuf#defineKeyMappingInHandler	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#defineKeyMappingInHandler(key, func)$/;"	f
fuf#defineLaunchCommand	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#defineLaunchCommand(CmdName, modeName, prefixInitialPattern, tempVars)$/;"	f
fuf#dir#createHandler	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#createHandler(base)$/;"	f
fuf#dir#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#getEditableDataNames()$/;"	f
fuf#dir#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#getSwitchOrder()$/;"	f
fuf#dir#onInit	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#onInit()$/;"	f
fuf#dir#renewCache	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#renewCache()$/;"	f
fuf#dir#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function fuf#dir#requiresOnCommandPre()$/;"	f
fuf#echoError	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#echoError(msg)$/;"	f
fuf#echoWarning	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#echoWarning(msg)$/;"	f
fuf#editDataFile	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#editDataFile()$/;"	f
fuf#enumExpandedDirsEntries	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#enumExpandedDirsEntries(dir, exclude)$/;"	f
fuf#expandTailDotSequenceToParentDir	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#expandTailDotSequenceToParentDir(pattern)$/;"	f
fuf#file#createHandler	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#createHandler(base)$/;"	f
fuf#file#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#getEditableDataNames()$/;"	f
fuf#file#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#getSwitchOrder()$/;"	f
fuf#file#onInit	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#onInit()$/;"	f
fuf#file#renewCache	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#renewCache()$/;"	f
fuf#file#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function fuf#file#requiresOnCommandPre()$/;"	f
fuf#formatPrompt	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#formatPrompt(prompt, partialMatching, otherString)$/;"	f
fuf#getCurrentTagFiles	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#getCurrentTagFiles()$/;"	f
fuf#getDataFileTime	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#getDataFileTime(modeName, dataName)$/;"	f
fuf#getFileLines	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#getFileLines(file)$/;"	f
fuf#getModeNames	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#getModeNames()$/;"	f
fuf#getRunningHandler	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#getRunningHandler()$/;"	f
fuf#givencmd#createHandler	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#createHandler(base)$/;"	f
fuf#givencmd#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#getEditableDataNames()$/;"	f
fuf#givencmd#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#getSwitchOrder()$/;"	f
fuf#givencmd#launch	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givencmd#onInit	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#onInit()$/;"	f
fuf#givencmd#renewCache	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#renewCache()$/;"	f
fuf#givencmd#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function fuf#givencmd#requiresOnCommandPre()$/;"	f
fuf#givendir#createHandler	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#createHandler(base)$/;"	f
fuf#givendir#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#getEditableDataNames()$/;"	f
fuf#givendir#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#getSwitchOrder()$/;"	f
fuf#givendir#launch	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givendir#onInit	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#onInit()$/;"	f
fuf#givendir#renewCache	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#renewCache()$/;"	f
fuf#givendir#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function fuf#givendir#requiresOnCommandPre()$/;"	f
fuf#givenfile#createHandler	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#createHandler(base)$/;"	f
fuf#givenfile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#getEditableDataNames()$/;"	f
fuf#givenfile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#getSwitchOrder()$/;"	f
fuf#givenfile#launch	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givenfile#onInit	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#onInit()$/;"	f
fuf#givenfile#renewCache	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#renewCache()$/;"	f
fuf#givenfile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function fuf#givenfile#requiresOnCommandPre()$/;"	f
fuf#glob	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#glob(expr)$/;"	f
fuf#help#createHandler	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#createHandler(base)$/;"	f
fuf#help#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#getEditableDataNames()$/;"	f
fuf#help#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#getSwitchOrder()$/;"	f
fuf#help#onInit	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#onInit()$/;"	f
fuf#help#renewCache	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#renewCache()$/;"	f
fuf#help#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function fuf#help#requiresOnCommandPre()$/;"	f
fuf#jumplist#createHandler	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#createHandler(base)$/;"	f
fuf#jumplist#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#getEditableDataNames()$/;"	f
fuf#jumplist#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#getSwitchOrder()$/;"	f
fuf#jumplist#onInit	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#onInit()$/;"	f
fuf#jumplist#renewCache	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#renewCache()$/;"	f
fuf#jumplist#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function fuf#jumplist#requiresOnCommandPre()$/;"	f
fuf#launch	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#launch(modeName, initialPattern, partialMatching)$/;"	f
fuf#line#createHandler	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#createHandler(base)$/;"	f
fuf#line#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#getEditableDataNames()$/;"	f
fuf#line#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#getSwitchOrder()$/;"	f
fuf#line#onInit	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#onInit()$/;"	f
fuf#line#renewCache	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#renewCache()$/;"	f
fuf#line#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function fuf#line#requiresOnCommandPre()$/;"	f
fuf#loadDataFile	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#loadDataFile(modeName, dataName)$/;"	f
fuf#makeNonPathItem	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#makeNonPathItem(word, menu)$/;"	f
fuf#makePathItem	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#makePathItem(fname, menu, appendsDirSuffix)$/;"	f
fuf#makePatternSet	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#makePatternSet(patternBase, interpreter, partialMatching)$/;"	f
fuf#makePreviewLinesAround	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#makePreviewLinesAround(lines, indices, page, maxHeight)$/;"	f
fuf#makePreviewLinesForFile	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#makePreviewLinesForFile(file, count, maxHeight)$/;"	f
fuf#mapToSetAbbrWithSnippedWordAsPath	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#mapToSetAbbrWithSnippedWordAsPath(items)$/;"	f
fuf#mapToSetSerialIndex	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#mapToSetSerialIndex(in, offset)$/;"	f
fuf#mrucmd#createHandler	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#createHandler(base)$/;"	f
fuf#mrucmd#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getEditableDataNames()$/;"	f
fuf#mrucmd#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getSwitchOrder()$/;"	f
fuf#mrucmd#onCommandPre	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onCommandPre(cmd)$/;"	f
fuf#mrucmd#onInit	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onInit()$/;"	f
fuf#mrucmd#renewCache	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#renewCache()$/;"	f
fuf#mrucmd#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#requiresOnCommandPre()$/;"	f
fuf#mrufile#createHandler	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#createHandler(base)$/;"	f
fuf#mrufile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#getEditableDataNames()$/;"	f
fuf#mrufile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#getSwitchOrder()$/;"	f
fuf#mrufile#onInit	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#onInit()$/;"	f
fuf#mrufile#renewCache	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#renewCache()$/;"	f
fuf#mrufile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function fuf#mrufile#requiresOnCommandPre()$/;"	f
fuf#onComplete	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#onComplete(findstart, base)$/;"	f
fuf#openBuffer	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#openBuffer(bufNr, mode, reuse)$/;"	f
fuf#openFile	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#openFile(path, mode, reuse)$/;"	f
fuf#openHelp	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#openHelp(tag, mode)$/;"	f
fuf#openTag	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#openTag(tag, mode)$/;"	f
fuf#prejump	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#prejump(mode)$/;"	f
fuf#quickfix#createHandler	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#createHandler(base)$/;"	f
fuf#quickfix#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#getEditableDataNames()$/;"	f
fuf#quickfix#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#getSwitchOrder()$/;"	f
fuf#quickfix#onInit	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#onInit()$/;"	f
fuf#quickfix#renewCache	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#renewCache()$/;"	f
fuf#quickfix#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function fuf#quickfix#requiresOnCommandPre()$/;"	f
fuf#saveDataFile	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#saveDataFile(modeName, dataName, items)$/;"	f
fuf#setAbbrWithFormattedWord	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#setAbbrWithFormattedWord(item, abbrIndex)$/;"	f
fuf#setOneTimeVariables	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#setOneTimeVariables(...)$/;"	f
fuf#splitPath	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#splitPath(path)$/;"	f
fuf#suffixNumber	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#suffixNumber(str)$/;"	f
fuf#tag#createHandler	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#createHandler(base)$/;"	f
fuf#tag#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#getEditableDataNames()$/;"	f
fuf#tag#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#getSwitchOrder()$/;"	f
fuf#tag#onInit	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#onInit()$/;"	f
fuf#tag#renewCache	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#renewCache()$/;"	f
fuf#tag#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function fuf#tag#requiresOnCommandPre()$/;"	f
fuf#taggedfile#createHandler	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#createHandler(base)$/;"	f
fuf#taggedfile#getEditableDataNames	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getEditableDataNames()$/;"	f
fuf#taggedfile#getSwitchOrder	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getSwitchOrder()$/;"	f
fuf#taggedfile#onInit	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#onInit()$/;"	f
fuf#taggedfile#renewCache	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#renewCache()$/;"	f
fuf#taggedfile#requiresOnCommandPre	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#requiresOnCommandPre()$/;"	f
fuf#updateMruList	bundle/FuzzyFinder/autoload/fuf.vim	/^function fuf#updateMruList(mrulist, newItem, maxItem, exclude)$/;"	f
fugitive	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	bundle/fugitive.vim/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#reload_status	bundle/fugitive.vim/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#statusline	bundle/fugitive.vim/plugin/fugitive.vim	/^function! fugitive#statusline(...)$/;"	f
fugitive_blame	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_remove	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_utility	bundle/fugitive.vim/plugin/fugitive.vim	/^augroup fugitive_utility$/;"	a
function	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
function	bundle/rails.vim/autoload/rails.vim	/^function! s:function(name)$/;"	f
function	bundle/rails.vim/plugin/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	bundle/rails.vim/autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	bundle/rails.vim/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g:Align_xstrlen	bundle/Align/autoload/Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	bundle/Align/autoload/Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:BufferListLoaded	bundle/bufferlist.vim/plugin/bufferlist.vim	/^let g:BufferListLoaded = 1$/;"	v
g:BufferListMaxWidth	bundle/bufferlist.vim/plugin/bufferlist.vim	/^  let g:BufferListMaxWidth = 40$/;"	v
g:BufferListWidth	bundle/bufferlist.vim/plugin/bufferlist.vim	/^  let g:BufferListWidth = 20$/;"	v
g:DisableAutoPHPFolding	bundle/phpfolding.vim/plugin/phpfolding.vim	/^    let g:DisableAutoPHPFolding = 0$/;"	v
g:DrChipTopLvlMenu	bundle/Align/plugin/AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:EasyMotion_loaded	bundle/EasyMotion/plugin/EasyMotion.vim	/^	let g:EasyMotion_loaded = 1$/;"	v
g:NERDTreeBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:NTPNames	bundle/NERD_tree-Project/plugin/NERD_tree_project.vim	/^  let g:NTPNames = ['build.xml', 'Makefile', '.project', '.lvimrc']$/;"	v
g:PROJECT_CTAGS_MSG_LVL_FULL	bundle/ProjectCTags/plugin/projectCTags.vim	/^let g:PROJECT_CTAGS_MSG_LVL_FULL = 2$/;"	v
g:PROJECT_CTAGS_MSG_LVL_NEW	bundle/ProjectCTags/plugin/projectCTags.vim	/^let g:PROJECT_CTAGS_MSG_LVL_NEW  = 1$/;"	v
g:PROJECT_CTAGS_MSG_LVL_NONE	bundle/ProjectCTags/plugin/projectCTags.vim	/^let g:PROJECT_CTAGS_MSG_LVL_NONE = 0$/;"	v
g:SuperTabCompletionContexts	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabCrMapping	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabDefaultCompletionType	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	bundle/SuperTab-continued./plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['\\s']$/;"	v
g:SuperTabNoCompleteAfter	bundle/SuperTab-continued./plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	bundle/SuperTab-continued./plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	bundle/SuperTab-continued./plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	bundle/SuperTab-continued./plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:ackprg	bundle/ack.vim/plugin/ack.vim	/^let g:ackprg="ack\\\\ -H\\\\ --nocolor\\\\ --nogroup"$/;"	v
g:autoloaded_rails	bundle/rails.vim/autoload/rails.vim	/^let g:autoloaded_rails = '4.3'$/;"	v
g:colors_name	bundle/twilight256.vim/colors/twilight256.vim	/^let g:colors_name="twilight256"$/;"	v
g:colors_name	colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:command_t_loaded	bundle/Command-T/plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:command_t_loaded	bundle/command-t/plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:ctags_args	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_args='--c-types=cfgsu --vim-types=f --if0=yes'$/;"	v
g:ctags_obligatory_args	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let g:ctags_obligatory_args = '-n --sort=no -o -'$/;"	v
g:ctags_path	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_path='ctags'		" Use first 'ctags' in PATH.$/;"	v
g:ctags_pattern	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let g:ctags_pattern="^\\\\(.\\\\{-}\\\\)\\t.\\\\{-}\\t\\\\(\\\\d*\\\\).*"$/;"	v
g:ctags_regenerate	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_regenerate = 1$/;"	v
g:ctags_statusline	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_statusline = 0$/;"	v
g:ctags_title	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_title = 0$/;"	v
g:ctags_title	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let g:ctags_title = 1$/;"	v
g:cucumber_languages	bundle/cucumber.zip/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:debuggerMaxChildren	plugin/debugger.vim	/^  let g:debuggerMaxChildren = 32$/;"	v
g:debuggerMaxData	plugin/debugger.vim	/^  let g:debuggerMaxData = 1024$/;"	v
g:debuggerMaxDepth	plugin/debugger.vim	/^  let g:debuggerMaxDepth = 1$/;"	v
g:debuggerMiniBufExpl	plugin/debugger.vim	/^  let g:debuggerMiniBufExpl = 0$/;"	v
g:debuggerPort	plugin/debugger.vim	/^  let g:debuggerPort = 9000$/;"	v
g:did_ft	bundle/snipmate.vim/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:fugitive_git_executable	bundle/fugitive.vim/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	bundle/fugitive.vim/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:gist_browser_command	bundle/gist-vim/plugin/gist.vim	/^    let g:gist_browser_command = "!start rundll32 url.dll,FileProtocolHandler %URL%"$/;"	v
g:gist_browser_command	bundle/gist-vim/plugin/gist.vim	/^    let g:gist_browser_command = "firefox %URL% &"$/;"	v
g:gist_browser_command	bundle/gist-vim/plugin/gist.vim	/^    let g:gist_browser_command = "open %URL%"$/;"	v
g:gist_browser_command	bundle/gist-vim/plugin/gist.vim	/^    let g:gist_browser_command = "xdg-open %URL%"$/;"	v
g:gist_cookie_dir	bundle/gist-vim/plugin/gist.vim	/^  let g:gist_cookie_dir = substitute(expand('<sfile>:p:h'), '[\/\\\\]plugin$', '', '').'\/cookies'$/;"	v
g:gist_detect_filetype	bundle/gist-vim/plugin/gist.vim	/^  let g:gist_detect_filetype = 0$/;"	v
g:gist_open_browser_after_post	bundle/gist-vim/plugin/gist.vim	/^  let g:gist_open_browser_after_post = 0$/;"	v
g:gist_put_url_to_clipboard_after_post	bundle/gist-vim/plugin/gist.vim	/^  let g:gist_put_url_to_clipboard_after_post = 1$/;"	v
g:gist_show_privates	bundle/gist-vim/plugin/gist.vim	/^  let g:gist_show_privates = 0$/;"	v
g:gundo_help	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_help = 1$/;"	v
g:gundo_map_move_newer	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_map_move_newer = 'k'$/;"	v
g:gundo_map_move_older	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_map_move_older = 'j'$/;"	v
g:gundo_preview_bottom	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_preview_bottom = 0$/;"	v
g:gundo_preview_height	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_preview_height = 15$/;"	v
g:gundo_right	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_right = 0$/;"	v
g:gundo_width	bundle/Gundo/plugin/gundo.vim	/^    let g:gundo_width = 45$/;"	v
g:loaded_Align	bundle/Align/autoload/Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	bundle/Align/autoload/AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	bundle/Align/plugin/AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	bundle/Align/plugin/AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_autoload_l9	bundle/L9/autoload/l9.vim	/^let g:loaded_autoload_l9 = 1$/;"	v
g:loaded_cecutil	bundle/Align/plugin/cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_file_line	bundle/file-line/plugin/file:line.vim	/^let g:loaded_file_line = 1$/;"	v
g:loaded_fugitive	bundle/fugitive.vim/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gist_vim	bundle/gist-vim/plugin/gist.vim	/^let g:loaded_gist_vim = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	bundle/The-NERD-tree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_poslist	bundle/vim-poslist/plugin/poslist.vim	/^let g:loaded_poslist = 1$/;"	v
g:loaded_quicklaunch	bundle/vim-quickrun/plugin/quicklaunch.vim	/^let g:loaded_quicklaunch = 1$/;"	v
g:loaded_quickrun	bundle/vim-quickrun/plugin/quickrun.vim	/^let g:loaded_quickrun = 1$/;"	v
g:loaded_rails	bundle/rails.vim/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_repeat	bundle/repeat.vim/plugin/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_restart	bundle/restart.vim/plugin/restart.vim	/^let g:loaded_restart = 1$/;"	v
g:loaded_surround	bundle/surround.vim/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tagbar	bundle/Tagbar/plugin/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:miniBufExplBufList	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplBufList = ''$/;"	v
g:miniBufExplBufList	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplBufList = ''$/;"	v
g:miniBufExplDoneClickSave	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^    let  g:miniBufExplDoneClickSave = 1$/;"	v
g:miniBufExplDoneClickSave	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^    let  g:miniBufExplDoneClickSave = 1$/;"	v
g:miniBufExplForceDisplay	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplForceDisplay = 0$/;"	v
g:miniBufExplForceDisplay	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplForceDisplay = 0$/;"	v
g:miniBufExplForceSyntaxEnable	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplForceSyntaxEnable = 0$/;"	v
g:miniBufExplForceSyntaxEnable	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplForceSyntaxEnable = 0$/;"	v
g:miniBufExplInAutoUpdate	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplInAutoUpdate = 0$/;"	v
g:miniBufExplInAutoUpdate	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplInAutoUpdate = 0$/;"	v
g:miniBufExplMapCTabSwitchBufs	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchBufs = 0$/;"	v
g:miniBufExplMapCTabSwitchBufs	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMapCTabSwitchBufs = 0$/;"	v
g:miniBufExplMapCTabSwitchWindows	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMapCTabSwitchWindows = 0$/;"	v
g:miniBufExplMapCTabSwitchWindows	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMapCTabSwitchWindows = 0$/;"	v
g:miniBufExplMapWindowNav	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNav = 0$/;"	v
g:miniBufExplMapWindowNav	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMapWindowNav = 0$/;"	v
g:miniBufExplMapWindowNavArrows	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavArrows = 0$/;"	v
g:miniBufExplMapWindowNavArrows	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMapWindowNavArrows = 0$/;"	v
g:miniBufExplMapWindowNavVim	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMapWindowNavVim = 0$/;"	v
g:miniBufExplMapWindowNavVim	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMapWindowNavVim = 0$/;"	v
g:miniBufExplMaxHeight	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMaxHeight = 0$/;"	v
g:miniBufExplMaxHeight	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMaxHeight = 0$/;"	v
g:miniBufExplMaxSize	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMaxSize = g:miniBufExplMaxHeight$/;"	v
g:miniBufExplMaxSize	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMaxSize = g:miniBufExplMaxHeight$/;"	v
g:miniBufExplMinHeight	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMinHeight = 1$/;"	v
g:miniBufExplMinHeight	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMinHeight = 1$/;"	v
g:miniBufExplMinSize	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplMinSize = g:miniBufExplMinHeight$/;"	v
g:miniBufExplMinSize	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplMinSize = g:miniBufExplMinHeight$/;"	v
g:miniBufExplModSelTarget	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplModSelTarget = 0$/;"	v
g:miniBufExplModSelTarget	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplModSelTarget = 0$/;"	v
g:miniBufExplSplitBelow	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplSplitBelow = &splitbelow$/;"	v
g:miniBufExplSplitBelow	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplSplitBelow = &splitbelow$/;"	v
g:miniBufExplSplitToEdge	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplSplitToEdge = 1$/;"	v
g:miniBufExplSplitToEdge	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplSplitToEdge = 1$/;"	v
g:miniBufExplTabWrap	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplTabWrap = 0$/;"	v
g:miniBufExplTabWrap	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplTabWrap = 0$/;"	v
g:miniBufExplUseSingleClick	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplUseSingleClick = 0$/;"	v
g:miniBufExplUseSingleClick	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplUseSingleClick = 0$/;"	v
g:miniBufExplVSplit	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplVSplit = 0$/;"	v
g:miniBufExplVSplit	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplVSplit = 0$/;"	v
g:miniBufExplorerAutoUpdate	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplorerAutoUpdate = 0$/;"	v
g:miniBufExplorerAutoUpdate	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplorerAutoUpdate = 0$/;"	v
g:miniBufExplorerDebugLevel	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugLevel = 0 $/;"	v
g:miniBufExplorerDebugLevel	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplorerDebugLevel = 0 $/;"	v
g:miniBufExplorerDebugMode	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugMode = 3 $/;"	v
g:miniBufExplorerDebugMode	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplorerDebugMode = 3 $/;"	v
g:miniBufExplorerDebugOutput	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplorerDebugOutput = ''$/;"	v
g:miniBufExplorerDebugOutput	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplorerDebugOutput = ''$/;"	v
g:miniBufExplorerMoreThanOne	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let g:miniBufExplorerMoreThanOne = 2$/;"	v
g:miniBufExplorerMoreThanOne	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let g:miniBufExplorerMoreThanOne = 2$/;"	v
g:pdv_cfg_Author	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Author = "Jairo Suarez <jairo.suarez@risk-mi.com>"$/;"	v
g:pdv_cfg_BOL	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_BOL = "norm! o"$/;"	v
g:pdv_cfg_Comment1	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Comment1 = " * "$/;"	v
g:pdv_cfg_CommentEnd	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_CommentEnd = "\/\/ }" . "}" . "}"$/;"	v
g:pdv_cfg_CommentHead	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_CommentHead = "\/**"$/;"	v
g:pdv_cfg_CommentSingle	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_CommentSingle = "\/\/"$/;"	v
g:pdv_cfg_CommentTail	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_CommentTail = " *\/"$/;"	v
g:pdv_cfg_Commentn	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Commentn = " * "$/;"	v
g:pdv_cfg_Copyright	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Copyright = "RiskIQ"$/;"	v
g:pdv_cfg_EOL	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_EOL = ""$/;"	v
g:pdv_cfg_License	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_License = "PHP Version 5.2 {@link http:\/\/www.php.net\/license\/}"$/;"	v
g:pdv_cfg_Package	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Package = ""$/;"	v
g:pdv_cfg_ReturnVal	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_ReturnVal = "void"$/;"	v
g:pdv_cfg_Type	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Type = "mixed"$/;"	v
g:pdv_cfg_Uses	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Uses = 1$/;"	v
g:pdv_cfg_Version	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_Version = "$id$"$/;"	v
g:pdv_cfg_paste	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_paste = 1$/;"	v
g:pdv_cfg_php4always	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_php4always = 1$/;"	v
g:pdv_cfg_php4guess	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_php4guess = 1$/;"	v
g:pdv_cfg_php4guessval	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_cfg_php4guessval = "protected"$/;"	v
g:pdv_re_abstract	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_abstract = '\\(abstract\\)'$/;"	v
g:pdv_re_array	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_array  = "^array *(.*"$/;"	v
g:pdv_re_attribute	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_attribute = '^\\s*\\(\\(private\\|public\\|protected\\|var\\|static\\)\\+\\)\\s*\\$\\([^ ;=]\\+\\)[ =]*\\(.*\\);\\?$'$/;"	v
g:pdv_re_bool	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_bool = "\\(true\\|false\\)"$/;"	v
g:pdv_re_class	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_class = '^\\s*\\([a-zA-Z]*\\)\\s*\\(interface\\|class\\)\\s*\\([^ ]\\+\\)\\s*\\(extends\\)\\?\\s*\\([a-zA-Z0-9]*\\)\\?\\s*\\(implements*\\)\\? *\\([a-zA-Z0-9_ ,]*\\)\\?.*$'$/;"	v
g:pdv_re_comment	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_comment = ' *\\*\/ *'$/;"	v
g:pdv_re_const	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_const = '^\\s*\\(\\(const\\)\\+\\)\\s*\\([^ ;=]\\+\\)[ =]*\\(.*\\);\\?$'$/;"	v
g:pdv_re_final	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_final = '\\(final\\)'$/;"	v
g:pdv_re_float	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_float  = '^\\d\\+\\.\\d\\+'$/;"	v
g:pdv_re_func	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_func = '^\\s*\\([a-zA-Z ]*\\)function\\s\\+\\([^ (]\\+\\)\\s*(\\s*\\(.*\\)\\s*)\\s*[{;]\\?$'$/;"	v
g:pdv_re_funcend	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_funcend = '^\\s*}$'$/;"	v
g:pdv_re_indent	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_indent = '^\\s*'$/;"	v
g:pdv_re_int	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_int    = '^[0-9]\\+'$/;"	v
g:pdv_re_param	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_param = ' *\\([^ &]*\\) *&\\?\\$\\([A-Za-z_][A-Za-z0-9_]*\\) *=\\? *\\(.*\\)\\?$'$/;"	v
g:pdv_re_scope	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_scope = '\\(private\\|protected\\|public\\)'$/;"	v
g:pdv_re_static	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_static = '\\(static\\)'$/;"	v
g:pdv_re_string	bundle/php-doc-upgrade/plugin/php-doc.vim	/^let g:pdv_re_string = "['\\"].*"$/;"	v
g:phpDocBlockIncludedPostfix	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let g:phpDocBlockIncludedPostfix = '**#@+'$/;"	v
g:phpDocIncludedPostfix	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let g:phpDocIncludedPostfix = '**'$/;"	v
g:php_check_syntax	plugin/php_check_syntax.vim	/^let g:php_check_syntax = 1$/;"	v
g:php_check_syntax_cmd	plugin/php_check_syntax.vim	/^    let g:php_check_syntax_cmd='php -l'$/;"	v
g:poslist_histsize	bundle/vim-poslist/plugin/poslist.vim	/^  let g:poslist_histsize = 50$/;"	v
g:poslist_lines	bundle/vim-poslist/plugin/poslist.vim	/^  let g:poslist_lines = 2$/;"	v
g:proj_running	bundle/project.tar.gz/plugin/project.vim	/^        let g:proj_running = bufnr(bufname.'\\>')$/;"	v
g:projectCTagsAutogenerateMessageVerbosity	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsAutogenerateMessageVerbosity = g:PROJECT_CTAGS_MSG_LVL_NEW$/;"	v
g:projectCTagsAutogenerateTags	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsAutogenerateTags = 0$/;"	v
g:projectCTagsCTagsExe	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsCTagsExe = "ctags"$/;"	v
g:projectCTagsFile	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsFile = ".tags"$/;"	v
g:projectCTagsFlagFile	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsFlagFile = ".tags_options"$/;"	v
g:projectCTagsFolderSeparator	bundle/ProjectCTags/plugin/projectCTags.vim	/^    let g:projectCTagsFolderSeparator = "\/"$/;"	v
g:projectCTagsFolderSeparator	bundle/ProjectCTags/plugin/projectCTags.vim	/^    let g:projectCTagsFolderSeparator = "\\\\"$/;"	v
g:projectCTagsLoadedPlugin	bundle/ProjectCTags/plugin/projectCTags.vim	/^let g:projectCTagsLoadedPlugin = 1$/;"	v
g:projectCTagsMessageVerbosity	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsMessageVerbosity = g:PROJECT_CTAGS_MSG_LVL_FULL$/;"	v
g:projectCTagsProjectTagExpiration	bundle/ProjectCTags/plugin/projectCTags.vim	/^  let g:projectCTagsProjectTagExpiration = 60 * 60 * 24 * 7$/;"	v
g:quickrun#default_config	bundle/vim-quickrun/autoload/quickrun.vim	/^let g:quickrun#default_config = {$/;"	v
g:repeat_tick	bundle/repeat.vim/plugin/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:restart_cd	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_cd = getcwd()$/;"	v
g:restart_command	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_command = 'Restart'$/;"	v
g:restart_save_fn	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_save_fn = []$/;"	v
g:restart_save_window_values	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_save_window_values = 1$/;"	v
g:restart_sessionoptions	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_sessionoptions = ''$/;"	v
g:restart_vim_progname	bundle/restart.vim/plugin/restart.vim	/^    let g:restart_vim_progname = 'gvim'$/;"	v
g:searchEmptyLinesPostfixing	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let g:searchEmptyLinesPostfixing = 1$/;"	v
g:searchPhpDocLineCount	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let g:searchPhpDocLineCount = 1$/;"	v
g:sparkupExecuteMapping	bundle/sparkup/vim/ftplugin/html/sparkup.vim	/^  let g:sparkupExecuteMapping = '<c-e>'$/;"	v
g:sparkupNextMapping	bundle/sparkup/vim/ftplugin/html/sparkup.vim	/^  let g:sparkupNextMapping = '<c-n>'$/;"	v
g:tabular_default_format	bundle/Tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
g:tabular_loaded	bundle/Tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
g:tagbar_autoclose	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_autoclose = 0$/;"	v
g:tagbar_autofocus	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_autofocus = 0$/;"	v
g:tagbar_compact	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_compact = 0$/;"	v
g:tagbar_ctags_bin	bundle/Tagbar/plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags'$/;"	v
g:tagbar_ctags_bin	bundle/Tagbar/plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags-exuberant'$/;"	v
g:tagbar_ctags_bin	bundle/Tagbar/plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags.exe'$/;"	v
g:tagbar_ctags_bin	bundle/Tagbar/plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'exctags'$/;"	v
g:tagbar_ctags_bin	bundle/Tagbar/plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'tags'$/;"	v
g:tagbar_expand	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_expand = 0$/;"	v
g:tagbar_left	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_left = 0$/;"	v
g:tagbar_sort	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_sort = 1$/;"	v
g:tagbar_width	bundle/Tagbar/plugin/tagbar.vim	/^    let g:tagbar_width = 40$/;"	v
g:yankring_clipboard_monitor	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_clipboard_monitor = (has('clipboard')?1:0)$/;"	v
g:yankring_default_menu_mode	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_default_menu_mode = 3$/;"	v
g:yankring_del_v_key	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_del_v_key = 'd x'$/;"	v
g:yankring_dot_repeat_yank	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_dot_repeat_yank = (&cpoptions=~'y'?1:0)$/;"	v
g:yankring_enabled	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_enabled = 1$/;"	v
g:yankring_history_dir	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_history_dir = expand('$HOME')$/;"	v
g:yankring_history_dir	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_history_dir = expand(g:yankring_history_dir)$/;"	v
g:yankring_history_file	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_history_file = 'yankring_history'$/;"	v
g:yankring_ignore_duplicate	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_ignore_duplicate = 1$/;"	v
g:yankring_ignore_operator	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_ignore_operator = 'g~ gu gU ! = gq g? > < zf g@'$/;"	v
g:yankring_ignore_operator	bundle/YankRing.vim/plugin/yankring.vim	/^let g:yankring_ignore_operator = ' '.g:yankring_ignore_operator.' '$/;"	v
g:yankring_manage_numbered_reg	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_manage_numbered_reg = 0$/;"	v
g:yankring_map_dot	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_map_dot = 1$/;"	v
g:yankring_max_display	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_max_display = 0$/;"	v
g:yankring_max_element_length	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_max_element_length = 1048576$/;"	v
g:yankring_max_history	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_max_history = 100$/;"	v
g:yankring_min_element_length	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_min_element_length = 1$/;"	v
g:yankring_n_keys	bundle/YankRing.vim/plugin/yankring.vim	/^        let g:yankring_n_keys = 'Y D x X'$/;"	v
g:yankring_n_keys	bundle/YankRing.vim/plugin/yankring.vim	/^        let g:yankring_n_keys = 'x yy dd yw dw ye de yE dE yiw diw yaw daw y$ d$ Y D yG dG ygg dgg'$/;"	v
g:yankring_o_keys	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_o_keys  = 'b B w W e E d h j k l H M L y G ^ 0 $ , ;'$/;"	v
g:yankring_o_keys	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_o_keys .= ' g_  g^ gm g$ gk gj gg ge gE - + _ '$/;"	v
g:yankring_o_keys	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_o_keys .= ' iw iW aw aW as is ap ip a] a[ i] i[ a) a( ab i) i( ib a> a< i> i< at it a} a{ aB i} i{ iB a" a'' a` i" i'' i`'$/;"	v
g:yankring_paste_check_default_buffer	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_check_default_buffer = 1$/;"	v
g:yankring_paste_n_akey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_n_akey = 'p'$/;"	v
g:yankring_paste_n_bkey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_n_bkey = 'P'$/;"	v
g:yankring_paste_using_g	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_using_g = 1$/;"	v
g:yankring_paste_v_akey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_v_akey = 'p'$/;"	v
g:yankring_paste_v_bkey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_paste_v_bkey = 'P'$/;"	v
g:yankring_persist	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_persist = 1$/;"	v
g:yankring_replace_n_nkey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_replace_n_nkey = '<C-N>'$/;"	v
g:yankring_replace_n_pkey	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_replace_n_pkey = '<C-P>'$/;"	v
g:yankring_share_between_instances	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_share_between_instances = 1$/;"	v
g:yankring_v_key	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_v_key = 'y'$/;"	v
g:yankring_warn_on_truncate	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_warn_on_truncate = 1$/;"	v
g:yankring_window_auto_close	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_auto_close = 1$/;"	v
g:yankring_window_height	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_height = 8$/;"	v
g:yankring_window_increment	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_increment = 50$/;"	v
g:yankring_window_use_bottom	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_use_bottom = 1$/;"	v
g:yankring_window_use_horiz	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_use_horiz = 1$/;"	v
g:yankring_window_use_right	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_use_right = 1$/;"	v
g:yankring_window_use_separate	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_use_separate = 1$/;"	v
g:yankring_window_width	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_window_width = 30$/;"	v
g:yankring_zap_keys	bundle/YankRing.vim/plugin/yankring.vim	/^    let g:yankring_zap_keys = 'f F t T \/ ? @'$/;"	v
gS	bundle/surround.vim/plugin/surround.vim	/^    vmap    gS   <Plug>VgSurround$/;"	m
generate_tags	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^    let generate_tags = 0$/;"	v
get	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def get(self, attr):$/;"	m	class:Options	access:public
get	bundle/sparkup/sparkup	/^    def get(self, attr):$/;"	m	class:Options	access:public
get	bundle/sparkup/sparkup.py	/^    def get(self, attr):$/;"	m	class:Options	access:public
get	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def get(self, attr):$/;"	m	class:Options	access:public
getBufIndicator	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:getBufIndicator(bufNr)$/;"	f
getChangesLines	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:getChangesLines()$/;"	f
getCurrentHelpTagFiles	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:getCurrentHelpTagFiles()$/;"	f
getEditableDataFiles	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:getEditableDataFiles(modeName)$/;"	f
getFileType	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:getFileType(bufNr)$/;"	f
getHelpTagEntries	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:getHelpTagEntries(tagFile)$/;"	f
getJumpsLines	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:getJumpsLines()$/;"	f
getJumpsLines	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:getJumpsLines()$/;"	f
getLastBlockLength	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:getLastBlockLength(pattern, patternIsPath)$/;"	f
getLinePattern	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:getLinePattern(lnum)$/;"	f
getMatchingIndex	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:getMatchingIndex(lines, pattern)$/;"	f
getMatchingIndex	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:getMatchingIndex(lines, cmd)$/;"	f
getMatchingLineNumber	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:getMatchingLineNumber(lines, pattern, lnumBegin)$/;"	f
getPath	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSnippedHead	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:getSnippedHead(head, baseLen)$/;"	f
getTagData	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:getTagData(bufNrs)$/;"	f
getTagItems	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:getTagItems(bufNr)$/;"	f
getTagNames	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:getTagNames(tagFile)$/;"	f
getTaggedFileList	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:getTaggedFileList(tagfile)$/;"	f
getTreeWinNum	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getWordBoundaries	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:getWordBoundaries(word)$/;"	f
get_bool	bundle/Command-T/ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	bundle/Command-T/ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_bool	bundle/command-t/ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	bundle/command-t/ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_closing_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def get_closing_tag(self):$/;"	m	class:Element	access:public
get_closing_tag	bundle/sparkup/sparkup	/^    def get_closing_tag(self):$/;"	m	class:Element	access:public
get_closing_tag	bundle/sparkup/sparkup.py	/^    def get_closing_tag(self):$/;"	m	class:Element	access:public
get_closing_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def get_closing_tag(self):$/;"	m	class:Element	access:public
get_command	plugin/debugger.py	/^  def get_command(self):$/;"	m	class:WatchWindow	access:public
get_cursor_highlight	bundle/Command-T/ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_cursor_highlight	bundle/command-t/ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_default_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def get_default_tag(self):$/;"	m	class:Element	access:public
get_default_tag	bundle/sparkup/sparkup	/^    def get_default_tag(self):$/;"	m	class:Element	access:public
get_default_tag	bundle/sparkup/sparkup.py	/^    def get_default_tag(self):$/;"	m	class:Element	access:public
get_default_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def get_default_tag(self):$/;"	m	class:Element	access:public
get_last_child	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def get_last_child(self):$/;"	m	class:Element	access:public
get_last_child	bundle/sparkup/sparkup	/^    def get_last_child(self):$/;"	m	class:Element	access:public
get_last_child	bundle/sparkup/sparkup.py	/^    def get_last_child(self):$/;"	m	class:Element	access:public
get_last_child	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def get_last_child(self):$/;"	m	class:Element	access:public
get_list_or_string	bundle/Command-T/ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_list_or_string	bundle/command-t/ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_number	bundle/Command-T/ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	bundle/Command-T/ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_number	bundle/command-t/ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	bundle/command-t/ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_opening_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def get_opening_tag(self):$/;"	m	class:Element	access:public
get_opening_tag	bundle/sparkup/sparkup	/^    def get_opening_tag(self):$/;"	m	class:Element	access:public
get_opening_tag	bundle/sparkup/sparkup.py	/^    def get_opening_tag(self):$/;"	m	class:Element	access:public
get_opening_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def get_opening_tag(self):$/;"	m	class:Element	access:public
get_string	bundle/Command-T/ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
get_string	bundle/command-t/ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
getchar	bundle/surround.vim/plugin/surround.vim	/^function! s:getchar()$/;"	f
getexp	plugin/debugger.py	/^  def getexp(self, bno):$/;"	m	class:BreakPoint	access:public
getfile	plugin/debugger.py	/^  def getfile(self, bno):$/;"	m	class:BreakPoint	access:public
getid	plugin/debugger.py	/^  def getid(self, bno):$/;"	m	class:BreakPoint	access:public
getline	plugin/debugger.py	/^  def getline(self, bno):$/;"	m	class:BreakPoint	access:public
getopt	bundle/rails.vim/autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getpidfor	bundle/rails.vim/autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
getwinnr	plugin/debugger.py	/^  def getwinnr(self):$/;"	m	class:VimWindow	access:public
gitdiffcached	bundle/git.zip/ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
go_srcview	plugin/debugger.py	/^  def go_srcview(self):$/;"	m	class:DebugUI	access:public
goto_pos	bundle/vim-poslist/plugin/poslist.vim	/^function! s:goto_pos(posn)$/;"	f
gotoline	bundle/file-line/plugin/file:line.vim	/^function! s:gotoline()$/;"	f
grey_color	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_level	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_number	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>grey_number(x)$/;"	f
gsub	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gsub	bundle/rails.vim/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	bundle/rails.vim/plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
handleFailedAssersion	bundle/L9/plugin/l9.vim	/^  function s:handleFailedAssersion(expr)$/;"	f
handleMiddleMouse	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_init	plugin/debugger.py	/^  def handle_init(self, res):$/;"	m	class:Debugger	access:public
handle_key	bundle/Command-T/ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
handle_key	bundle/command-t/ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
handle_msg	plugin/debugger.py	/^  def handle_msg(self, res):$/;"	m	class:Debugger	access:public
handle_response	plugin/debugger.py	/^  def handle_response(self, res):$/;"	m	class:Debugger	access:public
handle_response_breakpoint_set	plugin/debugger.py	/^  def handle_response_breakpoint_set(self, res):$/;"	m	class:Debugger	access:public
handle_response_context_get	plugin/debugger.py	/^  def handle_response_context_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_default	plugin/debugger.py	/^  def handle_response_default(self, res):$/;"	m	class:Debugger	access:public
handle_response_error	plugin/debugger.py	/^  def handle_response_error(self, res):$/;"	m	class:Debugger	access:public
handle_response_eval	plugin/debugger.py	/^  def handle_response_eval(self, res):$/;"	m	class:Debugger	access:public
handle_response_feature_set	plugin/debugger.py	/^  def handle_response_feature_set(self, res):$/;"	m	class:Debugger	access:public
handle_response_property_get	plugin/debugger.py	/^  def handle_response_property_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_run	plugin/debugger.py	/^  def handle_response_run(self, res):$/;"	m	class:Debugger	access:public
handle_response_stack_get	plugin/debugger.py	/^  def handle_response_stack_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_into	plugin/debugger.py	/^  def handle_response_step_into(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_out	plugin/debugger.py	/^  def handle_response_step_out(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_over	plugin/debugger.py	/^  def handle_response_step_over(self, res):$/;"	m	class:Debugger	access:public
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/file.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/line.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handlerBase.addStat	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.addStat(pattern, word)$/;"	f
handlerBase.concretize	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.concretize(deriv)$/;"	f
handlerBase.existsPrompt	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.existsPrompt(line)$/;"	f
handlerBase.getMatchingCompleteItems	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.getMatchingCompleteItems(patternBase)$/;"	f
handlerBase.onBs	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onBs()$/;"	f
handlerBase.onComplete	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onComplete(findstart, base)$/;"	f
handlerBase.onCr	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onCr(openType)$/;"	f
handlerBase.onCursorMovedI	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onCursorMovedI()$/;"	f
handlerBase.onDeleteWord	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onDeleteWord()$/;"	f
handlerBase.onInsertLeave	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onInsertLeave()$/;"	f
handlerBase.onPreviewBase	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onPreviewBase(repeatable)$/;"	f
handlerBase.onRecallPattern	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onRecallPattern(shift)$/;"	f
handlerBase.onSwitchMatching	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onSwitchMatching()$/;"	f
handlerBase.onSwitchMode	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.onSwitchMode(shift)$/;"	f
handlerBase.removePrompt	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.removePrompt(line)$/;"	f
handlerBase.restorePrompt	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:handlerBase.restorePrompt(line)$/;"	f
has	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def has(self, attr):$/;"	m	class:Options	access:public
has	bundle/sparkup/sparkup	/^    def has(self, attr):$/;"	m	class:Options	access:public
has	bundle/sparkup/sparkup.py	/^    def has(self, attr):$/;"	m	class:Options	access:public
has	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def has(self, attr):$/;"	m	class:Options	access:public
has_doc	autoload/vundle/installer.vim	/^func! s:has_doc(rtp)$/;"	f
has_syntax	bundle/Command-T/ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
has_syntax	bundle/command-t/ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
help	bundle/project.tar.gz/plugin/project.vim	/^        cnoremap <buffer> help let g:proj_doinghelp = 1<CR>:help$/;"	m
help	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def help(self):$/;"	m	class:Router	access:public
help	bundle/sparkup/sparkup	/^    def help(self):$/;"	m	class:Router	access:public
help	bundle/sparkup/sparkup.py	/^    def help(self):$/;"	m	class:Router	access:public
help	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def help(self):$/;"	m	class:Router	access:public
help_content	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    help_content = [$/;"	v	class:Router
help_content	bundle/sparkup/sparkup	/^    help_content = [$/;"	v	class:Router
help_content	bundle/sparkup/sparkup.py	/^    help_content = [$/;"	v	class:Router
help_content	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    help_content = [$/;"	v	class:Router
helperEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	bundle/rails.vim/autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	bundle/rails.vim/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
helptags	autoload/vundle/installer.vim	/^func! s:helptags(rtp)$/;"	f
hide	bundle/Command-T/ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide	bundle/command-t/ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	bundle/Command-T/ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
hide_cursor	bundle/command-t/ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
highlightError	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:highlightError()$/;"	f
highlightPrompt	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:highlightPrompt(prompt)$/;"	f
highlight_stack	plugin/debugger.py	/^  def highlight_stack(self, no):$/;"	m	class:StackWindow	access:public
home	bundle/project.tar.gz/plugin/project.vim	/^                let home=s:GetHome(info, '')$/;"	v
i	ftplugin/vundle.vim	/^nnoremap <buffer> i :call vundle#scripts#install()<CR>$/;"	m
iconv	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:iconv(expr, from, to)  " {{{2$/;"	f
indent	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    indent = ''$/;"	v	class:Parser
indent	bundle/sparkup/sparkup	/^    indent = ''$/;"	v	class:Parser
indent	bundle/sparkup/sparkup.py	/^    indent = ''$/;"	v	class:Parser
indent	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    indent = ''$/;"	v	class:Parser
indentLevelFor	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
info	bundle/project.tar.gz/plugin/project.vim	/^                let info=s:RecursivelyConstructDirectives(line('.'))$/;"	v
initNerdTree	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	bundle/rails.vim/autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize	bundle/Command-T/ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	bundle/Command-T/ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	bundle/Command-T/ruby/command-t/finder/buffer_finder.rb	/^    def initialize$/;"	f	class:CommandT.BufferFinder
initialize	bundle/Command-T/ruby/command-t/finder/file_finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileFinder
initialize	bundle/Command-T/ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	bundle/Command-T/ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileScanner
initialize	bundle/Command-T/ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initialize	bundle/FuzzyFinder/plugin/fuf.vim	/^function s:initialize()$/;"	f
initialize	bundle/command-t/ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	bundle/command-t/ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	bundle/command-t/ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	bundle/command-t/ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	bundle/command-t/ruby/command-t/scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Scanner
initialize	bundle/command-t/ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initializerEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	bundle/rails.vim/autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
input	plugin/debugger.py	/^  def input(self, mode, arg = ''):$/;"	m	class:WatchWindow	access:public
inputreplacement	bundle/surround.vim/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	bundle/surround.vim/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	bundle/surround.vim/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
install	autoload/vundle/installer.vim	/^func! s:install(bang, bundles)$/;"	f
integrationtestEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	bundle/rails.vim/autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
interpretPrimaryPatternForNonPath	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:interpretPrimaryPatternForNonPath(pattern)$/;"	f
interpretPrimaryPatternForPath	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:interpretPrimaryPatternForPath(pattern)$/;"	f
interpretPrimaryPatternForPathTail	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:interpretPrimaryPatternForPathTail(pattern)$/;"	f
invertrange	bundle/rails.vim/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isTreeOpen	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
is_cmd_exe	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:is_cmd_exe()  " {{{2$/;"	f
is_modified	bundle/restart.vim/plugin/restart.vim	/^function! s:is_modified() "{{{$/;"	f
isconnected	plugin/debugger.py	/^  def isconnected(self):$/;"	m	class:DbgProtocol	access:public
isprepared	plugin/debugger.py	/^  def isprepared(self):$/;"	m	class:VimWindow	access:public
itertools	bundle/Gundo/plugin/gundo.vim	/^import itertools$/;"	m
j	mappings.vim	/^nnoremap j gj$/;"	m
javascriptEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	bundle/rails.vim/autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jj	mappings.vim	/^map jj <ESC>$/;"	m
jump	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! s:jump(command,count)$/;"	f
jumpToBookmark	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^function s:jumpToBookmark(path, mode, pattern, lnum)$/;"	f
jumpToChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
jumpToTag	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:jumpToTag(item, mode)$/;"	f
k	bundle/project.tar.gz/plugin/project.vim	/^            let k=k+1$/;"	v
k	bundle/project.tar.gz/plugin/project.vim	/^        let k=1$/;"	v
k	mappings.vim	/^nnoremap k gk$/;"	m
l9#async#execute	bundle/L9/autoload/l9/async.vim	/^function l9#async#execute(key, cmd, cwd, input, appends)$/;"	f
l9#async#listActiveWorkers	bundle/L9/autoload/l9/async.vim	/^function l9#async#listActiveWorkers()$/;"	f
l9#async#listWorkers	bundle/L9/autoload/l9/async.vim	/^function l9#async#listWorkers()$/;"	f
l9#async#read	bundle/L9/autoload/l9/async.vim	/^function l9#async#read(key)$/;"	f
l9#completeForInputHl	bundle/L9/autoload/l9.vim	/^function l9#completeForInputHl(lead, line, pos)$/;"	f
l9#concat	bundle/L9/autoload/l9.vim	/^function l9#concat(items)$/;"	f
l9#concatPaths	bundle/L9/autoload/l9.vim	/^function l9#concatPaths(paths)$/;"	f
l9#convertWildcardToRegexp	bundle/L9/autoload/l9.vim	/^function l9#convertWildcardToRegexp(expr)$/;"	f
l9#defineVariableDefault	bundle/L9/autoload/l9.vim	/^function l9#defineVariableDefault(name, default)$/;"	f
l9#deleteAllBuffersExcept	bundle/L9/autoload/l9.vim	/^function l9#deleteAllBuffersExcept(files)$/;"	f
l9#echoHl	bundle/L9/autoload/l9.vim	/^function l9#echoHl(hl, msg, prefix, addingHistory)$/;"	f
l9#filterWithLimit	bundle/L9/autoload/l9.vim	/^function l9#filterWithLimit(items, expr, limit)$/;"	f
l9#getPathSeparator	bundle/L9/autoload/l9.vim	/^function l9#getPathSeparator()$/;"	f
l9#getSelectedText	bundle/L9/autoload/l9.vim	/^function l9#getSelectedText()$/;"	f
l9#getVersion	bundle/L9/autoload/l9.vim	/^function l9#getVersion()$/;"	f
l9#grepBuffers	bundle/L9/autoload/l9.vim	/^function l9#grepBuffers(pattern, bufNrs)$/;"	f
l9#grepFiles	bundle/L9/autoload/l9.vim	/^function l9#grepFiles(pattern, files)$/;"	f
l9#guardScriptLoading	bundle/L9/autoload/l9.vim	/^function l9#guardScriptLoading(path, vimVersion, l9Version, exprs)$/;"	f
l9#hash224	bundle/L9/autoload/l9.vim	/^function l9#hash224(str)$/;"	f
l9#inputHl	bundle/L9/autoload/l9.vim	/^function l9#inputHl(hl, ...)$/;"	f
l9#isCompatible	bundle/L9/autoload/l9.vim	/^function l9#isCompatible(ver)$/;"	f
l9#loadFilesToBuffers	bundle/L9/autoload/l9.vim	/^function l9#loadFilesToBuffers(files)$/;"	f
l9#loadScript	bundle/L9/autoload/l9.vim	/^function l9#loadScript(text)$/;"	f
l9#modifyPathRelativeToDir	bundle/L9/autoload/l9.vim	/^function l9#modifyPathRelativeToDir(path, dir)$/;"	f
l9#moveToBufferWindowInCurrentTabpage	bundle/L9/autoload/l9.vim	/^function l9#moveToBufferWindowInCurrentTabpage(bufNr)$/;"	f
l9#moveToBufferWindowInOtherTabpage	bundle/L9/autoload/l9.vim	/^function l9#moveToBufferWindowInOtherTabpage(bufNr)$/;"	f
l9#notifyBalloonly	bundle/L9/autoload/l9.vim	/^function l9#notifyBalloonly(msg)$/;"	f
l9#notifyExternally	bundle/L9/autoload/l9.vim	/^function l9#notifyExternally(msg)$/;"	f
l9#notifyScreen	bundle/L9/autoload/l9.vim	/^function l9#notifyScreen(msg)$/;"	f
l9#notifyTmux	bundle/L9/autoload/l9.vim	/^function l9#notifyTmux(msg)$/;"	f
l9#placeSign	bundle/L9/autoload/l9.vim	/^function l9#placeSign(linehl, text, texthl, locations)$/;"	f
l9#quickfix#compareEntries	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#compareEntries(e0, e1)$/;"	f
l9#quickfix#isWindowOpened	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#isWindowOpened()$/;"	f
l9#quickfix#openIfNotEmpty	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#openIfNotEmpty(onlyRecognized, holdCursor)$/;"	f
l9#quickfix#placeSign	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#placeSign()$/;"	f
l9#quickfix#setMakeResult	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#setMakeResult(lines)$/;"	f
l9#quickfix#sort	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#sort()$/;"	f
l9#quickfix#toggleWindow	bundle/L9/autoload/l9/quickfix.vim	/^function l9#quickfix#toggleWindow()$/;"	f
l9#readFile	bundle/L9/autoload/l9.vim	/^function l9#readFile(...)$/;"	f
l9#removeIf	bundle/L9/autoload/l9.vim	/^function l9#removeIf(items, expr)$/;"	f
l9#removeLinesBetween	bundle/L9/autoload/l9.vim	/^function l9#removeLinesBetween(lines, begin, end)$/;"	f
l9#shiftWinNextTabpage	bundle/L9/autoload/l9.vim	/^function l9#shiftWinNextTabpage()$/;"	f
l9#shiftWinPrevTabpage	bundle/L9/autoload/l9.vim	/^function l9#shiftWinPrevTabpage()$/;"	f
l9#snipHead	bundle/L9/autoload/l9.vim	/^function l9#snipHead(str, len, mask)$/;"	f
l9#snipMid	bundle/L9/autoload/l9.vim	/^function l9#snipMid(str, len, mask)$/;"	f
l9#snipTail	bundle/L9/autoload/l9.vim	/^function l9#snipTail(str, len, mask)$/;"	f
l9#tempbuffer#close	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#close(bufname)$/;"	f
l9#tempbuffer#isOpen	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#isOpen(bufname)$/;"	f
l9#tempbuffer#moveTo	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#moveTo(bufname)$/;"	f
l9#tempbuffer#openReadOnly	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openReadOnly(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openScratch	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openScratch(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openWritable	bundle/L9/autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openWritable(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempvariables#end	bundle/L9/autoload/l9/tempvariables.vim	/^function l9#tempvariables#end(group)$/;"	f
l9#tempvariables#getList	bundle/L9/autoload/l9/tempvariables.vim	/^function l9#tempvariables#getList(group)$/;"	f
l9#tempvariables#set	bundle/L9/autoload/l9/tempvariables.vim	/^function l9#tempvariables#set(group, name, value)$/;"	f
l9#tempvariables#setList	bundle/L9/autoload/l9/tempvariables.vim	/^function l9#tempvariables#setList(group, variables)$/;"	f
l9#unique	bundle/L9/autoload/l9.vim	/^function l9#unique(items)$/;"	f
l9#uniqueStably	bundle/L9/autoload/l9.vim	/^function l9#uniqueStably(items)$/;"	f
l9#writeAll	bundle/L9/autoload/l9.vim	/^function l9#writeAll()$/;"	f
l9#writeFile	bundle/L9/autoload/l9.vim	/^function l9#writeFile(...)$/;"	f
l9#zip	bundle/L9/autoload/l9.vim	/^function l9#zip(items)$/;"	f
last_child	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    last_child = property(get_last_child)$/;"	v	class:Element
last_child	bundle/sparkup/sparkup	/^    last_child = property(get_last_child)$/;"	v	class:Element
last_child	bundle/sparkup/sparkup.py	/^    last_child = property(get_last_child)$/;"	v	class:Element
last_child	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    last_child = property(get_last_child)$/;"	v	class:Element
lastformat	bundle/rails.vim/autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	bundle/rails.vim/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	bundle/rails.vim/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	bundle/rails.vim/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	bundle/rails.vim/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
leader	bundle/YankRing.vim/plugin/yankring.vim	/^        let leader = g:mapleader$/;"	v
leader	bundle/YankRing.vim/plugin/yankring.vim	/^    let leader = '\\'$/;"	v
leader	bundle/YankRing.vim/plugin/yankring.vim	/^    let leader = escape(leader, '\\')$/;"	v
leave	bundle/Command-T/ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	bundle/Command-T/ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
leave	bundle/command-t/ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	bundle/command-t/ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
libEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	bundle/rails.vim/autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
linepeak	bundle/rails.vim/autoload/rails.vim	/^function! s:linepeak()$/;"	f
lines	bundle/Command-T/ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
lines	bundle/command-t/ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
list	plugin/debugger.py	/^  def list(self):$/;"	m	class:BreakPoint	access:public
listAroundFiles	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:listAroundFiles(dir)$/;"	f
list_matches	bundle/Command-T/ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
list_matches	bundle/command-t/ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
load_scripts	autoload/vundle/scripts.vim	/^func! s:load_scripts(bang)$/;"	f
load_string	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def load_string(self, str):$/;"	m	class:Parser	access:public
load_string	bundle/sparkup/sparkup	/^    def load_string(self, str):$/;"	m	class:Parser	access:public
load_string	bundle/sparkup/sparkup.py	/^    def load_string(self, str):$/;"	m	class:Parser	access:public
load_string	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def load_string(self, str):$/;"	m	class:Parser	access:public
loaded_ctags	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let loaded_ctags = 1$/;"	v
loaded_gundo	bundle/Gundo/plugin/gundo.vim	/^let loaded_gundo = 1"}}}$/;"	v
loaded_minibufexplorer	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^let loaded_minibufexplorer = 1$/;"	v
loaded_minibufexplorer	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^let loaded_minibufexplorer = 1$/;"	v
loaded_nerd_comments	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_nerdtreeproject	bundle/NERD_tree-Project/plugin/NERD_tree_project.vim	/^let loaded_nerdtreeproject = 1$/;"	v
loaded_phpfolding	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let loaded_phpfolding = 1$/;"	v
loaded_project	bundle/project.tar.gz/plugin/project.vim	/^let loaded_project=1$/;"	v
loaded_snips	bundle/snipmate.vim/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_svndiff	bundle/svndiff.vim/plugin/svndiff.vim	/^let loaded_svndiff = 1$/;"	v
loaded_taglist	bundle/taglist-plus/plugin/taglist-plus.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	bundle/taglist-plus/plugin/taglist-plus.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	bundle/taglist-plus/plugin/taglist-plus.vim	/^let loaded_taglist = 'available'$/;"	v
loaded_yankring	bundle/YankRing.vim/plugin/yankring.vim	/^let loaded_yankring = 110$/;"	v
localeEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	bundle/rails.vim/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
lock	bundle/Command-T/ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
lock	bundle/command-t/ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
log	autoload/vundle/installer.vim	/^func! s:log(msg)$/;"	f
mCommandT	bundle/Command-T/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mCommandT	bundle/command-t/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mailerEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	bundle/rails.vim/autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
main_syntax	bundle/jQuery/syntax/jquery.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	bundle/php.vim--Garvin/syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
makeAdditionalMigemoPattern	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:makeAdditionalMigemoPattern(pattern)$/;"	f
makeCtagsCmd	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:makeCtagsCmd(bufNr)$/;"	f
makeFileAbbrInfo	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:makeFileAbbrInfo(item, maxLenStats)$/;"	f
makeFuzzyMatchingExpr	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:makeFuzzyMatchingExpr(target, pattern)$/;"	f
makeItem	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:makeItem(nr)$/;"	f
makeItem	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:makeItem(tag, itemMap)$/;"	f
makeItem	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:makeItem(line)$/;"	f
makeItem	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:makeItem(line, bufnrPrev)$/;"	f
makeItem	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:makeItem(qfItem)$/;"	f
makePartialMatchingExpr	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:makePartialMatchingExpr(target, pattern)$/;"	f
makeRefiningExpr	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:makeRefiningExpr(pattern)$/;"	f
makewithruby	bundle/rails.vim/autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
map	bundle/Command-T/ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
map	bundle/SuperTab-continued./plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	bundle/SuperTab-continued./plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
map	bundle/command-t/ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
mapleader	mappings.vim	/^let mapleader=","$/;"	v
mark	plugin/debugger.py	/^  def mark(self, exp = ''):$/;"	m	class:Debugger	access:public
match_for	bundle/command-t/spec/command-t/match_spec.rb	/^  def match_for path, pattern$/;"	f
match_limit	bundle/Command-T/ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_limit	bundle/command-t/ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_text_for_idx	bundle/Command-T/ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_text_for_idx	bundle/command-t/ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_type	bundle/rails.vim/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
matchcursor	bundle/rails.vim/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matches=	bundle/Command-T/ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matches=	bundle/command-t/ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	bundle/Command-T/ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
matchinfo_t	bundle/command-t/ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon2	file:
max_score_per_char	bundle/Command-T/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
max_score_per_char	bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon2	file:	access:public
menuBufEnter	bundle/rails.vim/plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	bundle/rails.vim/plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menuPriority	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuPriority = ''$/;"	v
menuPriority	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuPriority = exists("g:yankring_menu_priority") ? yankring_menu_priority : ''$/;"	v
menuRoot	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
menuRoot	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuRoot = '&Plugin.&YankRing'$/;"	v
menuRoot	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuRoot = '&YankRing'$/;"	v
menuRoot	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuRoot = 'YankRing'$/;"	v
menuRoot	bundle/YankRing.vim/plugin/yankring.vim	/^        let menuRoot = exists("g:yankring_menu_root") ? g:yankring_menu_root : '&Plugin.&YankRing'$/;"	v
menucmd	bundle/rails.vim/plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	bundle/rails.vim/plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
metalEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	bundle/rails.vim/autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	bundle/rails.vim/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	bundle/rails.vim/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	bundle/rails.vim/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
missing	bundle/Command-T/ruby/command-t/extconf.rb	/^def missing item$/;"	f
missing	bundle/command-t/ruby/command-t/extconf.rb	/^def missing item$/;"	f
mkeep	bundle/rails.vim/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
mode	plugin/debugger.py	/^mode = 0$/;"	v
model	bundle/rails.vim/autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	bundle/rails.vim/autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
moveToOtherTabpageOpeningBuffer	bundle/L9/autoload/l9.vim	/^function s:moveToOtherTabpageOpeningBuffer(bufNr)$/;"	f
move_buf	bundle/vim-poslist/plugin/poslist.vim	/^function! s:move_buf(c)$/;"	f
move_line	bundle/vim-poslist/plugin/poslist.vim	/^function! s:move_line(c)$/;"	f
move_pos	bundle/vim-poslist/plugin/poslist.vim	/^function! s:move_pos(c)$/;"	f
multiplier	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    multiplier = 1$/;"	v	class:Token
multiplier	bundle/sparkup/sparkup	/^    multiplier = 1$/;"	v	class:Token
multiplier	bundle/sparkup/sparkup.py	/^    multiplier = 1$/;"	v	class:Token
multiplier	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    multiplier = 1$/;"	v	class:Token
name	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    name = ''$/;"	v	class:Element
name	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    name = ''$/;"	v	class:Token
name	bundle/sparkup/sparkup	/^    name = ''$/;"	v	class:Element
name	bundle/sparkup/sparkup	/^    name = ''$/;"	v	class:Token
name	bundle/sparkup/sparkup.py	/^    name = ''$/;"	v	class:Element
name	bundle/sparkup/sparkup.py	/^    name = ''$/;"	v	class:Token
name	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    name = ''$/;"	v	class:Element
name	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    name = ''$/;"	v	class:Token
never_show_dot_files	bundle/Command-T/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
never_show_dot_files	bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon2	file:	access:public
nextBufferName	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
next_sign	plugin/debugger.py	/^  def next_sign(self):$/;"	m	class:DebugUI	access:public
normal_mode	plugin/debugger.py	/^  def normal_mode(self):$/;"	m	class:DebugUI	access:public
nr2hex	bundle/gist-vim/plugin/gist.vim	/^function! s:nr2hex(nr)$/;"	f
observerEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	bundle/rails.vim/autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
onBufDelete	bundle/L9/autoload/l9/tempbuffer.vim	/^function s:onBufDelete(bufname)$/;"	f
onBufWriteCmd	bundle/L9/autoload/l9/tempbuffer.vim	/^function s:onBufWriteCmd(bufname)$/;"	f
onCommandPre	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:onCommandPre()$/;"	f
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:HelpWindow	access:public
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:LogWindow	access:public
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:StackWindow	access:public
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:TraceWindow	access:public
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:VimWindow	access:public
on_create	plugin/debugger.py	/^  def on_create(self):$/;"	m	class:WatchWindow	access:public
openBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_selection	bundle/Command-T/ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
open_selection	bundle/command-t/ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
opening_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    opening_tag = None$/;"	v	class:Element
opening_tag	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    opening_tag = None$/;"	v	class:Token
opening_tag	bundle/sparkup/sparkup	/^    opening_tag = None$/;"	v	class:Element
opening_tag	bundle/sparkup/sparkup	/^    opening_tag = None$/;"	v	class:Token
opening_tag	bundle/sparkup/sparkup.py	/^    opening_tag = None$/;"	v	class:Element
opening_tag	bundle/sparkup/sparkup.py	/^    opening_tag = None$/;"	v	class:Token
opening_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    opening_tag = None$/;"	v	class:Element
opening_tag	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    opening_tag = None$/;"	v	class:Token
opfunc	bundle/surround.vim/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	bundle/surround.vim/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
options	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    options = None$/;"	v	class:Parser
options	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    options = {$/;"	v	class:Options
options	bundle/sparkup/sparkup	/^    options = None$/;"	v	class:Parser
options	bundle/sparkup/sparkup	/^    options = {$/;"	v	class:Options
options	bundle/sparkup/sparkup-unittest.py	/^    options = {$/;"	v	class:SparkupTest
options	bundle/sparkup/sparkup.py	/^    options = None$/;"	v	class:Parser
options	bundle/sparkup/sparkup.py	/^    options = {$/;"	v	class:Options
options	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    options = None$/;"	v	class:Parser
options	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    options = {$/;"	v	class:Options
opts	bundle/rails.vim/autoload/rails.vim	/^function! s:opts()$/;"	f
out_file	bundle/php.vim--Garvin/php_vimgen.php	/^$out_file = '~\/php_vimgen_out.vim'; \/\/ Pick your output file & location.$/;"	v
out_str	bundle/php.vim--Garvin/php_vimgen.php	/^$out_str = '';$/;"	v
padding_for_selected_match	bundle/Command-T/ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
padding_for_selected_match	bundle/command-t/ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
parent	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    parent = None$/;"	v	class:Element
parent	bundle/sparkup/sparkup	/^    parent = None$/;"	v	class:Element
parent	bundle/sparkup/sparkup.py	/^    parent = None$/;"	v	class:Element
parent	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    parent = None$/;"	v	class:Element
parse	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def parse(self, str=None, ret=None):$/;"	m	class:Router	access:public
parse	bundle/sparkup/sparkup	/^    def parse(self, str=None, ret=None):$/;"	m	class:Router	access:public
parse	bundle/sparkup/sparkup.py	/^    def parse(self, str=None, ret=None):$/;"	m	class:Router	access:public
parse	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def parse(self, str=None, ret=None):$/;"	m	class:Router	access:public
parseChangesLine	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^function s:parseChangesLine(line)$/;"	f
parseHelpTagEntry	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:parseHelpTagEntry(line, tagFile)$/;"	f
parseHelpTagFiles	bundle/FuzzyFinder/autoload/fuf/help.vim	/^function s:parseHelpTagFiles(tagFiles, key)$/;"	f
parseJumpsLine	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^function s:parseJumpsLine(line, bufnrPrev)$/;"	f
parseJumpsLine	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^function s:parseJumpsLine(line)$/;"	f
parseTagFiles	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
parseTagFiles	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
parseTagLine	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^function s:parseTagLine(line)$/;"	f
parse_buffers_info	bundle/restart.vim/plugin/restart.vim	/^function! s:parse_buffers_info() "{{{$/;"	f
parse_name	autoload/vundle/config.vim	/^func! s:parse_name(arg)$/;"	f
parse_options	autoload/vundle/config.vim	/^func! s:parse_options(opts)$/;"	f
parser	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    parser = None$/;"	v	class:Element
parser	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    parser = None$/;"	v	class:Token
parser	bundle/sparkup/sparkup	/^    parser = None$/;"	v	class:Element
parser	bundle/sparkup/sparkup	/^    parser = None$/;"	v	class:Token
parser	bundle/sparkup/sparkup.py	/^    parser = None$/;"	v	class:Element
parser	bundle/sparkup/sparkup.py	/^    parser = None$/;"	v	class:Token
parser	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    parser = None$/;"	v	class:Element
parser	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    parser = None$/;"	v	class:Token
path=	bundle/Command-T/ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def path= str$/;"	f	class:CommandT.FileScanner
path=	bundle/command-t/ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	bundle/command-t/ruby/command-t/scanner.rb	/^    def path= str$/;"	f	class:CommandT.Scanner
path_excluded?	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.FileScanner
path_excluded?	bundle/command-t/ruby/command-t/scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.Scanner
pathjoin	bundle/rails.vim/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
paths	bundle/Command-T/ruby/command-t/scanner/buffer_scanner.rb	/^    def paths$/;"	f	class:CommandT.BufferScanner
paths	bundle/Command-T/ruby/command-t/scanner/file_scanner.rb	/^    def paths$/;"	f	class:CommandT.FileScanner
paths	bundle/command-t/ruby/command-t/scanner.rb	/^    def paths$/;"	f	class:CommandT.Scanner
pathsplit	bundle/rails.vim/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pattern	bundle/cucumber.zip/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
php_sync_method	bundle/PHP-correct-Indenting/indent/php.vim	/^let php_sync_method = 0$/;"	v
php_sync_method	bundle/php.vim--Garvin/syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	bundle/php.vim--Garvin/syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
phpcomplete#CompletePHP	bundle/phpcomplete.vim/ftplugin/phpcomplete.vim	/^function! phpcomplete#CompletePHP(findstart, base)$/;"	f
phpcomplete#GetClassContents	bundle/phpcomplete.vim/ftplugin/phpcomplete.vim	/^function! phpcomplete#GetClassContents(file, name) " {{{$/;"	f
phpcomplete#GetClassLocation	bundle/phpcomplete.vim/ftplugin/phpcomplete.vim	/^function! phpcomplete#GetClassLocation(classname) " {{{$/;"	f
phpcomplete#GetClassName	bundle/phpcomplete.vim/ftplugin/phpcomplete.vim	/^function! phpcomplete#GetClassName(scontext) " {{{$/;"	f
phpcomplete#LoadData	bundle/phpcomplete.vim/ftplugin/phpcomplete.vim	/^function! phpcomplete#LoadData() " {{{$/;"	f
plugin	bundle/vim-poslist/plugin/poslist.vim	/^augroup plugin-poslist$/;"	a
pluginEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	bundle/rails.vim/autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	bundle/rails.vim/autoload/rails.vim	/^function! s:pop_command()$/;"	f
populate	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    populate = False$/;"	v	class:Element
populate	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    populate = False$/;"	v	class:Token
populate	bundle/sparkup/sparkup	/^    populate = False$/;"	v	class:Element
populate	bundle/sparkup/sparkup	/^    populate = False$/;"	v	class:Token
populate	bundle/sparkup/sparkup.py	/^    populate = False$/;"	v	class:Element
populate	bundle/sparkup/sparkup.py	/^    populate = False$/;"	v	class:Token
populate	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    populate = False$/;"	v	class:Element
populate	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    populate = False$/;"	v	class:Token
prefix	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    prefix = ''$/;"	v	class:Parser
prefix	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    prefix = None$/;"	v	class:Element
prefix	bundle/sparkup/sparkup	/^    prefix = ''$/;"	v	class:Parser
prefix	bundle/sparkup/sparkup	/^    prefix = None$/;"	v	class:Element
prefix	bundle/sparkup/sparkup.py	/^    prefix = ''$/;"	v	class:Parser
prefix	bundle/sparkup/sparkup.py	/^    prefix = None$/;"	v	class:Element
prefix	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    prefix = ''$/;"	v	class:Parser
prefix	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    prefix = None$/;"	v	class:Element
prepare	plugin/debugger.py	/^  def prepare(self):$/;"	m	class:VimWindow	access:public
prephelp	bundle/rails.vim/autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_active_worker_keys	bundle/L9/autoload/l9/async.py	/^    def print_active_worker_keys(self):$/;"	m	class:Asyncer	access:public
print_error	bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_error	bundle/command-t/ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_match	bundle/command-t/ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_matches	bundle/command-t/ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	bundle/Command-T/ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	bundle/command-t/ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
print_output	bundle/L9/autoload/l9/async.py	/^    def print_output(self, var_key):$/;"	m	class:Asyncer	access:public
print_worker_keys	bundle/L9/autoload/l9/async.py	/^    def print_worker_keys(self):$/;"	m	class:Asyncer	access:public
process	bundle/surround.vim/plugin/surround.vim	/^function! s:process(string)$/;"	f
promptToDelBuffer	bundle/The-NERD-tree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
property_get	plugin/debugger.py	/^  def property_get(self, name = ''):$/;"	m	class:Debugger	access:public
push_chdir	bundle/rails.vim/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
put	bundle/L9/autoload/l9/async.py	/^    def put(self, executor):$/;"	m	class:Worker	access:public
putCursorInTreeWin	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	bundle/Command-T/ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
pwd	bundle/command-t/ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
quicklaunch	bundle/vim-quickrun/plugin/quicklaunch.vim	/^function! s:quicklaunch(no)$/;"	f
quicklaunch_list	bundle/vim-quickrun/plugin/quicklaunch.vim	/^function! s:quicklaunch_list()$/;"	f
quickrun#_result	bundle/vim-quickrun/autoload/quickrun.vim	/^function! quickrun#_result(key, ...)  " {{{2$/;"	f
quickrun#complete	bundle/vim-quickrun/autoload/quickrun.vim	/^function! quickrun#complete(lead, cmd, pos)  " {{{2$/;"	f
quickrun#execute	bundle/vim-quickrun/autoload/quickrun.vim	/^function! quickrun#execute(...)  " {{{2$/;"	f
quickrun#run	bundle/vim-quickrun/autoload/quickrun.vim	/^function! quickrun#run(args)  " {{{2$/;"	f
quit	plugin/debugger.py	/^  def quit(self):$/;"	m	class:Debugger	access:public
r	ftplugin/vundle.vim	/^nnoremap <buffer> r :Bundles $/;"	m
rails#STATUSLINE	bundle/rails.vim/autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#app	bundle/rails.vim/autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	bundle/rails.vim/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	bundle/rails.vim/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	bundle/rails.vim/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	bundle/rails.vim/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	bundle/rails.vim/autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	bundle/rails.vim/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	bundle/rails.vim/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	bundle/rails.vim/autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	bundle/rails.vim/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAbolish	bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	bundle/rails.vim/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	bundle/rails.vim/plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
readable_app	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	bundle/rails.vim/autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	bundle/rails.vim/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
receive_vimproc_result	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:receive_vimproc_result(key)  " {{{2$/;"	f
record_output	bundle/L9/autoload/l9/async.py	/^    def record_output(self, line):$/;"	m	class:Worker	access:public
recursive_match	bundle/Command-T/ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f	signature:(matchinfo_t *m, long str_idx, long abbrev_idx, long last_idx, double score)
recursive_match	bundle/command-t/ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f	signature:(matchinfo_t *m, long str_idx, long abbrev_idx, long last_idx, double score)
recv	plugin/debugger.py	/^  def recv(self, count=10000):$/;"	m	class:Debugger	access:public
recv_body	plugin/debugger.py	/^  def recv_body(self, to_recv):$/;"	m	class:DbgProtocol	access:public
recv_length	plugin/debugger.py	/^  def recv_length(self):$/;"	m	class:DbgProtocol	access:public
recv_msg	plugin/debugger.py	/^  def recv_msg(self):$/;"	m	class:DbgProtocol	access:public
recv_null	plugin/debugger.py	/^  def recv_null(self):$/;"	m	class:DbgProtocol	access:public
redraw	bundle/Command-T/ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
redraw	bundle/command-t/ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
redraw	bundle/surround.vim/plugin/surround.vim	/^function! s:redraw()$/;"	f
refreshCurrent	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
register	bundle/vim-quickrun/autoload/quickrun.vim	/^function! s:register(runner)  " {{{2$/;"	f
registerCoverage	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^function s:registerCoverage()$/;"	f
register_for_key_presses	bundle/Command-T/ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
register_for_key_presses	bundle/command-t/ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
reindent	bundle/surround.vim/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relative_path_under_working_directory	bundle/Command-T/ruby/command-t/vim/path_utilities.rb	/^      def relative_path_under_working_directory path$/;"	f	class:CommandT.VIM.PathUtilities
relative_path_under_working_directory	bundle/command-t/ruby/command-t/controller.rb	/^    def relative_path_under_working_directory path$/;"	f	class:CommandT.Controller
relativize_path	bundle/command-t/spec/vim_formatter.rb	/^        def relativize_path path$/;"	f	class:Spec.Runner.Formatter.VimFormatter
relglob	bundle/rails.vim/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
reload_bundles	autoload/vundle/installer.vim	/^func! s:reload_bundles()$/;"	f
remove	plugin/debugger.py	/^  def remove(self, bno):$/;"	m	class:BreakPoint	access:public
removeItemFromCache	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:removeItemFromCache(word)$/;"	f
render	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def render(self):$/;"	m	class:Element	access:public
render	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def render(self):$/;"	m	class:Parser	access:public
render	bundle/sparkup/sparkup	/^    def render(self):$/;"	m	class:Element	access:public
render	bundle/sparkup/sparkup	/^    def render(self):$/;"	m	class:Parser	access:public
render	bundle/sparkup/sparkup.py	/^    def render(self):$/;"	m	class:Element	access:public
render	bundle/sparkup/sparkup.py	/^    def render(self):$/;"	m	class:Parser	access:public
render	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def render(self):$/;"	m	class:Element	access:public
render	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def render(self):$/;"	m	class:Parser	access:public
renderBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
renewCachesOfAllModes	bundle/FuzzyFinder/plugin/fuf.vim	/^function s:renewCachesOfAllModes()$/;"	f
repeat	bundle/repeat.vim/plugin/repeat.vim	/^function! s:repeat(count)$/;"	f
repeat	bundle/surround.vim/plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
repeat#set	bundle/repeat.vim/plugin/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeatPlugin	bundle/repeat.vim/plugin/repeat.vim	/^augroup repeatPlugin$/;"	a
repo	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_bare	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_dir	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head_ref	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
required	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    required = {$/;"	v	class:HtmlDialect
required	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    required = {}$/;"	v	class:Dialect
required	bundle/sparkup/sparkup	/^    required = {$/;"	v	class:HtmlDialect
required	bundle/sparkup/sparkup	/^    required = {}$/;"	v	class:Dialect
required	bundle/sparkup/sparkup.py	/^    required = {$/;"	v	class:HtmlDialect
required	bundle/sparkup/sparkup.py	/^    required = {}$/;"	v	class:Dialect
required	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    required = {$/;"	v	class:HtmlDialect
required	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    required = {}$/;"	v	class:Dialect
resetomnicomplete	bundle/rails.vim/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restart	bundle/restart.vim/plugin/restart.vim	/^    augroup restart$/;"	a
restart	bundle/restart.vim/plugin/restart.vim	/^function! s:restart(bang) "{{{$/;"	f
restore	bundle/Command-T/ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restore	bundle/command-t/ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restore_window_dimensions	bundle/Command-T/ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
restore_window_dimensions	bundle/command-t/ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
retval	bundle/project.tar.gz/plugin/project.vim	/^        let retval=b:fnamelist$/;"	v
revealBookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rgb	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb_color	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_number	bundle/twilight256.vim/colors/twilight256.vim	/^    fun <SID>rgb_number(x)$/;"	f
root	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    root = None $/;"	v	class:Parser
root	bundle/sparkup/sparkup	/^    root = None $/;"	v	class:Parser
root	bundle/sparkup/sparkup.py	/^    root = None $/;"	v	class:Parser
root	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    root = None $/;"	v	class:Parser
router	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    router = 1$/;"	v	class:Options
router	bundle/sparkup/sparkup	/^    router = 1$/;"	v	class:Options
router	bundle/sparkup/sparkup.py	/^    router = 1$/;"	v	class:Options
router	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    router = 1$/;"	v	class:Options
rquote	bundle/rails.vim/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
rtp_add	autoload/vundle/config.vim	/^func! s:rtp_add(dir)$/;"	f
rtp_add_a	autoload/vundle/config.vim	/^func! s:rtp_add_a()$/;"	f
rtp_rm	autoload/vundle/config.vim	/^func! s:rtp_rm(dir)$/;"	f
rtp_rm_a	autoload/vundle/config.vim	/^func! s:rtp_rm_a()$/;"	f
ruby_inspect	bundle/Command-T/ruby/command-t/ext.h	36;"	d
ruby_inspect	bundle/command-t/ruby/command-t/ext.h	36;"	d
rubyfiles	bundle/command-t/Makefile	/^rubyfiles   := $(shell find ruby -name '*.rb')$/;"	m
run	bundle/L9/autoload/l9/async.py	/^    def run(self):$/;"	m	class:Worker	access:public
run	bundle/sparkup/sparkup-unittest.py	/^    def run(self):$/;"	m	class:SparkupTest	access:public
run	plugin/debugger.py	/^  def run(self):$/;"	m	class:Debugger	access:public
s	bundle/sparkup/sparkup-unittest.py	/^    s = SparkupTest()$/;"	v	class:SparkupTest
s	bundle/surround.vim/plugin/surround.vim	/^      vmap  s    <Plug>Vsurround$/;"	m
s:ABBR_SNIP_MASK	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:ABBR_SNIP_MASK = '...'$/;"	v
s:ASYNC_PY_PATH	bundle/L9/autoload/l9/async.vim	/^let s:ASYNC_PY_PATH = fnamemodify(expand('<sfile>:p:h'), ':p') . 'async.py'$/;"	v
s:Bookmark	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:DATA_FILE_VERSION	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:DATA_FILE_VERSION = 400$/;"	v
s:FALSE	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:FALSE = 0$/;"	v
s:FOLD_WITHOUT_PHPDOC	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:FOLD_WITHOUT_PHPDOC = 2$/;"	v
s:FOLD_WITH_PHPDOC	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:FOLD_WITH_PHPDOC = 1$/;"	v
s:FUF_BUF_NAME	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:FUF_BUF_NAME = '[fuf]'$/;"	v
s:KeyMap	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:L9_VERSION_CURRENT	bundle/L9/autoload/l9.vim	/^let s:L9_VERSION_CURRENT  = 101$/;"	v
s:L9_VERSION_PASSABLE	bundle/L9/autoload/l9.vim	/^let s:L9_VERSION_PASSABLE = 101$/;"	v
s:MODE_CREATE_FOLDS	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:MODE_CREATE_FOLDS = 1$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/file.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/help.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/line.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_REMEMBER_FOLD_SETTINGS	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:MODE_REMEMBER_FOLD_SETTINGS = 2$/;"	v
s:MenuController	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:OPEN_TYPE_CURRENT	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:OPEN_TYPE_CURRENT = 1$/;"	v
s:OPEN_TYPE_DELETE	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	bundle/FuzzyFinder/autoload/fuf/line.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_EXPAND	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^let s:OPEN_TYPE_EXPAND = -1$/;"	v
s:OPEN_TYPE_SPLIT	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:OPEN_TYPE_SPLIT   = 2$/;"	v
s:OPEN_TYPE_TAB	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:OPEN_TYPE_TAB     = 4$/;"	v
s:OPEN_TYPE_VSPLIT	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:OPEN_TYPE_VSPLIT  = 3$/;"	v
s:PHP_startindenttag	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:PHP_startindenttag = '<?\\%(.*?>\\)\\@!\\|<script[^>]*>\\%(.*<\\\/script>\\)\\@!'$/;"	v
s:Path	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Runner	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:Runner = {}  " {{{1$/;"	v
s:SEARCH_PAIR_IMMEDIATELY	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:SEARCH_PAIR_IMMEDIATELY = 2$/;"	v
s:SEARCH_PAIR_START_FIRST	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:SEARCH_PAIR_START_FIRST = 1$/;"	v
s:TEMP_VARIABLES_GROUP	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:TEMP_VARIABLES_GROUP = expand('<sfile>:p')$/;"	v
s:TEMP_VARIABLES_GROUP	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^let s:TEMP_VARIABLES_GROUP = expand('<sfile>:p')$/;"	v
s:TRUE	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:TRUE = 1$/;"	v
s:TabularCommands	bundle/Tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
s:Tlist_Skip_Refresh	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:VERSION_FACTOR	bundle/L9/autoload/l9.vim	/^let s:VERSION_FACTOR = str2float('0.01')$/;"	v
s:abstract_prototype	bundle/fugitive.vim/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:app_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	bundle/rails.vim/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:auto_break_end	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:auto_break_end = '== break points end =='$/;"	v
s:auto_watch_end	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:auto_watch_end = '== auto watch end =='$/;"	v
s:auto_width	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let s:auto_width = 0$/;"	v
s:auto_width	bundle/taglist-plus/plugin/taglist-plus.vim	/^        let s:auto_width = 1$/;"	v
s:autocommands_done	bundle/Tagbar/plugin/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:autoresetoptions	bundle/PHP-correct-Indenting/indent/php.vim	/^    let s:autoresetoptions = 1$/;"	v
s:autoresetoptions	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:autoresetoptions = 0$/;"	v
s:available_vimproc	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:available_vimproc = globpath(&runtimepath, 'autoload\/vimproc.vim') != ''$/;"	v
s:blockstart	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:blockstart = '\\%(\\%(\\%(}\\s*\\)\\=else\\%(\\s\\+\\)\\=\\)\\=if\\>\\|else\\>\\|while\\>\\|switch\\>\\|case\\>\\|default\\>\\|for\\%(each\\)\\=\\>\\|declare\\>\\|class\\>\\|interface\\>\\|abstract\\>\\|try\\>\\|catch\\>\\)'$/;"	v
s:brackets	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:brackets = '\\(\\s*\\(\\[\\s*\\]\\)\\)\\='$/;"	v
s:bufTimes	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^let s:bufTimes = {}$/;"	v
s:bufferCursorPosMap	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:bufferCursorPosMap = {}$/;"	v
s:buffer_prototype	bundle/fugitive.vim/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:bufprefix	bundle/gist-vim/plugin/gist.vim	/^let s:bufprefix = 'gist' . (has('unix') ? ':' : '_')$/;"	v
s:bundle	autoload/vundle/config.vim	/^let s:bundle = {}$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.breakpoints = get(s:c, 'breakpoints', {})$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.cmd_nr = get(s:c,'cmd_nr',0)$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.max_children = get(s:c, 'max_depth', 5)$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.max_depth = get(s:c, 'max_depth', 5)$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.opts = get(s:c, 'opts', {'port': 9000})$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.request_handlers = get(s:c, 'request_handlers', {})$/;"	v
s:c	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^let s:c.stop_first_line = get(s:c, 'stop_first_line', 0)$/;"	v
s:cache_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:clickmap	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^  let s:clickmap = ':if bufname("%") == "-MiniBufExplorer-" <bar> call <SID>MBEClick() <bar> endif <CR>'$/;"	v
s:clickmap	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^  let s:clickmap = ':if bufname("%") == "-MiniBufExplorer-" <bar> call <SID>MBEClick() <bar> endif <CR>'$/;"	v
s:commands	bundle/fugitive.vim/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:cpo_save	bundle/PHPcollection/compiler/cphp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	bundle/rails.vim/autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	bundle/surround.vim/plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:cpo_save = &cpo$/;"	v
s:dataMap	bundle/L9/autoload/l9/tempbuffer.vim	/^let s:dataMap = {}$/;"	v
s:debugIndex	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^let s:debugIndex = 0 $/;"	v
s:debugIndex	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^let s:debugIndex = 0 $/;"	v
s:defaultORcase	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:defaultORcase = '^\\s*\\%(default\\|case\\).*:'$/;"	v
s:delimiterMap	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	bundle/snipmate.vim/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	bundle/snipmate.vim/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:efm_backtrace	bundle/rails.vim/autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:emapleader	bundle/Align/plugin/AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:endline	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:endline= '\\s*\\%(\/\/.*\\|#.*\\|\/\\*.*\\*\/\\s*\\)\\=$'$/;"	v
s:escape_chars	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:file	bundle/rails.vim/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:firstline	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:firstline = 0$/;"	v
s:firstmenu	bundle/Align/plugin/AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:formatelempat	bundle/Tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
s:funcname	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:funcname  = ''$/;"	v
s:getter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:getter    = 0 $/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/bookmarkdir.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/bookmarkfile.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/buffertag.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/callbackfile.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/callbackitem.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/changelist.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/coveragefile.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/dir.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/file.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/givencmd.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/givendir.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/givenfile.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/help.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/jumplist.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/line.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/quickfix.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/tag.vim	/^let s:handler = {}$/;"	v
s:handler	bundle/FuzzyFinder/autoload/fuf/taggedfile.vim	/^let s:handler = {}$/;"	v
s:handlerBase	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:handlerBase = {}$/;"	v
s:has_supported_python	bundle/Gundo/plugin/gundo.vim	/^    let s:has_supported_python = 0$/;"	v
s:has_supported_python	bundle/Gundo/plugin/gundo.vim	/^    let s:has_supported_python = 1$/;"	v
s:indent	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:indent    = ''$/;"	v
s:is_win	bundle/restart.vim/plugin/restart.vim	/^let s:is_win = has('win16') || has('win32') || has('win64')$/;"	v
s:is_win	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:keepcpo	bundle/Align/autoload/Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	bundle/Align/autoload/AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	bundle/Align/plugin/AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	bundle/Align/plugin/AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	bundle/Align/plugin/cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:key_mapping_done	bundle/Tagbar/plugin/tagbar.vim	/^let s:key_mapping_done  = 0$/;"	v
s:lastline	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:lastline  = 0$/;"	v
s:lenSpaceStr	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:m	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^    let  s:m = ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>'$/;"	v
s:m	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^    let  s:m = s:m . s:clickmap$/;"	v
s:m	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^    let  s:m = s:m . substitute(substitute(maparg('<LEFTMOUSE>', 'n'), '|', '<bar>', 'g'), '\\c^<LEFTMOUSE>', '', '')$/;"	v
s:m	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^    let  s:m = ':nnoremap <silent> <LEFTMOUSE> <LEFTMOUSE>'$/;"	v
s:m	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^    let  s:m = s:m . s:clickmap$/;"	v
s:m	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^    let  s:m = s:m . substitute(substitute(maparg('<LEFTMOUSE>', 'n'), '|', '<bar>', 'g'), '\\c^<LEFTMOUSE>', '', '')$/;"	v
s:mapleader	bundle/Align/plugin/AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:maxTabWidth	bundle/minibufexpl.vim/plugin/minibufexpl.vim	/^let s:maxTabWidth = 0 $/;"	v
s:maxTabWidth	bundle/minibufexplorerpp/plugin/minibufexplpp.vim	/^let s:maxTabWidth = 0 $/;"	v
s:menu_char_prefix	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:menu_char_prefix =$/;"	v
s:modeNames	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:modeNames = []$/;"	v
s:modes	bundle/SuperTab-continued./plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	bundle/SuperTab-continued./plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:modifier	bundle/Align/plugin/cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	bundle/Align/plugin/cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:next_buffer_number	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:notPhpHereDoc	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:notPhpHereDoc = '\\%(break\\|return\\|continue\\|exit\\|else\\)'$/;"	v
s:old_cpo	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:oneTimeVariables	bundle/FuzzyFinder/autoload/fuf.vim	/^let s:oneTimeVariables = []$/;"	v
s:origMap	bundle/L9/autoload/l9/tempvariables.vim	/^let s:origMap = {}$/;"	v
s:phpgetset_getterTemplate	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_getterTemplate = $/;"	v
s:phpgetset_getterTemplate	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_getterTemplate = b:phpgetset_getterTemplate$/;"	v
s:phpgetset_insertPosition	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_insertPosition = 0$/;"	v
s:phpgetset_insertPosition	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_insertPosition = b:phpgetset_insertPosition$/;"	v
s:phpgetset_setterTemplate	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_setterTemplate = $/;"	v
s:phpgetset_setterTemplate	bundle/php_getset.vim/ftplugin/php_getset.vim	/^  let s:phpgetset_setterTemplate = b:phpgetset_setterTemplate$/;"	v
s:phpname	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:phpname = '[a-zA-Z_$][a-zA-Z0-9_$]*'$/;"	v
s:python_loaded	bundle/vim-quickrun/autoload/quickrun.vim	/^  let s:python_loaded = 1$/;"	v
s:python_loaded	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:python_loaded = 0$/;"	v
s:readable_prototype	bundle/rails.vim/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:repo_prototype	bundle/fugitive.vim/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	bundle/fugitive.vim/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:ruler	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let s:ruler = ''$/;"	v
s:runners	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:runners = {}  " Store for running runners.$/;"	v
s:running_windows	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	bundle/SuperTab-continued./plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	bundle/Tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/restart.vim/plugin/restart.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-poslist/autoload/unite/sources/poslist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-poslist/plugin/poslist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-quickrun/autoload/quickrun.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-quickrun/plugin/quicklaunch.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-quickrun/plugin/quickrun.vim	/^let s:save_cpo = &cpo$/;"	v
s:savecpo	bundle/Tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	bundle/Tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:searchpairflags	bundle/PHP-correct-Indenting/indent/php.vim	/^let s:searchpairflags = 'bWr'$/;"	v
s:setter	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:setter    = 0$/;"	v
s:shade_hl_defaults	bundle/EasyMotion/plugin/EasyMotion.vim	/^		let s:shade_hl_defaults = {$/;"	v
s:sid	bundle/rails.vim/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:snippets	bundle/snipmate.vim/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:source	bundle/vim-poslist/autoload/unite/sources/poslist.vim	/^let s:source = {$/;"	v
s:spaceStr	bundle/The-NERD-Commenter/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:synIDattr_exists	bundle/phpfolding.vim/plugin/phpfolding.vim	/^let s:synIDattr_exists = exists('*synIDattr')$/;"	v
s:tabHelp	bundle/SuperTab-continued./plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:target_hl_defaults	bundle/EasyMotion/plugin/EasyMotion.vim	/^		let s:target_hl_defaults = {$/;"	v
s:timerData	bundle/L9/plugin/l9.vim	/^  let s:timerData = []$/;"	v
s:timerTagMaxLen	bundle/L9/plugin/l9.vim	/^  let s:timerTagMaxLen = 0$/;"	v
s:title_tag_name	bundle/ctags.vim--Johnson/plugin/ctags.vim	/^let s:title_tag_name = ''$/;"	v
s:tlist_app_name	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function;v:variable'$/;"	v
s:tlist_def_lisp_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	bundle/taglist-plus/plugin/taglist-plus.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	bundle/taglist-plus/plugin/taglist-plus.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	bundle/taglist-plus/plugin/taglist-plus.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:type_init_done	bundle/Tagbar/plugin/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	bundle/SuperTab-continued./plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	bundle/SuperTab-continued./plugin/supertab.vim	/^  let s:types =$/;"	v
s:variable	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:variable = '\\(\\s*\\)\\(\\(var\\s\\+\\)*\\)\\$\\(' . s:phpname . '\\)\\s*\\(;\\|=[^;]\\+;\\)'$/;"	v
s:varname	bundle/php_getset.vim/ftplugin/php_getset.vim	/^let s:varname   = ''$/;"	v
s:view_types	bundle/rails.vim/autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:window_expanded	bundle/Tagbar/plugin/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:yr_buffer_id	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_buffer_id         = -1$/;"	v
s:yr_buffer_last	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_buffer_last       = -1$/;"	v
s:yr_buffer_last_winnr	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_buffer_last_winnr = -1$/;"	v
s:yr_buffer_name	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_buffer_name       = '[YankRing]'$/;"	v
s:yr_has_voperator	bundle/YankRing.vim/plugin/yankring.vim	/^    let s:yr_has_voperator = 1$/;"	v
s:yr_has_voperator	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_has_voperator     = 0$/;"	v
s:yr_history_file_v1	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_file_v1   = $/;"	v
s:yr_history_file_v2	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_file_v2   = $/;"	v
s:yr_history_last_upd	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_last_upd  = 0$/;"	v
s:yr_history_v1_nl	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_v1_nl     = '@@@'$/;"	v
s:yr_history_v1_nl_pat	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_v1_nl_pat = '\\%(\\\\\\)\\@<!@@@'$/;"	v
s:yr_history_v2_nl	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_v2_nl     = "\\2" " Use double quotes for a special character$/;"	v
s:yr_history_v2_nl_pat	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_v2_nl_pat = "\\2"$/;"	v
s:yr_history_version	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_history_version   = 'v2'$/;"	v
s:yr_maps_created	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_maps_created      = 0$/;"	v
s:yr_maps_created_zap	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_maps_created_zap  = 0$/;"	v
s:yr_remove_omap_dot	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_remove_omap_dot   = 0$/;"	v
s:yr_search	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_search            = ''$/;"	v
s:yr_winsize_chgd	bundle/YankRing.vim/plugin/yankring.vim	/^let s:yr_winsize_chgd      = 0$/;"	v
sanitize_path_string	bundle/Command-T/ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
sanitize_path_string	bundle/command-t/ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
save	bundle/Command-T/ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
save	bundle/command-t/ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_current_pos	bundle/vim-poslist/plugin/poslist.vim	/^function! s:save_current_pos()$/;"	f
save_window_values	bundle/restart.vim/plugin/restart.vim	/^function! s:save_window_values() "{{{$/;"	f
scanlineforuris	bundle/rails.vim/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scoreBoundaryMatching	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:scoreBoundaryMatching(wordForBoundary, pattern, exprBoundary)$/;"	f
scoreSequentialMatching	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:scoreSequentialMatching(word, pattern)$/;"	f
scrub	bundle/rails.vim/autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
select	bundle/Command-T/ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select	bundle/command-t/ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_next	bundle/Command-T/ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	bundle/Command-T/ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_next	bundle/command-t/ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	bundle/command-t/ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	bundle/Command-T/ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	bundle/Command-T/ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
select_prev	bundle/command-t/ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	bundle/command-t/ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selection	bundle/Command-T/ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selection	bundle/command-t/ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selectiveexpand	bundle/rails.vim/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
send	plugin/debugger.py	/^  def send(self, msg):$/;"	m	class:Debugger	access:public
send_command	plugin/debugger.py	/^  def send_command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger	access:public
send_msg	plugin/debugger.py	/^  def send_msg(self, cmd):$/;"	m	class:DbgProtocol	access:public
setAbbrWithFileAbbrData	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:setAbbrWithFileAbbrData(item, snippedHeads)$/;"	f
setRanks	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:setRanks(item, pattern, exprBoundary, stats)$/;"	f
set_bool	bundle/Command-T/ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_bool	bundle/command-t/ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_highlight	plugin/debugger.py	/^  def set_highlight(self):$/;"	m	class:DebugUI	access:public
set_number	bundle/Command-T/ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_number	bundle/command-t/ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_srcview	plugin/debugger.py	/^  def set_srcview(self, file, line):$/;"	m	class:DebugUI	access:public
set_status	bundle/Command-T/ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_status	bundle/command-t/ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_file_finder	bundle/Command-T/ruby/command-t/controller.rb	/^    def set_up_file_finder$/;"	f	class:CommandT.Controller
set_up_finder	bundle/command-t/ruby/command-t/controller.rb	/^    def set_up_finder$/;"	f	class:CommandT.Controller
set_up_max_height	bundle/Command-T/ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
set_up_max_height	bundle/command-t/ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
setid	plugin/debugger.py	/^  def setid(self, bno, id):$/;"	m	class:BreakPoint	access:public
setopt	bundle/rails.vim/autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setupStatusline	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
shellesc	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellescape	bundle/restart.vim/plugin/restart.vim	/^function! s:shellescape(...) "{{{$/;"	f
shellslash	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:shellslash(path)$/;"	f
short_tags	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    short_tags = ($/;"	v	class:HtmlDialect
short_tags	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    short_tags = ()$/;"	v	class:Dialect
short_tags	bundle/sparkup/sparkup	/^    short_tags = ($/;"	v	class:HtmlDialect
short_tags	bundle/sparkup/sparkup	/^    short_tags = ()$/;"	v	class:Dialect
short_tags	bundle/sparkup/sparkup.py	/^    short_tags = ($/;"	v	class:HtmlDialect
short_tags	bundle/sparkup/sparkup.py	/^    short_tags = ()$/;"	v	class:Dialect
short_tags	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    short_tags = ($/;"	v	class:HtmlDialect
short_tags	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    short_tags = ()$/;"	v	class:Dialect
shortcuts	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    shortcuts = {$/;"	v	class:HtmlDialect
shortcuts	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    shortcuts = {}$/;"	v	class:Dialect
shortcuts	bundle/sparkup/sparkup	/^    shortcuts = {$/;"	v	class:HtmlDialect
shortcuts	bundle/sparkup/sparkup	/^    shortcuts = {}$/;"	v	class:Dialect
shortcuts	bundle/sparkup/sparkup.py	/^    shortcuts = {$/;"	v	class:HtmlDialect
shortcuts	bundle/sparkup/sparkup.py	/^    shortcuts = {}$/;"	v	class:Dialect
shortcuts	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    shortcuts = {$/;"	v	class:HtmlDialect
shortcuts	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    shortcuts = {}$/;"	v	class:Dialect
show	bundle/Command-T/ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
show	bundle/command-t/ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
show	bundle/command-t/ruby/command-t/stub.rb	/^    def show$/;"	f	class:CommandT.Stub
showMenu	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
show_buffer_finder	bundle/Command-T/ruby/command-t/controller.rb	/^    def show_buffer_finder$/;"	f	class:CommandT.Controller
show_cursor	bundle/Command-T/ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_cursor	bundle/command-t/ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_file_finder	bundle/Command-T/ruby/command-t/controller.rb	/^    def show_file_finder$/;"	f	class:CommandT.Controller
show_file_finder	bundle/Command-T/ruby/command-t/stub.rb	/^    def show_file_finder$/;"	f	class:CommandT.Stub
sname	bundle/rails.vim/autoload/rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	bundle/snipmate.vim/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	bundle/snipmate.vim/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	bundle/snipmate.vim/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
sorted_matches_for	bundle/Command-T/ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
sorted_matches_for	bundle/command-t/ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
source.gather_candidates	bundle/vim-poslist/autoload/unite/sources/poslist.vim	/^function! s:source.gather_candidates(args, context)$/;"	f
source.hooks.on_init	bundle/vim-poslist/autoload/unite/sources/poslist.vim	/^function! s:source.hooks.on_init(args, context)$/;"	f
spawn	bundle/restart.vim/plugin/restart.vim	/^function! s:spawn(args) "{{{$/;"	f
specEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	bundle/rails.vim/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
start	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def start(self, options=None, str=None, ret=None):$/;"	m	class:Router	access:public
start	bundle/sparkup/sparkup	/^    def start(self, options=None, str=None, ret=None):$/;"	m	class:Router	access:public
start	bundle/sparkup/sparkup.py	/^    def start(self, options=None, str=None, ret=None):$/;"	m	class:Router	access:public
start	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def start(self, options=None, str=None, ret=None):$/;"	m	class:Router	access:public
startswith	bundle/rails.vim/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
stepmatch	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
steps	bundle/cucumber.zip/ftplugin/cucumber.vim	/^function! s:steps(lnum)$/;"	f
stop	plugin/debugger.py	/^  def stop(self):$/;"	m	class:Debugger	access:public
store	bundle/php.vim--Garvin/php_vimgen.php	/^$store = array();$/;"	v
str	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    str = ''$/;"	v	class:Parser
str	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    str = ''$/;"	v	class:Token
str	bundle/sparkup/sparkup	/^    str = ''$/;"	v	class:Parser
str	bundle/sparkup/sparkup	/^    str = ''$/;"	v	class:Token
str	bundle/sparkup/sparkup.py	/^    str = ''$/;"	v	class:Parser
str	bundle/sparkup/sparkup.py	/^    str = ''$/;"	v	class:Token
str	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    str = ''$/;"	v	class:Parser
str	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    str = ''$/;"	v	class:Token
str_len	bundle/Command-T/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
str_len	bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon2	file:	access:public
str_p	bundle/Command-T/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
str_p	bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon2	file:	access:public
stripMarkupFromLine	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stub_finder	bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_finder(sorted_matches=[])$/;"	f
stub_match_window	bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_match_window(selection)$/;"	f
stub_prompt	bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_prompt(abbrev='')$/;"	f
stub_vim	bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_vim(working_directory)$/;"	f
stylesheetEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	bundle/rails.vim/autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sub	bundle/rails.vim/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	bundle/rails.vim/plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
suffix	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    suffix = ''$/;"	v	class:Parser
suffix	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    suffix = None$/;"	v	class:Element
suffix	bundle/sparkup/sparkup	/^    suffix = ''$/;"	v	class:Parser
suffix	bundle/sparkup/sparkup	/^    suffix = None$/;"	v	class:Element
suffix	bundle/sparkup/sparkup.py	/^    suffix = ''$/;"	v	class:Parser
suffix	bundle/sparkup/sparkup.py	/^    suffix = None$/;"	v	class:Element
suffix	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    suffix = ''$/;"	v	class:Parser
suffix	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    suffix = None$/;"	v	class:Element
syn	bundle/cucumber.zip/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
sync	autoload/vundle/installer.vim	/^func! s:sync(bang, bundle) abort$/;"	f
synonyms	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    synonyms = {$/;"	v	class:HtmlDialect
synonyms	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    synonyms = {}$/;"	v	class:Dialect
synonyms	bundle/sparkup/sparkup	/^    synonyms = {$/;"	v	class:HtmlDialect
synonyms	bundle/sparkup/sparkup	/^    synonyms = {}$/;"	v	class:Dialect
synonyms	bundle/sparkup/sparkup.py	/^    synonyms = {$/;"	v	class:HtmlDialect
synonyms	bundle/sparkup/sparkup.py	/^    synonyms = {}$/;"	v	class:Dialect
synonyms	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    synonyms = {$/;"	v	class:HtmlDialect
synonyms	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    synonyms = {}$/;"	v	class:Dialect
sys	bundle/Gundo/plugin/gundo.vim	/^import sys$/;"	m
tabpagevar	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tabular#ElementFormatPattern	bundle/Tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#PipeRange	bundle/Tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#TabularizeStrings	bundle/Tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
taskEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	bundle/rails.vim/autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
text	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    text = ''$/;"	v	class:Element
text	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    text = ''$/;"	v	class:Token
text	bundle/sparkup/sparkup	/^    text = ''$/;"	v	class:Element
text	bundle/sparkup/sparkup	/^    text = ''$/;"	v	class:Token
text	bundle/sparkup/sparkup.py	/^    text = ''$/;"	v	class:Element
text	bundle/sparkup/sparkup.py	/^    text = ''$/;"	v	class:Token
text	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    text = ''$/;"	v	class:Element
text	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    text = ''$/;"	v	class:Token
throw	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
time	bundle/Gundo/plugin/gundo.vim	/^import time$/;"	m
timerBegin	bundle/L9/plugin/l9.vim	/^  function s:timerBegin(tag)$/;"	f
timerDump	bundle/L9/plugin/l9.vim	/^  function s:timerDump()$/;"	f
timerStop	bundle/L9/plugin/l9.vim	/^  function s:timerStop()$/;"	f
toLowerForIgnoringCase	bundle/FuzzyFinder/autoload/fuf.vim	/^function s:toLowerForIgnoringCase(str)$/;"	f
toggle	bundle/NERD_tree-Project/plugin/NERD_tree_project.vim	/^function! s:toggle(name)$/;"	f
toggle	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toggle_focus	bundle/Command-T/ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
toggle_focus	bundle/command-t/ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
tokens	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    tokens = []$/;"	v	class:Parser
tokens	bundle/sparkup/sparkup	/^    tokens = []$/;"	v	class:Parser
tokens	bundle/sparkup/sparkup.py	/^    tokens = []$/;"	v	class:Parser
tokens	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    tokens = []$/;"	v	class:Parser
treeExistsForBuf	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
truncated_match	bundle/Command-T/ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
truncated_match	bundle/command-t/ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
try	bundle/rails.vim/autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
txtfiles	bundle/command-t/Makefile	/^txtfiles    := $(shell find doc -name '*.txt')$/;"	m
type	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    type = 0$/;"	v	class:Token
type	bundle/sparkup/sparkup	/^    type = 0$/;"	v	class:Token
type	bundle/sparkup/sparkup.py	/^    type = 0$/;"	v	class:Token
type	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    type = 0$/;"	v	class:Token
u	bundle/repeat.vim/plugin/repeat.vim	/^nnoremap <silent> u     :<C-U>call <SID>wrap('u',v:count)<CR>$/;"	m
unfocus	bundle/Command-T/ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	bundle/Command-T/ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unfocus	bundle/command-t/ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	bundle/command-t/ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unique	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unite#sources#poslist#define	bundle/vim-poslist/autoload/unite/sources/poslist.vim	/^function! unite#sources#poslist#define()$/;"	f
unittestEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	bundle/rails.vim/autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unload	bundle/Command-T/ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	bundle/Command-T/ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unload	bundle/command-t/ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	bundle/command-t/ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unlock	bundle/Command-T/ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
unlock	bundle/command-t/ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
up	plugin/debugger.py	/^  def up(self):$/;"	m	class:Debugger	access:public
upDir	bundle/The-NERD-tree/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
updateBufTimes	bundle/FuzzyFinder/autoload/fuf/buffer.vim	/^function s:updateBufTimes()$/;"	f
updateData	bundle/FuzzyFinder/autoload/fuf/mrufile.vim	/^function s:updateData()$/;"	f
updateInfo	bundle/FuzzyFinder/autoload/fuf/mrucmd.vim	/^function s:updateInfo(cmd)$/;"	f
version	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    def version(self):$/;"	m	class:Router	access:public
version	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^version = "0.1.3"$/;"	v
version	bundle/sparkup/sparkup	/^    def version(self):$/;"	m	class:Router	access:public
version	bundle/sparkup/sparkup	/^version = "0.1.3"$/;"	v
version	bundle/sparkup/sparkup.py	/^    def version(self):$/;"	m	class:Router	access:public
version	bundle/sparkup/sparkup.py	/^version = "0.1.3"$/;"	v
version	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    def version(self):$/;"	m	class:Router	access:public
version	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^version = "0.1.3"$/;"	v
viewEdit	bundle/rails.vim/autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	bundle/rails.vim/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	bundle/rails.vim/autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vim	bundle/Gundo/plugin/gundo.vim	/^import vim$/;"	m
vim,	bundle/vim-quickrun/autoload/quickrun.vim	/^import vim, threading, subprocess, re$/;"	m
vimfiles	bundle/command-t/Makefile	/^vimfiles    := $(shell find plugin -name '*.vim')$/;"	m
vt100?	bundle/Command-T/ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
vt100?	bundle/command-t/ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
vundle#config#bundle	autoload/vundle/config.vim	/^func! vundle#config#bundle(arg, ...)$/;"	f
vundle#config#init	autoload/vundle/config.vim	/^func! vundle#config#init()$/;"	f
vundle#config#init_bundle	autoload/vundle/config.vim	/^func! vundle#config#init_bundle(name, opts)$/;"	f
vundle#config#require	autoload/vundle/config.vim	/^func! vundle#config#require(bundles)$/;"	f
vundle#installer#clean	autoload/vundle/installer.vim	/^func! vundle#installer#clean(bang)$/;"	f
vundle#installer#helptags	autoload/vundle/installer.vim	/^func! vundle#installer#helptags(bundles)$/;"	f
vundle#installer#install	autoload/vundle/installer.vim	/^func! vundle#installer#install(bang, ...)$/;"	f
vundle#rc	autoload/vundle.vim	/^func! vundle#rc()$/;"	f
vundle#scripts#all	autoload/vundle/scripts.vim	/^func! vundle#scripts#all(bang, ...)$/;"	f
vundle#scripts#complete	autoload/vundle/scripts.vim	/^func! vundle#scripts#complete(a,c,d)$/;"	f
vundle#scripts#install	autoload/vundle/scripts.vim	/^func! vundle#scripts#install() abort$/;"	f
vundle#scripts#reload	autoload/vundle/scripts.vim	/^func! vundle#scripts#reload() abort$/;"	f
warn	bundle/Command-T/ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warn	bundle/command-t/ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warn	bundle/fugitive.vim/plugin/fugitive.vim	/^function! s:warn(str)$/;"	f
warn	bundle/rails.vim/autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	bundle/restart.vim/plugin/restart.vim	/^function! s:warn(msg) "{{{$/;"	f
warnf	bundle/restart.vim/plugin/restart.vim	/^function! s:warnf(fmt, ...) "{{{$/;"	f
watch_execute	plugin/debugger.py	/^  def watch_execute(self):$/;"	m	class:Debugger	access:public
watch_input	plugin/debugger.py	/^  def watch_input(self, mode, arg = ''):$/;"	m	class:Debugger	access:public
wrap	bundle/repeat.vim/plugin/repeat.vim	/^function! s:wrap(command,count)$/;"	f
wrap	bundle/surround.vim/plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	bundle/surround.vim/plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
write	plugin/debugger.py	/^  def write(self, msg):$/;"	m	class:VimWindow	access:public
write_xml	plugin/debugger.py	/^  def write_xml(self, xml):$/;"	m	class:VimWindow	access:public
write_xml_childs	plugin/debugger.py	/^  def write_xml_childs(self, xml):$/;"	m	class:VimWindow	access:public
xdebug#AppendToVarView	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#AppendToVarView(xmlO)$/;"	f
xdebug#BreakPointSet	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#BreakPointSet(key, xmlO, ...)$/;"	f
xdebug#BreakPointsBuffer	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#BreakPointsBuffer()$/;"	f
xdebug#Eval	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#Eval(expr)$/;"	f
xdebug#FormatResult	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#FormatResult(xmlO)$/;"	f
xdebug#HandleStackReply	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#HandleStackReply(xmlO, ...)$/;"	f
xdebug#HandleWatchExprResult	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#HandleWatchExprResult(watch_expr, xmlO, ...)$/;"	f
xdebug#HandleXdebugReply	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#HandleXdebugReply(xml) abort$/;"	f
xdebug#Receive	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#Receive(data, ...) dict$/;"	f
xdebug#SetCurr	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#SetCurr(...)$/;"	f
xdebug#ShowEvalResult	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#ShowEvalResult(xmlO, ...)$/;"	f
xdebug#StackToQF	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#StackToQF(...)$/;"	f
xdebug#Start	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#Start(...)$/;"	f
xdebug#ToggleLineBreakpoint	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#ToggleLineBreakpoint()$/;"	f
xdebug#UpdateBreakPoints	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#UpdateBreakPoints()$/;"	f
xdebug#UpdateVarView	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#UpdateVarView()$/;"	f
xdebug#UriOfFilename	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#UriOfFilename(f)$/;"	f
xdebug#VarView	bundle/vim-addon-xdebug/autoload/xdebug.vim	/^fun! xdebug#VarView()$/;"	f
xml_on_attribute	plugin/debugger.py	/^  def xml_on_attribute(self, node):$/;"	m	class:VimWindow	access:public
xml_on_cdata_section	plugin/debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:VimWindow	access:public
xml_on_cdata_section	plugin/debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:WatchWindow	access:public
xml_on_comment	plugin/debugger.py	/^  def xml_on_comment(self, node):$/;"	m	class:VimWindow	access:public
xml_on_document	plugin/debugger.py	/^  def xml_on_document(self, node):$/;"	m	class:VimWindow	access:public
xml_on_document_type	plugin/debugger.py	/^  def xml_on_document_type(self, node):$/;"	m	class:VimWindow	access:public
xml_on_element	plugin/debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:StackWindow	access:public
xml_on_element	plugin/debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:TraceWindow	access:public
xml_on_element	plugin/debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:VimWindow	access:public
xml_on_element	plugin/debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:WatchWindow	access:public
xml_on_entity	plugin/debugger.py	/^  def xml_on_entity(self, node):$/;"	m	class:VimWindow	access:public
xml_on_notation	plugin/debugger.py	/^  def xml_on_notation(self, node):$/;"	m	class:VimWindow	access:public
xml_on_processing_instruction	plugin/debugger.py	/^  def xml_on_processing_instruction(self, node):$/;"	m	class:VimWindow	access:public
xml_on_text	plugin/debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:VimWindow	access:public
xml_on_text	plugin/debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:WatchWindow	access:public
xml_stringfy	plugin/debugger.py	/^  def xml_stringfy(self, xml):$/;"	m	class:VimWindow	access:public
xml_stringfy_childs	plugin/debugger.py	/^  def xml_stringfy_childs(self, node, level = 0):$/;"	m	class:VimWindow	access:public
xterm?	bundle/Command-T/ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
xterm?	bundle/command-t/ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
yS	bundle/surround.vim/plugin/surround.vim	/^  nmap      yS   <Plug>YSurround$/;"	m
ySS	bundle/surround.vim/plugin/surround.vim	/^  nmap      ySS  <Plug>YSsurround$/;"	m
ySs	bundle/surround.vim/plugin/surround.vim	/^  nmap      ySs  <Plug>YSsurround$/;"	m
ys	bundle/surround.vim/plugin/surround.vim	/^  nmap      ys   <Plug>Ysurround$/;"	m
yss	bundle/surround.vim/plugin/surround.vim	/^  nmap      yss  <Plug>Yssurround$/;"	m
z	bundle/sparkup/TextMate/Sparkup.tmbundle/Support/sparkup.py	/^    z = Router()$/;"	v
z	bundle/sparkup/sparkup	/^    z = Router()$/;"	v
z	bundle/sparkup/sparkup.py	/^    z = Router()$/;"	v
z	bundle/sparkup/vim/ftplugin/html/sparkup.py	/^    z = Router()$/;"	v
